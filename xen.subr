if [ ! "$_CBSD_XEN_SUBR" ]; then
_CBSD_XEN_SUBR=1
###

# generic function for xen
# required:
# strings.subr
#

. ${distdir}/virtual.subr

XL_CMD="/usr/local/sbin/xl"

# test environment for xening
# init tmuxcmd
init_xen()
{
	local _host_ready=1
	local _required_kmods="if_tap if_bridge" _i _res

	/sbin/ifconfig bridge0 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		${ECHO} "${N1_COLOR}init_xen : Interface ${N2_COLOR}bridge0${N1_COLOR} not exist${N0_COLOR}"
		_host_ready=0
	fi

	for _i in ${_required_kmods}; do
		if ! /sbin/kldstat -qm ${_i} >/dev/null 2>&1; then
			${ECHO} "${N1_COLOR}No kldloaded module: ${N2_COLOR}${_i}${N0_COLOR}"
			${ECHO} "${N1_COLOR}Put ${N2_COLOR}kld_list=\"if_tap if_bridge\"${N1_COLOR} into your ${N2_COLOR}/etc/rc.conf${N1_COLOR} and execute: ${N2_COLOR}service kld restart${N0_COLOR}"
			_host_ready=0
		fi
	done

	if [ ! -x "${XL_CMD}" ]; then
		${ECHO} "${N1_COLOR}No such: ${XL_CMD}${N0_COLOR}"
		_host_ready=0
	fi

	if [ ${_host_ready} -ne 1 ]; then
		echo
		${ECHO} "${N1_COLOR}Please follow ${H3_COLOR}https://wiki.freebsd.org/Xen ${N1_COLOR}and/or ${H3_COLOR}https://wiki.xen.org/wiki/FreeBSD_Dom0${N1_COLOR} instruction to setup FreeBSD host:${N0_COLOR}"
		echo

		if [ ${freebsdhostversion} -ge 1200000 ]; then
			${ECHO} "${H1_COLOR}*${N0_COLOR} pkg install ${H3_COLOR}sysutils/xen-tools411 emulators/xen-kernel411${N0_COLOR}"
		else
			${ECHO} "${H1_COLOR}*${N0_COLOR} pkg install ${H3_COLOR}sysutils/xen-tools47 emulators/xen-kernel47${N0_COLOR}"
		fi
		${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc xencommons_enable='YES'${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc cloned_interfaces='bridge0'${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc ifconfig_bridge0='addm ${H3_COLOR}bge0${N0_COLOR} SYNCDHCP'${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'vm.max_wired=-1' >> /etc/sysctl.conf${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xc0 	"/usr/libexec/getty Pc"         xterm   on  secure' >> /etc/ttys${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} mkdir -p /var/lock${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} mkdir -p /var/run/xen${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xen_cmdline="dom0_mem=${H3_COLOR}2048M${N0_COLOR} dom0_max_vcpus=${H3_COLOR}2${N0_COLOR} dom0pvh=1 com1=115200,8n1 guest_loglvl=all loglvl=all vga=keep noreboot"' >> /boot/loader.conf${N0_COLOR}"
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xen_kernel="/boot/xen"' >> /boot/loader.conf${N0_COLOR}"
		echo
		${ECHO} "${N1_COLOR}Where ${H3_COLOR}bge0${N1_COLOR} is your uplink interface${N0_COLOR}"
		echo
		${ECHO} "${N1_COLOR}Also ${N2_COLOR}if_tap(4)${N1_COLOR} module should be loaded.${N0_COLOR}"

		exit 0
	fi

	tmuxcmd=$(which tmux)
	[ -z "${tmuxcmd}" ] && err 1 "${N1_COLOR}Current version required for ${N2_COLOR}tmux${N1_COLOR}\nPlease ${N2_COLOR}pkg install tmux ${N1_COLOR} or ${N2_COLOR}make -C /usr/ports/sysutils/tmux install${N1_COLOR} it.${N0_COLOR}"
}

# export arguments for bhyve cd_args and cd_args2 (second boot after empty disk check)
# $iso_img must be present
compile_cd_args()
{
	cd_args=
	cd_args2=

	# Ubuntu has trouble when got two CD
	#[ "${vm_boot}" = "net" ] && return 0

	if [ -z "${iso_img}" ]; then
		${ECHO} "${N1_COLOR}iso_img variable is not set${N0_COLOR}"
		return 1
	fi

	if [ ! -r "${iso_img}" ]; then
		iso_img2=$( cbsdsqlro storage_media SELECT path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" LIMIT 1 )
		if [ ! -r ${iso_img2} ]; then
			${ECHO} "${N1_COLOR}iso_img in not readable: ${N2_COLOR}${iso_img} ${iso_img2}${N0_COLOR}"
			return 1
		else
			iso_img="${iso_img2}"
		fi
	fi

	if [ -z "${iso_img}" ]; then
		${ECHO} "${N1_COLOR}iso_img variable is empty: no ISO or image is not readable${N0_COLOR}"
		return 1
	fi

	## for check via ref
	# cd_args="-s ${bhyve_pci_index}:0,ahci-cd,${distdir}/upgrade/patch/efirefd.fd"
	#if ! next_pci_id; then
	#	return 1
	#fi
	# cd_args="${cd_args} -s ${bhyve_pci_index}:0,ahci-cd,${iso_img}"

	if [ "${vm_os_type}" = "openbsd" ]; then
		# small hack: openbsd use install.fs as hdd drive, not cd
		cd_args="-s ${bhyve_pci_index}:0,ahci-hd,${iso_img},ro"
		cd_args2=""
	else
		cd_args="-s ${bhyve_pci_index}:0,ahci-cd,${iso_img}"
		cd_args2="-s ${bhyve_pci_index}:0,ahci-cd,/usr/local/cbsd/upgrade/patch/efirefd.fd"
	fi
}

# export arguments for bhyve about dsk vms in $dsk_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_args; then
# 	echo $dsk_args
# else
#	echo "No disks"
# fi
compile_dsk_args()
{
	local dsk_id=0
	local sqldelimer=" "
	local prefix
	local full_dsk_path
	local XENCFG="${1}"
	local dsk_count=0
	local iso_count=0
	local iso_img2=
	local media_count=0
	local first_count=0
	local _ascii _dev_letter _dev

	dsk_count=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT COUNT(dsk_path) FROM xendsk' )

	iso_img2=$( cbsdsqlro storage_media SELECT path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" LIMIT 1 )

	[ -r ${iso_img2} ] && iso_count=$(( iso_count + 1 ))

	if [ -r ${iso_img} ]; then
		if [ "${iso_img}" = "${iso_img2}" ]; then
			iso_img2=
		else
			iso_count=$(( iso_count + 1 ))
		fi
	else
		iso_img=
	fi

	media_count=$(( iso_count + dsk_count ))

	[ ${media_count} -eq 0 ] && return 0

	# open disk brackets
	echo "disk = [" >> ${XENCFG}

	# temporary workaroung for Alex (CBSD Telegram) issue with no disk (old SQL schema) - don't select dsk_conf
	#	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,dsk_conf FROM xendsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot dsk_conf; do
	cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot FROM xendsk WHERE dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot; do

		# test for full path. If path not started from '/' - append $data dir
		full_dsk_path=
		prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

		if [ "${prefix}" != "/" ]; then
			full_dsk_path="${data}/${dsk_path}"
		else
			full_dsk_path="${dsk_path}"
		fi

		# for zvol
		# phy:${full_dsk_path} ?

		_ascii=$(( 97 + first_count ))	# started by 'a' (97 ascii code)
		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="hd${_dev_letter}"

		if [ ${first_count} -eq 0 ]; then
			# first record
			printf "'${full_dsk_path},raw,${_dev},rw'" >> ${XENCFG}
		else
			printf ", '${full_dsk_path},raw,${_dev},rw'" >> ${XENCFG}
		fi
		first_count=$(( first_count + 1 ))
		media_count=$(( media_count - 1 ))

	done || err 1 "${N1_COLOR}Error while create disk map${N0_COLOR}"

	_ascii=$(( 97 + dsk_count ))	# started by 'a' (97 ascii code), skip all hdd and set next letter for disk id
	_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
	_dev="hd${_dev_letter}"

	if [ -n "${iso_img2}" ]; then
		printf ", '${iso_img2},raw,${_dev}:cdrom,r'" >> ${XENCFG}
		first_count=$(( first_count + 1 ))
		_ascii=$(( 97 + first_count ))	# started by 'a' (97 ascii code)
		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="hd${_dev_letter}"
	fi

	[ -n "${iso_img}" ] && printf ", '${iso_img},raw,${_dev}:cdrom,r'" >> ${XENCFG}

	# close disk brackets
	printf "\n]\n" >> ${XENCFG}
	return 0
}

# print 5c:f9:dd:76:d5:c4 from 5cf9dd76d5c4
normalize_nic_hwaddr()
{
	local _hwaddr
	[ -z "${1}" ] && return 0

	_hwaddr=$( echo "${1}" | /usr/bin/tr -d ":"| /usr/bin/sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' )
	printf ${_hwaddr}
}


# export arguments for xen about nic vms in $nic_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_nic_args; then
# 	echo $nic_args
# else
#	echo "No nic"
# fi
compile_nic_args()
{
	local _id=0 i _res taplist=
	local sqldelimer=" "
	local mybridge

	cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT id,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr FROM xennic WHERE jname=\"${jname}\" |while read nic_id nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr; do

		# when ip=0 and interface=auto we must use default interface for upstream
		if [ "${nic_parent}" = "0" -o "${nic_parent}" = "auto" ]; then
			interface=$( getnics-by-ip ip=0.0.0.0 )
		else
			interface="${nic_parent}"
		fi

		# still hard coded
		mybridge="bridge0"

#		if ! mybridge=$( get_my_device bridge ${interface} ); then
#			err 1 "${N1_COLOR}Error: Cant get_my_device for ${interface}: ${mybridge}${N0_COLOR}"
#		fi

#		mytap=$( get_my_tap ${mybridge} )
#		[ $? -eq 1 ] && err 1 "${N1_COLOR}Error: Cant get_my_tap by: ${N2_COLOR}${mybridge}${N0_COLOR}"

		echo "M $mybridge a $interface"

		_res=$( /sbin/ifconfig ${mybridge} addm ${interface} >/dev/null 2>&1 )

#		if [ "${nic_hwaddr}" != "0" ]; then
#			unset mymac
#			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
#			echo "export nic${_id}=\"-s ${pcislot}:0,virtio-net,${mytap},mac=${mymac}\" ;"
#		else
#			echo "export nic${_id}=\"-s ${pcislot}:0,virtio-net,${mytap}\" ;"
#		fi
#		
#		echo "export mytap${_id}=\"${mytap}\";"
#		
		_id=$(( _id + 1 ))
	done || err 1 "${N1_COLOR}Error while create nic map${N0_COLOR}"

	nic_args=""

	return 0
}

# create new disk image for bhyve VMs
# -f fsfeat ( 1 or 0 ) - use of skip FS features
# -p full path
# -s size (eg: 1g)
# -t type (zvol, md)
# require: /usr/local/bin/cbsd as shell
# require: ${tools}
#
# if ! xen_create_dsk -p /tmp/olala.vhd -s 10g -f 0; then
#    echo ";=("
# fi
xen_create_dsk()
{
	local newdsk imgsize fsfeat imgtype

	while getopts "f:p:s:t:" opt; do
		case "${opt}" in
			f) feat="${OPTARG}" ;;
			p) newdsk="${OPTARG}" ;;
			s) imgsize="${OPTARG}" ;;
			t) imgtype="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	local _res

	if [ "${fsfeat}" = "0" ]; then
		zfsfeat=0
		hammerfeat=0
	fi

	local lunname=$( /usr/bin/basename ${newdsk} ) # for ZFS vol
	local datadir=$( /usr/bin/dirname ${newdsk} )  # for ZFS vol

	local convval imgbytes blockcount

	if [ -f "${newdsk}" ]; then
		echo "Disk ${newdsk} already exist"
		return 1
	fi

	# test for human
	if is_number ${imgsize}; then
		conv2bytes ${imgsize} || err 1 "${N1_COLOR}conv2bytes from xen.subr error for: ${N2_COLOR}${imgsize}${N0_COLOR}"
		imgbytes="${convval}"
	else
		imgbytes=$imgsize
	fi

	if [ "${zfsfeat}" = "1" -a "${imgtype}" = "zvol" ]; then
		readconf zfs.conf
		. ${zfstool}
		DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
#               ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} )
#               if zfsroot $jname; then
#                       err 1 "$ZPOOL/$jname already in use"
#               fi
#               /sbin/zfs create ${zfs_create_flags} -o mountpoint=${JAILDIR} ${ZPOOL}/${jname}
		/sbin/zfs create -V ${imgbytes} -o volmode=dev ${DATA}/bcbsd-${jname}-${lunname}

		_res=$?
		[ ${_res} -ne 0 ] && return ${_res}

		[ ! -d "${datadir}" ] && /bin/mkdir -p ${datadir}
		/bin/ln -sf /dev/zvol/${DATA}/bcbsd-${jname}-${lunname} ${newdsk}

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		blockcount=$(( imgbytes  / 1048576 ))
		[ ! -d ${datadir} ] && /bin/mkdir -p ${datadir}
		/usr/bin/touch "${newdsk}"
		/bin/dd if=/dev/zero of="${newdsk}" bs=1m count=0 seek=${blockcount} 1> /dev/null 2>&1 || return 1
		# /bin/dd if=/dev/random of="${newdsk}" bs=1m count=${blockcount}
		_res=$?
		[ ${_res} -ne 0 ] && return ${_res}
	fi

	media mode=register name="hdd-${lunname}" path="${newdsk}" type="hdd" jname="${jname}"
	return 0
}


# detach and remove disk image from xen VMs
# jname must be set
# $1 dsk_path from sql table (eg: dsk1.vhd )
# require: /usr/local/bin/cbsd as shell
xen_remove_dsk()
{
	local dsk="${1}"; shift
	[ -z "${jname}" -o -z "${dsk}" ] && return 0

	[ -r ${jailsysdir}/${jname}/local.sqlite ] && cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM xendsk WHERE dsk_path=\"${dsk}\" AND jname=\"${jname}\"

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. ${zfstool}

		if is_getzvol ${data}/${dsk}; then
			/sbin/zfs destroy ${is_zvol}
	fi

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		#date
	fi

	[ -f "${data}/${dsk}" -o -h "${data}/${dsk}" ] && /bin/rm -f "${data}/${dsk}"

	return 0
}

# detach and remove NIC from xen VMs
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
xen_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM xennic WHERE id=\"${id}\" AND jname=\"${jname}\"

	return 0
}


# export vncdisplay
compile_vnc_args()
{
	local vm_port
	local vnc_bind

	# spice by default?
	[ ${spice_default} -eq 1 ] && return 1

	local width height

	vnc_args=

	case "${vm_vnc_port}" in
		0)
			vm_port=$( get_next_tcp_port -s 5900 -e 6900 )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 5900-6900 range${N0_COLOR}"
			vnc_args="--vrde on --vrdeport ${vm_port}"
			vncdisplay=$(( ${vm_port} - 5900 ))
			${ECHO} "${N1_COLOR}VRDP is enabled. VNC port: ${N2_COLOR}${vm_port}. ${N1_COLOR}VNC pass: ${N2_COLOR}cbsd${N0_COLOR}${N0_COLOR}"
			;;
		1)
			vm_port=0
			vnc_args="--vrde off"
		;;
	*)
			vm_port=${vm_vnc_port}
			vnc_args="--vrde on --vrdeport ${vm_port}"
			;;
	esac

	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${xen_vnc_tcp_bind}" ]; then
		vnc_bind="${xen_vnc_tcp_bind}"
	else
		vnc_bind="${default_vnc_tcp_bind}"
	fi

	# add xen_vnc_tcp_ipconnect variables, used in
	# vncviewer promt and exported hooks variables
	if [ "${vnc_bind}" = "0.0.0.0" ]; then
		xen_vnc_tcp_ipconnect="${nodeip}"
	else
		xen_vnc_tcp_ipconnect="${vnc_bind}"
	fi

	#if [ -n "${xen_vnc_resolution}" ]; then
	#	width=${xen_vnc_resolution%%x*}
	#	height=${xen_vnc_resolution##*x}
	#else
	#	width="${default_vnc_width}"
	#	heigh="${default_vnc_height}"
	#fi

	${ECHO} "${N1_COLOR}VRDP is enabled. VNC bind/port: ${N2_COLOR}${xen_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}vncviewer ${xen_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}Resolution: ${N2_COLOR}${width}x${height}.${N0_COLOR}"
	[ -n "${vnc_password}" ] && ${ECHO} "${N1_COLOR}VNC pass: ${N2_COLOR}${vnc_password}${N0_COLOR}"

	if [ "${vnc_bind}" = "0.0.0.0" ]; then
		echo
		${ECHO} "${N1_COLOR}Warning!!! You are running system with open ${N2_COLOR}VNC${N1_COLOR} port to all world wich is not to safe${N1_COLOR}"
		${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}VNC${N1_COLOR} port access${N0_COLOR}"
		${ECHO} "${N1_COLOR}Or change vnc_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
		echo
	fi

	return 0
}

# export vncdisplay
compile_spice_args()
{
	local vm_port
	local vnc_bind

	# spice not by default?
	[ ${spice_default} -eq 0 ] && return 1

	local width height

	vnc_args=

	case "${vm_vnc_port}" in
		0)
			vm_port=$( get_next_tcp_port -s 6000 -e 7000 )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 6000-7000 range${N0_COLOR}"
			vnc_args="--vrde on --vrdeport ${vm_port}"
			#vncdisplay=$(( ${vm_port} - 6000 ))
			${ECHO} "${N1_COLOR}VRDP is enabled. VNC port: ${N2_COLOR}${vm_port}. ${N1_COLOR}VNC pass: ${N2_COLOR}cbsd${N0_COLOR}${N0_COLOR}"
			;;
		1)
			vm_port=0
			spice_args="--vrde off"
		;;
	*)
			vm_port=${vm_spice_port}
			spice_args="--vrde on --vrdeport ${vm_port}"
			;;
	esac

	vncdisplay="${vm_port}"

	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${xen_spice_tcp_bind}" ]; then
		spice_bind="${xen_spice_tcp_bind}"
	else
		spice_bind="${default_spice_tcp_bind}"
	fi

	# add xen_vnc_tcp_ipconnect variables, used in
	# vncviewer promt and exported hooks variables
	if [ "${spice_bind}" = "0.0.0.0" ]; then
		xen_spice_tcp_ipconnect="${nodeip}"
	else
		xen_spice_tcp_ipconnect="${spice_bind}"
	fi

	${ECHO} "${N1_COLOR}VRDP is enabled. SPICE bind/port: ${N2_COLOR}${xen_spice_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}spicy -h ${xen_spice_tcp_ipconnect} -p ${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}Resolution: ${N2_COLOR}${width}x${height}.${N0_COLOR}"
	[ -n "${spice_password}" ] && ${ECHO} "${N1_COLOR}SPICE pass: ${N2_COLOR}${spice_password}${N0_COLOR}"

	if [ "${spice_bind}" = "0.0.0.0" ]; then
		echo
		${ECHO} "${N1_COLOR}Warning!!! You are running system with open ${N2_COLOR}SPICE${N1_COLOR} port to all world wich is not to safe${N1_COLOR}"
		${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}VNC${N1_COLOR} port access${N0_COLOR}"
		${ECHO} "${N1_COLOR}Or change spice_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
		echo
	fi

	return 0
}



# -j ${jname}
# return 0 when no VM process exist by $jname
# return 1 when VM process exist with $jname + return $vm_pid and $vm_state variables
# e.g: check_for_xen_process -j vm1
check_for_xen_process()
{
	local jname b_jname _state _domid
	unset vm_pid vm_state

	while getopts "j:" opt; do
		case "${opt}" in
			j) jname="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${jname}" ] && return 0

	_state=$( ${XL_CMD} list ${jname} > /dev/null 2>&1 )
	[ $? -ne 0 ] && return 0
	_domid=$( ${XL_CMD} domid ${jname} )
	. ${strings}

	local search_cmd=" -xen-domid ${_domid} "

	eval $( /bin/ps axopid,state,ucomm,command -ww | while read pid state ucomm command; do
		case ${ucomm} in
			qemu-system-i386)
				;;
			*)
				continue
				;;
		esac

		if echo "${command}" | /usr/bin/grep -q "${search_cmd}" 2>/dev/null; then
			echo vm_state=\"${state}\"
			echo vm_pid=\"${pid}\"
		fi
	done )

	[ -z "${vm_pid}" ] && return 0
	return 1
}

###
fi
