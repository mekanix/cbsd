#!/usr/local/bin/cbsd
#v11.1.4
MYARG="jname"
CBSDMODULE="bhyve"

. ${subr}
. ${distsharedir}/bhyve.conf

#concat for bhyve arg
JARG="${MYCOL} nice vm_pid"

MYOPTARG="$JARG"
MYDESC="Modify parameter for bhyve"
ADDHELP="mode=force for modification on the running jail\n\
vm_pid - when 'auto', force to update pid from process list\n"

. ${tools}
. ${strings}
. ${cbsdinit}

emulator="bhyve"	# for jname_is_multiple
jname_is_multiple

if [ -n "${jail_list}" ]; then
	new_arg=

	for i in $*; do
		_is_jname=$( substr --pos=0 --len=5 --str=${i} )
		[ "${_is_jname}" = "jname" ] && continue
		new_arg="${new_arg} ${i}"
	done

	for jname in ${jail_list}; do
		bset jname=${jname} ${new_arg}
	done
	exit 0
fi

readconf cbsd_queue.conf
[ -z "${cbsd_bhyve_queue_name}" ] && cbsd_bhyve_queue_name="/clonos/bhyvevms/"

update_jails()
{
	eval TMPVAL="\$$i"

	# restore spaces from '%' ( see todo in init func from nc.subr for val="one two" )
	VAL=$( echo "${TMPVAL}" | /usr/bin/tr '%' ' ' )

	case "${i}" in
		vm_ram)
			if is_number ${VAL}; then
				if conv2bytes ${VAL}; then
					VAL="${convval}"
				fi
			else
				# Assume value in MB, convert it to bytes
				VAL=$(( ${VAL} * 1024 * 1024 ))
			fi
		;;
		vm_pid)
			VAL=
			case "${vm_pid}" in
				[Aa][Uu][Tt][Oo])
					. ${distdir}/bhyve.subr
					check_for_bhyve_process -j ${jname}
					if [ $? -eq 0 ]; then
						VAL=0
					else
						VAL="${vm_pid}"
					fi
					;;
				*)
					VAL="${vm_pid}"
					;;
			esac
			[ -z "${VAL}" ] && err 1 "${N1_COLOR}bset vm_pid: unable to determine pid for: ${N2_COLOR}${jname}${N0_COLOR}"

			if is_number ${VAL}; then
				err 1 "${N1_COLOR}bset vm_pid: not number: ${N2_COLOR}${VAL}${N0_COLOR}"
			fi
	esac

	[ -z "${i}" ] && return 0

	case "${i}" in
		nice)
			_formfile="${jailsysdir}/${jname}/helpers/brctl.sqlite"
			if [ ! -r ${_formfile} ]; then
				${ECHO} "${N1_COLOR}No such rctl file: ${N2_COLOR}${_formfile}${N0_COLOR}"
				return 1
			fi
			cbsdsqlrw ${_formfile} UPDATE forms set cur=\"${VAL}\" WHERE param=\"nice\"
			brenice jname=${jname}
			;;
		vm_pid)
			# pid stored in jails settings as JID (should be moved to settings table)
			cbsdsqlrw local "UPDATE jails SET jid=\"${VAL}\" WHERE jname=\"${jname}\""
			;;
		*)
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET ${i}=\"${VAL}\"
			# back compatible
			cbsdsqlrw local UPDATE bhyve SET ${i}=\"${VAL}\" WHERE jname=\"${jname}\"
			;;
	esac

	cbsdlogger NOTICE ${CBSD_APP}: ${argpart}: ${VAL}
	${ECHO} "${argpart}: ${N1_COLOR}changed${N0_COLOR}"

}

# here we get status from jstatus, not via jrcconf for non-overwriting params in args
jid=$( jstatus jname=${jname} )
[ $? -eq 0 ] && err 1 "${N1_COLOR}No such jail: ${N2_COLOR}${jname}${N0_COLOR}"

if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
	allstr="$@"
	echo "QUEUE OK: cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=update ${allstr}"
	[ "${cbsd_bhyve_queue_name}" != "none" ] && cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id="${jname}" cmd=update ${allstr}
fi

for n in "$@"; do
	argpart="${n%%=*}"

	for i in ${JARG}; do
		if [ "${argpart}" = "${i}" -a "${argpart}" != "jname" ]; then
			update_jails
		fi
	done
done

# exit code 0 is nessesary for dot()
exit 0
