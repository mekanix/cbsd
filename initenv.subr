if [ ! "$_CBSD_INITENV_SUBR" ]; then
_CBSD_INITENV_SUBR=1
###

init_items_desc()
{
	nodename_desc="Short form nodename for this host e.g. like hostname. Warning: this operation will recreate the ssh keys in $workdir/.ssh dir"
	hostname_desc="Fully qualified domain name (FQDN) of the host"
	nodeip_desc="Node management IPv4 or IPv6 address"
	nodedescr_desc="Node info/description"
	jnameserver_desc="Jails default DNS name-server"
	nodeippool_desc="Jail pool IP address range"
	nat_enable_desc="Enable NAT for RFC1918 networks"
	natip_desc="NAT IPv4/IPv6 or NIC"
	fbsdrepo_desc="Use official FreeBSD repository? When no (0) repository of CBSD is preferred (usefull for stable=1)"
	mdtmp_desc="Configure memory disk"
	repo_desc="Use repository for images and template?"
	workdir_desc="Work directory"
	ipfw_enable_desc="Enable IPFW?"
	zfsfeat_desc="Enable ZFS feature?"
	hammerfeat_desc="Enable HAMMERFS feature?"
	jail_interface_desc="Jails NIC"
	parallel_desc="Parallel mode stop/start"
	stable_desc="Use STABLE branch instead of RELEASE by default ? Attention: only CBSD repository have binary base for STABLE branch"
	sqlreplica_desc="Enable sqlite3 replication to remote nodes"
	statsd_enable_desc="Configure CBSD statsd services for collect RACCT statistics?"
}

init_items_default()
{
	collect_netinfo

	##default area
	nodename_default=$( /bin/hostname )

	case "${CBSD_NODE_IP6_ACTIVE}" in
		1)
			nodeip_default="${CBSD_IP6}"
			jnameserver_default="2001:4860:4860::8888,2001:4860:4860::8844,8.8.8.8,8.8.4.4"
			# todo: ipv6 calc/net
			nodeippool_default="10.0.0.0/16 ${CBSD_IP4}/24"
			natip_default="${CBSD_IP6}"
			;;
		*)
			nodeip_default="${CBSD_IP4}"
			jnameserver_default="8.8.8.8,8.8.4.4"
			nodeippool_default="10.0.0.0/16 ${CBSD_IP4}/24"
			natip_default="${CBSD_IP4}"
			;;
		*)
	esac

	nodedescr_default="Datacenter #5, Middle of Nowhere"
	jnameserver_default="${jnameserver_default}"

	nat_enable_default="Enable NAT"
	fbsdrepo_default="1"
	mdtmp_default="8"
	repo_default="https://bsdstore.ru"
	workdir_default="/usr/jails"
	ipfw_enable_default="1"
	zfsfeat_default="1"
	hammerfeat_default="1"
	jail_interface_default="auto"
	parallel_default="5"
	stable_default="0"
	sqlreplica_default="1"
	statsd_enable_default="0"
}

# install file from $2 to $3 if not equal
# $1 addit.  arg for install
installne()
{
	[ ! -f "${2}" ] && err 1 "${MAGENTA}installne: no such source: ${GREEN}${2}${NORMAL}"

	if ! cmp -s $2 $3; then
		/usr/bin/install $1 $2 $3
		return 1
	fi

	return 0
}

# sync with natcfg form if forms exist
# for back-compatible with old settings in global/local.sqlite
# $answ variable must be set
sync_nat_with_forms()
{
	local _answ

	[ ! -r "${jailsysdir}/CBSDSYS/helpers/natcfg.sqlite" ] && return 0
	[ -z "${answ}" ] && return 0

	case "${answ}" in
		0)
			_answ="disable"
			;;
		*)
			_answ="${answ}"
			;;
	esac

	if [ -r "${jailsysdir}/CBSDSYS/helpers/natcfg.sqlite" ]; then
		framework_id=$( cbsdsql ${jailsysdir}/CBSDSYS/helpers/natcfg.sqlite "SELECT id FROM nat_enable_select WHERE text=\"${_answ}\"" )
		${miscdir}/sqlcli ${jailsysdir}/CBSDSYS/helpers/natcfg.sqlite "UPDATE forms SET cur=\"${framework_id}\" WHERE param='nat_enable'"
	fi
}

make_nat()
{
	local rfc1918="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
	local _extiface
	local _ret

	update_netinfo

	iptype ${natip} >/dev/null 2>&1
	_ret=$?

	# if natip is not valid IPv4, assume it is NIC variable.
	# so try to find out first IPv4 for aliasing
	case ${_ret} in
		1)
			# natip is valid IPv4
			_extiface="${CBSD_UPLINK_IFACE4}"
			;;
		2)
			# natip is valid IPv6
			_extiface="${CBSD_UPLINK_IFACE6}"
			;;
		*)
			#${ECHO} "${MAGENTA}make_nat: iptype unknown for ${natip}, trying to obtain info via getip-by-nics..${NORMAL}"
			_extiface="${natip}"
			natip=$( getip-by-nics nic=${_extiface} 2>/dev/null )
			if [ $? -ne 0 ]; then
				${ECHO} "${MAGENTA}Unable to determine first IP for nic: ${GREEN}${_extiface}${NORMAL}"
				return 2
			fi
			${ECHO} "${MAGENTA}make_nat: ${natip} IP selected via: ${GREEN}${_extiface}${NORMAL}"
	esac

	/sbin/ifconfig ${_extiface} >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		${ECHO} "Unable to determine default interface"
		return 1
	fi

	case "${ok}" in
		"exit")
			return 0
			;;
		"pf")
			if [ $( /usr/bin/grep ^pf_load= /boot/loader.conf /boot/loader.conf.local 2>/dev/null | /usr/bin/wc -l ) = 0 ]; then
				getyesno "Do you want to modify /boot/loader.conf to set pf_load=YES ?" && ${SYSRC_CMD} -vf /boot/loader.conf pf_load=YES
			fi

			#save other rule, except nat
			if [ -r "${etcdir}/pfnat.conf" ]; then
				/usr/bin/grep -E -v "(^nat)|(Setup by CBSD NAT)" ${etcdir}/pfnat.conf |/usr/bin/sort -u > ${tmpdir}/pfnat.conf.bak
			fi
			/usr/bin/truncate -s0 ${etcdir}/pfnat.conf

			for _net in ${rfc1918}; do
				_nm=$( echo ${_net} |/usr/bin/tr "/" " " )
				${workdir}/sbin/netmask ${_nm} ${natip}
				if [ $? -ne 1 ]; then
					/bin/cat >> ${etcdir}/pfnat.conf <<EOF
nat on ${_extiface} from ${_net} to ! ${_net} -> ${natip} # // Setup by CBSD NAT
EOF
				fi
			done

			#restore other rule
			if [ -r ${tmpdir}/pfnat.conf.bak ]; then
				/bin/cat ${tmpdir}/pfnat.conf.bak >> ${etcdir}/pfnat.conf
				/bin/rm -f ${tmpdir}/pfnat.conf.bak
			fi

			answ="${ok}"
			ok="ok"
			${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"${answ}\"
			sync_nat_with_forms
			return 0
		;;
		"ipfilter")
			/usr/bin/truncate -s0 ${etcdir}/ipfilter.conf

			for _net in ${rfc1918}; do
				_nm=$( echo ${_net} |/usr/bin/tr "/" " " )
				${workdir}/sbin/netmask ${_nm} ${natip}
				if [ $? -ne 1 ]; then
					cat >> ${etcdir}/ipfilter.conf <<EOF
map ${_extiface} ${_net} -> ${natip}/32 proxy port ftp ftp/tcp
map ${_extiface} ${_net} -> ${natip}/32 portmap tcp/udp 10000:20000
map ${_extiface} ${_net} -> ${natip}/32
EOF
				fi
			done
			answ="${ok}"
			ok="ok"
			${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"${answ}\"
			sync_nat_with_forms
			return 0
			;;
		"ipfw")
			local check_mod="net.inet.ip.fw.default_to_accept ipfw_nat_load libalias_load"
			local fix_mod=0
			for i in ${check_mod}; do
				/usr/bin/grep -q ^${i} /boot/loader.conf /boot/loader.conf.local 2>/dev/null || fix_mod=$(( fix_mod + 1 ))
			done

			if [ ${fix_mod} -ne 0 ]; then
				# we need pass inter=0 here for initenv-tui: need for allow accept when we first init ipfw from initenv-tui
				if getyesno "Do you want to modify /boot/loader.conf to set ipfw_load=YES, ipfw_nat_load=YES, libalias_load=YES and net.inet.ip.fw.default_to_accept=1 ?" || [ "${inter}" = "0" ]; then
					${SYSRC_CMD} -vf /boot/loader.conf net.inet.ip.fw.default_to_accept=1
					${SYSRC_CMD} -vf /boot/loader.conf ipfw_nat_load=YES
					${SYSRC_CMD} -vf /boot/loader.conf libalias_load=YES
				fi
			fi
			/usr/bin/truncate -s0 ${etcdir}/ipfw.conf
			_nm=$( echo ${rfc1918} | /usr/bin/tr " " "," )
			/bin/cat >> ${etcdir}/ipfw.conf << EOF
/sbin/ipfw -q add ${fwcount_end} nat 123 all from ${_nm} to not ${_nm} any via ${_extiface}
/sbin/ipfw -q nat 123 config ip ${natip}
/sbin/ipfw -q add ${fwcount_end} nat 123 ip from any to ${natip} via ${_extiface}
EOF

			answ="${ok}"
			ok="ok"
			${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"${answ}\"
			sync_nat_with_forms
			return 0
			;;
		0|disable)
			# Just disable NAT
			natoff
			${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"0\"
			sync_nat_with_forms
			return 0
			;;
	esac
	return 1
}


# if arg then force configure
configure_nat()
{
	update_netinfo

	if [ -n "${nat_enable}" ]; then
		_default="${nat_enable}"
	else
		_default="pf"
	fi

	answ=0
	ok=

	local nat_selected=0

	while [ "${nat_selected}" != "1" ]; do
		${ECHO} "${BOLD}Which NAT framework do you want to use: [${GREEN}${_default}${NORMAL}${BOLD}]${NORMAL}"
		${ECHO} "${MAGENTA}(type FW name, eg pf,ipfw,ipfilter, 'disable' or '0' to CBSD NAT, \"exit\" for break)${NORMAL}"

		# skip reading answer when inter=0
		if [ "${inter}" != "0" ]; then
			read ok leftover
		fi

		[ -z "${ok}" ] && ok="${_default}"

		case "${ok}" in
			exit)
				return 0
				;;
			0|disable)
				make_nat
				return 0
				;;
			pf|ipfw|ipfilter)
				nat_selected="1"
				;;
			*)
				${ECHO} "${MAGENTA}Wrong input: ${MAGENTA}${ok}${NORMAL}"
				;;
		esac
	done

	if [ "${CBSD_NODE_IP6_ACTIVE}" = "1" ]; then
		ext_iface="${CBSD_UPLINK_IFACE6}"
	else
		ext_iface="${CBSD_UPLINK_IFACE4}"
	fi

	local _default _tmpdef
	local _net _nm

	. ${tools}

	# Todo: IPv6
	[ "${natip}" = "default" ] && natip="${CBSD_IP6}"

	if [ "${inter}" = "0" ]; then
		[ -z "${natip}" ] && natip=$( cbsd -c "cbsdsql local UPDATE local SET natip=\"${natip}\"" 2>/dev/null )
		ok="${nat_enable}"
		make_nat
		return 0
	fi

	_default=$( cbsd -c "cbsdsql local SELECT natip FROM local" 2>/dev/null )

	iptype ${_default} >/dev/null 2>&1
	_ret=$?

	# if natip is not valid IPv4, assume it is NIC variable.
	# so try to find out first IPv4 for aliasing
	case ${_ret} in
		1|2)
			;;
		*)
			_extiface="${_default}"
			_tmpdef=$( getip-by-nics nic=${_extiface} 2>/dev/null )
			[ -z "${_tmpdef}" ] && _default=$( cbsd -c "cbsdsql local SELECT nodeip FROM local" )
			;;
	esac

	${ECHO} "${BOLD}Set IP address or NIC as the aliasing NAT address or interface, e.g: ${GREEN}${_default}${NORMAL}"
	read natip
	[ -z "${natip}" ] && natip="${_default}"

	if [ -z "${natip}" ]; then
		$ECHO "${MAGENTA}Error: empty natip value${NORMAL}"
		return 1
	fi

	${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET natip=\"${natip}\"

	make_nat
	_err=$?

	case ${_err} in
		0)
			return 0
			;;
		1)
			;;
		2) # Unable to determine first IP for NIC
			return 2
			;;
	esac


}

rsyncd_enable()
{
	[ ! -f "${inventory}" ] || . ${inventory}
	if [ $( /usr/bin/grep ^cbsdrsyncd_enable="YES" /etc/rc.conf ${workdir}/rc.conf | /usr/bin/wc -l ) = 0 ]; then
		if getyesno "Shall i modify the /etc/rc.conf to sets cbsdrsyncd_enable=\"YES\""; then
			${SYSRC_CMD} -vf /etc/rc.conf cbsdrsyncd_enable="YES"
		else
			${SYSRC_CMD} -qf ${workdir}/rc.conf cbsdrsyncd_enable="YES"
		fi
	fi

	if [ -n "$nodeip" ]; then
		if [ $( /usr/bin/grep ^cbsdrsyncd_flags= /etc/rc.conf ${workdir}/rc.conf| /usr/bin/wc -l ) = 0 ]; then
			if getyesno "Do you want to modify /etc/rc.conf to set the cbsdrsyncd_flags=\"--config=${etcdir}/rsyncd.conf\" ?"; then
				${SYSRC_CMD} -vf /etc/rc.conf cbsdrsyncd_flags="--config=${etcdir}/rsyncd.conf"
			else
				${SYSRC_CMD} -qf ${workdir}/rc.conf cbsdrsyncd_flags="--config=${etcdir}/rsyncd.conf"
			fi
		fi
	fi

	[ -f "/usr/local/etc/rc.d/cbsdrsyncd" ] && ${SYSRC_CMD} -vf /usr/local/etc/rc.d/cbsdrsyncd required_files="${etcdir}/rsyncd.conf"
	/usr/sbin/service cbsdrsyncd onestart
}

rsyncd_disable()
{
	/usr/sbin/service cbsdrsyncd stop > /dev/null 2>&1
	${SYSRC_CMD} -vf /etc/rc.conf cbsdrsyncd_enable="NO"
}

configure_rsync()
{
	[ ! -f "${etcdir}/rsyncd.conf" ] && installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/etc/defaults/rsyncd.conf ${etcdir}/rsyncd.conf

	if [ $( /usr/bin/grep ^cbsdrsyncd_enable= /etc/rc.conf ${workdir}/rc.conf | /usr/bin/wc -l ) = 0 ]; then
		if getyesno "Configure RSYNC services for jail migration?"; then
			rsyncd_enable
		else
			${SYSRC_CMD} -qf ${workdir}/rc.conf cbsdrsyncd_enable="YES"
		fi
	fi
}

cbsd_statsd_enable()
{
	[ ! -f "${inventory}" ] || . ${inventory}
	if [ $( /usr/bin/grep ^cbsd_statsd_enable="YES" /etc/rc.conf ${workdir}/rc.conf | /usr/bin/wc -l ) = 0 ]; then
		if getyesno "Shall i modify the /etc/rc.conf to sets cbsd_statsd_enable=\"YES\""; then
			${SYSRC_CMD} -vf /etc/rc.conf cbsd_statsd_enable="YES"
		else
			${SYSRC_CMD} -qf ${workdir}/rc.conf cbsd_statsd_enable="YES"
		fi
	fi

	${rcddir}/cbsd-statsd onestart
}

configure_racct()
{
	local racct_enabled

	racct_enabled=$( /sbin/sysctl -qn kern.racct.enable )

	[ $? -ne 0 ] && return 0

	if [ "${racct_enabled}" = "1" ]; then
		# disabled for 11.1.x releases
		# configure cbsd_statd
		#if [ $( /usr/bin/grep ^cbsd_statsd_enable= /etc/rc.conf ${workdir}/rc.conf | /usr/bin/wc -l ) = 0 ]; then
		#	if getyesno "Configure CBSD statsd services for collect RACCT statistics (EXPERIMENTAL)?"; then
		#		cbsd_statsd_enable
		#	else
		#		${SYSRC_CMD} -qf ${workdir}/rc.conf cbsd_statsd_enable="YES"
		#	fi
		#fi
		return 0
	fi

	if [ $( /usr/bin/grep ^kern.racct.enable /boot/loader.conf /boot/loader.conf.local ${workdir}/rc.conf 2>/dev/null | /usr/bin/wc -l ) = 0 ]; then
		if getyesno "Do you want to enable RACCT feature for resource accounting?"; then
			printf "\nkern.racct.enable=1\n" >> /boot/loader.conf
		else
			printf "\nkern.racct.enable=1\n" >> ${workdir}/rc.conf
		fi
	fi
}


update_hwinfo()
{
	for _uninit in ${HWINI}; do
		eval answ="\$${_uninit}"
		if [ -n "${answ}" ]; then
			${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET ${_uninit}=\"${answ}\"
		fi
	done
}

# form for $hostname
get_initenv_hostname()
{
	f_dialog_title " hostname "
	f_dialog_msgbox "Already set: ${hostname}"
}

# execute external natcfg-tui script
get_initenv_natcfg()
{
	#natcfg-tui
	# << swith to form, wip
	natcfg
}


# trigger for cbsdd_enable
get_initenv_rcconf()
{
	case "$( ${SYSRC_CMD} -n cbsdd_enable )" in
		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
			${SYSRC_CMD} -q cbsdd_enable=NO > /dev/null 2>&1
			;;
		*)
			${SYSRC_CMD} -q cbsdd_enable=YES > /dev/null 2>&1
	esac
}

# form for $nodename
get_initenv_nodename()
{
	local _input _retval

	f_dialog_title " nodename "

	f_dialog_input _input "${host_hostname_msg}" "${nodename}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && nodename="${_input}"
}

# form for $nodeip
get_initenv_nodeip()
{
	local _input _retval

	f_dialog_title " nodeip "

	f_dialog_input _input "${nodeip_desc}" "${nodeip}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && nodeip="${_input}"
}


# form for $nodeip
get_initenv_nodedescr()
{
	echo
}


# form for $jnameserver
get_initenv_jnameserver()
{
	local _input _retval

	f_dialog_title " jnameserver "

	f_dialog_input _input "${jnameserver_desc}" "${jnameserver}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && jnameserver="${_input}"
}

# form for $nodeippool
get_initenv_nodeippool()
{
	local _input _retval

	f_dialog_title " nodeippool "
	f_dialog_input _input "${nodeippool_desc}" "${nodeippool}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && nodeippool="${_input}"
}

# form for $nat_enable
get_initenv_nat_enable()
{
	local _input _retval

	local title=" NAT framework "
	local prompt="${nat_enable_desc}"
	hline=

	[ "${nat_enable}" = "0" ] && nat_enable="disable"

	local menu_list="${menu_list} 'pf'		'pf'	'Use PF-based NAT'"

	menu_list="${menu_list} 'ipfw'		'ipfw'	'Use IPFW-based NAT'"
	menu_list="${menu_list} 'ipfilter'	'ipfilter'	'Use ipnat from Ipfilter'"
	menu_list="${menu_list} 'disable'	'Disable NAT'	'Disable NAT'"

	local defaultitem="${nat_enable}"

	cbsd_menubox
	retval=$?

	case $retval in
		0)
			nat_enable="${mtag}"
			[ "${nat_enable}" = "disable" ] && nat_enable="0"
			;;
		*)
			;;
	esac

	return ${retval}
}

# form for $natip
get_initenv_natip()
{
	local _input _retval

	local ipv4_list=
	local nic_list=

	local title=" NAT framework "
	local prompt="${nat_enable_desc}"
	hline=

	ipv4_list=$( /sbin/ifconfig | /usr/bin/awk '/inet [0-9]+/{print $2}' | /usr/bin/xargs )
	nic_list=$( nics-list phyonly=1 | /usr/bin/xargs )

	local menu_list=

	for i in ${nic_list}; do
		menu_list="${menu_list} '${i}'		'${i}'	'NAT on NIC'"
	done

	menu_list="${menu_list} '-'		'-'	''"

	for i in ${ipv4_list}; do
		case "${i}" in
			127.*)
				continue
				;;
			*)
				menu_list="${menu_list} '${i}'		'${i}'	'NAT on IPv4'"
				;;
		esac
	done

	local defaultitem="${natip}"

	cbsd_menubox
	retval=$?

	case $retval in
		0)
			natip="${mtag}"
			;;
		*)
			;;
	esac

	return ${retval}
}

# form for $statsd_enable
get_initenv_statsd_enable()
{
	local _retval

	 msg_yes="no"
	 msg_no="yes"

	f_dialog_noyes "${statsd_enable_desc}"
	_retval=$?

	case ${_retval} in
	0|1)
		statsd_enable=${_retval}
		;;
	esac
}

# form for $fbsdrepo
get_initenv_fbsdrepo()
{
	local _retval

	 msg_yes="no"
	 msg_no="yes"
	 f_dialog_noyes "${fbsdrepo_desc}"
	_retval=$?

	case ${_retval} in
	0|1)
		fbsdrepo=${_retval}
		;;
	esac
}

# form for $repo
get_initenv_repo()
{
	local _input _retval

	f_dialog_title " repo "

	f_dialog_input _input "${repo_desc}" "${repo}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && repo="${_input}"
}

# form for $ipfw_enable
get_initenv_ipfw_enable()
{
	local _retval

	msg_yes="no"
	msg_no="yes"
	f_dialog_noyes "${ipfw_enable_desc}"
	_retval=$?

	case ${_retval} in
	0|1)
		ipfw_enable=${_retval}
		;;
	esac
}

# form for $zfsfeat
get_initenv_zfsfeat()
{
	local _retval

	msg_yes="no"
	msg_no="yes"
	f_dialog_noyes "${zfsfeat_desc}"
	_retval=$?

	case ${_retval} in
		0|1)
			zfsfeat=${_retval}
			;;
	esac
}


# form for $hammerfeat
get_initenv_hammerfeat()
{
	local _retval

	msg_yes="no"
	msg_no="yes"
	f_dialog_noyes "${hammerfeat_desc}"
	_retval=$?

	case ${_retval} in
		0|1)
			hammerfeat=${_retval}
			;;
	esac
}


# form for $jail_interface
get_initenv_jail_interface()
{
	local _input _retval

	f_dialog_title " jail_interface "

	f_dialog_input _input "${jail_interface_desc}" "${jail_interface}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && jail_interface="${_input}"
}

# form for $parallel
get_initenv_parallel()
{
	local _input _retval

	f_dialog_title " parallel "
	f_dialog_input _input "${parallel_desc}" "${parallel}" \
		"${_message}" || return $?
	[ -n "${_input}" ] && parallel="${_input}"

}


# form for $stable
get_initenv_stable()
{
	local _retval

	 msg_yes="no"
	 msg_no="yes"
	 f_dialog_yesno "${stable_desc}"
	_retval=$?

	case ${_retval} in
		0|1)
			stable=${_retval}
		;;
	esac
}

# form for $sqlreplica
get_initenv_sqlreplica()
{
	local _retval

	 msg_yes="no"
	 msg_no="yes"
	 f_dialog_yesno "${sqlreplica_desc}"
	_retval=$?

	case ${_retval} in
		0|1)
			sqlreplica=${_retval}
		;;
	esac
}

# nodename must be set
# -a <path> - path to new public authorized_keys
# -p <path> - path to new private id_rsa file
# -r - renew pair by new
install_sshkey()
{
	local _md5name _keyfile _pubfile _prune_keyfile _renew=0
	local _install_key
	local _install_pub
	local _update=0
	local _renew=0

	while getopts "a:p:r" opt; do
		case "$opt" in
			a)
				_install_pub="${OPTARG}"
				[ ! -r "${_install_pub}" ] && err 1 "${MAGENTA}No read access for: ${GREEN}${_install_pub}${NORMAL}"
				;;
			p)
				_install_key="${OPTARG}"
				[ ! -r "${_install_key}" ] && err 1 "${MAGENTA}No read access for: ${GREEN}${_install_key}${NORMAL}"
				;;
			r)
				_renew=1
				;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${nodename}" ] && err 1 "${MAGENTA}Install sshkey: empty nodename${NORMAL}"

	_md5name=$( /sbin/md5 -qs ${nodename} )
	_keyfile="${sshdir}/${_md5name}.id_rsa"
	_pubfile="${sshdir}/authorized_keys"

	# store old key for remove
	if [ -h ${sshdir}/id_rsa -a ${_renew} -eq 1 ]; then
		_prune_keyfile=$( /usr/bin/readlink ${sshdir}/id_rsa )
		[ ! -r ${_prune_keyfile} ] && unset _prune_keyfile
	fi

	if [ ${_renew} -eq 1 ]; then
		# first remove old keys
		if [ -n "${_prune_keyfile}" ]; then
			/bin/rm -f ${_prune_keyfile}
			unset _prune_keyfile
		fi
		[ -f "${_pubkey}" ] && /bin/rm -f ${_pubkey}
	fi

	if [ -z "${_install_key}" -a -z "${_install_pub}" -o ${_renew} -eq 1 ]; then
		if [ ! -f ${_keyfile} ]; then
			/usr/bin/ssh-keygen -t rsa -f ${_keyfile} -N ''
			/bin/mv ${_keyfile}.pub ${_pubfile}
		fi
	else
		[ -n "${_install_key}" ] && /bin/cp -a ${_install_key} ${_keyfile} && ${ECHO} "${MAGENTA}Private key updated${NORMAL}"
		[ -n "${_install_pub}" ] && /bin/cp -a ${_install_pub} ${_pubfile} && ${ECHO} "${MAGENTA}Public key updated${NORMAL}"
	fi

	/bin/chmod 0444 ${_pubfile}
	/bin/chmod 0400 ${_keyfile}
	/usr/sbin/chown ${cbsduser}:${cbsduser} ${_keyfile} ${_pubfile}
	/bin/ln -sf ${_keyfile} ${sshdir}/id_rsa
}

# run install_sshkey for change ssh key
# update nodename in respective places
# $nodename and $old_nodename must be filled
change_nodename()
{
	[ -z "${nodename}" -o -z "${old_nodename}" ] && return 0
	${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nodename=\"${nodename}\"
	# lets save old nodename db as backup
	if [ -f "${dbdir}/inv.${old_nodename}.sqlite" ]; then
		/bin/cp ${dbdir}/inv.${old_nodename}.sqlite ${dbdir}/inv.${nodename}.sqlite
	fi
	install_sshkey -r
	echo "${nodename}" > "${nodenamefile}"
	env sqlcolnames="1" ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT * FROM local" > ${inventory}
}

# export CBSD_UPLINK_IFACE[4|6] variable
# export CBSD_IP[4|6] variable
collect_netinfo()
{
	local CBSD_NODE_IP4_ACTIVE=0
	local CBSD_NODE_IP6_ACTIVE=0
	local uplink_iface4=$( /sbin/route -n -4 get 0.0.0.0 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )
	local uplink_iface6=$( /sbin/route -n -6 get ::0 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )

	if [ -n "${uplink_iface4}" ]; then
		CBSD_UPLINK_IFACE4="${uplink_iface4}"
		local INITIP4=$( /sbin/ifconfig ${uplink_iface4} | /usr/bin/awk '/inet [0-9]+/{print $2}'|/usr/bin/head -n1 )
	else
		CBSD_UPLINK_IFACE4="lo0"
		local INITIP4="127.0.0.1"
	fi

	if [ -n "${uplink_iface6}" ]; then
		CBSD_UPLINK_IFACE6="${uplink_iface6}"
		local INITIP6=$( /sbin/ifconfig ${uplink_iface6} | /usr/bin/awk '/inet6 *:*+/{print $2}'|/usr/bin/head -n1 |/usr/bin/grep -v %${uplink_iface6}$ )
	else
		CBSD_UPLINK_IFACE6="lo0"
		local INITIP6="::1"
	fi

	[ -z "${INITIP4}" ] && INITIP4="127.0.0.1"
	[ -z "${INITIP6}" ] && INITIP6="::1"

	CBSD_IP4="${INITIP4}"
	CBSD_IP6="${INITIP6}"

	if [ "${CBSD_IP6}" = "::1" ]; then
		CBSD_NODE_IP6_ACTIVE=0
	else
		CBSD_NODE_IP6_ACTIVE=1
	fi

	if [ "${CBSD_IP4}" = "127.0.0.1" ]; then
		CBSD_NODE_IP4_ACTIVE=0
	else
		CBSD_NODE_IP4_ACTIVE=1
	fi

	node_ip4_active=${CBSD_NODE_IP4_ACTIVE}
	node_ip6_active=${CBSD_NODE_IP6_ACTIVE}
}

# export CBSD_UPLINK_IFACE[4|6] variable
# export CBSD_IP[4|6] variable
# export and store (in inventory) node_ip[4|6] variable
update_netinfo()
{
	collect_netinfo

	${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET node_ip4_active=\"${node_ip4_active}\"
	${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET node_ip6_active=\"${node_ip6_active}\"
}


## MAIN
#user settings
USERINI="\
nodename \
hostname \
nodeip \
nodedescr \
jnameserver \
nodeippool \
nat_enable \
natip \
fbsdrepo \
mdtmp \
repo \
workdir \
ipfw_enable \
zfsfeat \
hammerfeat \
jail_interface \
parallel \
stable \
sqlreplica \
statsd_enable"

#system settins
HWINI="fs ncpu physmem freemem memtype disks cpumodel cpufreq kernhz sched eventtimer nics osrelease hostarch vimage_feature racct platform node_ip4_active node_ip6_active la is_virtual"

###
fi
