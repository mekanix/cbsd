#v10.0.4
# this is a temporary wrapper for version 9.2.2 is intended to make the transition to sqlite3 version if rc.conf more painless
# required:
# strings.subr
#

if [ ! "$_CBSD_RCCONF_SUBR" ]; then
_CBSD_RCCONF_SUBR=1
###

# load data from local bhyve settings
# $1 - jname
init_bhyve_rcconf()
{
	local jname="${1}"
	[ -z "${jname}" ] && return 0
	local sqldelimer="|"
	local A
	A=$( cbsdsql ${jailsysdir}/${jname}/local.sqlite "SELECT astart,vm_cpus,vm_ram,vm_os_type,vm_boot,vm_os_profile,vm_vnc_port,virtio_type,bhyve_vnc_tcp_bind,bhyve_vnc_resolution,cd_vnc_wait,protected,hidden,maintenance,ip4_addr,vnc_password,vm_hostbridge,vm_iso_path,vm_console,vm_efi,bhyve_generate_acpi,bhyve_wire_memory,bhyve_rts_keeps_utc,bhyve_force_msi_irq,bhyve_x2apic_mode,bhyve_mptable_gen,bhyve_ignore_msr_acc,bhyve_vnc_vgaconf,vm_cpu_topology,debug_engine FROM settings ORDER BY (created) DESC LIMIT 1;" )

	if [ -n "${A}" ]; then
		OIFS="${IFS}"
		IFS="|"
		astart=
		vm_cpus=
		vm_ram=
		vm_os_type=
		vm_boot=
		vm_os_profile=
		vm_vnc_port=
		virtio_type=
		bhyve_vnc_tcp_bind=
		bhyve_vnc_resolution=
		cd_vnc_wait=
		protected=
		hidden=
		maintenance=
		ip4_addr=
		vnc_password=
		vm_hostbridge=
		vm_iso_path=
		vm_console=
		vm_efi=
		bhyve_generate_acpi=
		bhyve_wire_memory=
		bhyve_rts_keeps_utc=
		bhyve_force_msi_irq=
		bhyve_x2apic_mode=
		bhyve_mptable_gen=
		bhyve_ignore_msr_acc=
		bhyve_vnc_vgaconf=
		vm_cpu_topology=
		debug_engine=
		sqllist "${A}" astart vm_cpus vm_ram vm_os_type vm_boot vm_os_profile vm_vnc_port virtio_type bhyve_vnc_tcp_bind bhyve_vnc_resolution cd_vnc_wait protected hidden maintenance ip4_addr vnc_password vm_hostbridge vm_iso_path vm_console vm_efi bhyve_generate_acpi bhyve_wire_memory bhyve_rts_keeps_utc bhyve_force_msi_irq bhyve_x2apic_mode bhyve_mptable_gen bhyve_ignore_msr_acc bhyve_vnc_vgaconf vm_cpu_topology debug_engine
		IFS="${OIFS}"
	else
		err 1 "${MAGENTA}Unable to fetch vm data from: ${GREEN}${jailsysdir}/${jname}/local.sqlite${NORMAL}"
	fi
}

# load data from local XEN settings
# $jname
init_xen_rcconf()
{
	local jname="${1}"
	[ -z "${jname}" ] && return 0
	local sqldelimer="|"
	local A

	A=$( cbsdsql ${jailsysdir}/${jname}/local.sqlite "SELECT vm_cpus,vm_ram,vm_os_type,vm_boot,vm_os_profile,vm_vnc_port,xen_vnc_tcp_bind,xen_vnc_resolution,cd_vnc_wait,protected,hidden,maintenance,ip4_addr,vnc_password FROM settings ORDER BY (created) DESC LIMIT 1;" )

	if [ -n "${A}" ]; then
		OIFS="${IFS}"
		IFS="|"
		vm_cpus=
		vm_ram=
		vm_os_type=
		vm_boot=
		vm_os_profile=
		vm_vnc_port=
		xen_vnc_tcp_bind=
		xen_vnc_resolution=
		cd_vnc_wait=
		protected=
		hidden=
		maintenance=
		ip4_addr=
		vnc_password=
		sqllist "${A}" vm_cpus vm_ram vm_os_type vm_boot vm_os_profile vm_vnc_port xen_vnc_tcp_bind xen_vnc_resolution cd_vnc_wait protected hidden maintenance ip4_addr vnc_password
		IFS="${OIFS}"
	else
		err 1 "${MAGENTA}Unable to fetch vm data from: ${GREEN}${jailsysdir}/${jname}/local.sqlite${NORMAL}"
	fi
}

# init_rcconf ( $jname must be not empty )
# ( $sqlfile - specify sqlfile in dbdir for searching data. If empty - local file is prefered )
init_rcconf()
{
	local _JCOL _BCOL _A _ALLJCOL _ALLBCOL jname _sqlfile _datafile="local" i

	[ -n "${2}" ] && _datafile="${2}"
	_sqlfile="${dbdir}/${_datafile}.sqlite"

	[ ! -f "${_sqlfile}" ] && return 0

	. ${sharedir}/local-jails.schema
	_JCOL="${MYCOL}"

	#clean sqlite3 schema variables
	for i in ${_JCOL}; do
		unset ${i}
	done

	_ALLJCOL=$( echo ${_JCOL} | /usr/bin/tr " " "," )

	# empty string on remote node if cbsd version is mistmatch ( diff. jail schema )
	_A=$( 2>/dev/null env sqldelimer="|" ${miscdir}/sqlcli ${_sqlfile} "SELECT ${_ALLJCOL} FROM jails WHERE jname='$1'" )

	[ -z "${_A}" ] && return 1

	. ${strings}

	sqllist "${_A}" ${_JCOL}

	case "${emulator}" in
		qemu-arm-static|qemu-mips64-static)
			local source_emulator="${emulator}"
			;;
		qemu-aarch64-static)
			local source_emulator="${emulator}"
			arch="arm64"
			target_arch="aarch64"
			;;
	esac

	#skip for not my emulator
	if [ -n "${source_emulator}" ]; then
		[ "${source_emulator}" != "${emulator}" ] && continue
	fi

	. ${strings}
	sqllist "${_A}" ${_JCOL}

	case "${emulator}" in
		bhyve|virtualbox|xen)
			. ${sharedir}/${emulator}.conf
			_BCOL="${MYCOL}"
			jid=0
			_ALLBCOL=$( echo ${_BCOL} | /usr/bin/tr " " "," )
			_A=$( 2>/dev/null env sqldelimer="|" ${miscdir}/sqlcli ${_sqlfile} "SELECT ${_ALLBCOL} FROM ${emulator} WHERE jname=\"$1\"" )
			sqllist "${_A}" ${_BCOL}
			;;
	esac

	init_jail_path

	# sanity check that jid and status are similar to the real state, for localhost  only
	if [ "${_datafile}" = "local" ]; then
		get_jid
		case "${emulator}" in
			"bhyve")
				if [ -e "/dev/vmm/${jname}" ]; then
					[ ${status} -ne 3 ] && status="1"	# if not in maintenance, update status to online
					myjid=$( cbsdsql local SELECT jid FROM jails WHERE jname=\"${jname}\" 2>/dev/null )

					# temp work-around for CBSD 11.1.0 wherei PID was introduced and where old machine
					# still run with 0 jid: change jid to non zero to proper status
					[ -z "${myjid}" -o "${myjid}" = "0" ] && myjid=1

					jid="${myjid}"
				fi
				;;
			"virtualbox")
				. ${workdir}/virtualbox.subr
				_state=$( ${VBOX_MGMT_CMD} showvminfo ${jname}| /usr/bin/awk '/^State: /{print $2}' )
				if [ "${_state}" = "running" ]; then
					[ ${status} -ne 3 ] && status="1"	# if not in maintenance, update status to online
					myjid="1"
					jid="1"
				else
					[ ${status} -ne 3 ] && status="0"	# if not in maintenance, update status to offline
					myjid="0"
					jid="0"
				fi
				;;
			"xen")
				. ${workdir}/xen.subr
				_state=$( ${XL_CMD} list ${jname} > /dev/null 2>&1 )
				if [ $? -eq 0 ]; then
					check_for_xen_process -j ${jname}
					status="1"	# if not in maintenance, update status to online
					myjid="${vm_pid}"
					jid="${myjid}"
				else
					status="0"	# if not in maintenance, update status to offline
					myjid="0"
					jid="0"
				fi
				;;

		esac

		# check jid when sqlite information is wrong and update it
		[ ${myjid} -ne ${jid} ] && jid=${myjid} && ${miscdir}/sqlcli ${dbdir}/local.sqlite "UPDATE jails SET jid=\"${myjid}\" WHERE jname=\"${1}\""

		# fix for status only for 0,1, not for slave or maintenace
		if [ ${status} -eq 0 -o ${status} -eq 1 ]; then
			if [ ${myjid} -ne 0 -a ${status} -eq 0 ]; then
				status=1
				${miscdir}/sqlcli ${dbdir}/local.sqlite "UPDATE jails SET status=\"1\" WHERE jname=\"${1}\""
			fi
			if [ ${myjid} -eq 0 -a ${status} -ne 0 -a ${status} -ne 2 ]; then
				status=0
				${miscdir}/sqlcli ${dbdir}/local.sqlite "UPDATE jails SET status=\"0\" WHERE jname=\"${1}\""
			fi
		fi
	else
		# remote resource
		jid=$( cbsdsql ${_datafile} SELECT jid FROM jails WHERE jname=\"${jname}\" 2>/dev/null )
		case ${jid} in
			0)
				status=0
				;;
			*)
				status=1
				;;
		esac
	fi

	# clean some variables if equal 0
	[ "${basename}" = "0" ] && unset basename
	[ "${slavenode}" = "0" ] && unset slavenode
	[ "${masterhost}" = "0" ] && unset masterhost
	[ "${exec_stop}" = "0" ] && unset ${exec_stop}
	[ "${exec_poststart}" = "0" ] && unset ${exec_poststart}
	[ "${exec_poststop}" = "0" ] && unset ${exec_poststop}
	[ "${exec_prestart}" = "0" ] && unset ${exec_prestart}
	[ "${exec_prestop}" = "0" ] && unset ${exec_prestop}

	case "${emulator}" in
		bhyve|xen)
			init_${emulator}_rcconf ${1}
	esac
}

###
fi

init_rcconf ${jname} ${sqlfile}
