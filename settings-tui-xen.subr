# XEN-related TUI function
if [ ! "$_CBSD_SETTINGS_TUI_XEN_SUBR" ]; then
_CBSD_SETTINGS_TUI_XEN_SUBR=1
###

# xen form for xen vnc options
get_construct_xen_vnc_options_menu()
{
	local _input _res item_let=A

	local title="VNC Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="vnc_enabled"

	f_dialog_default_fetch defaultitem

	readconf vnc.conf
	if [ -z "${vnc_enabled}" ]; then
		vnc_enabled="${vnc_default}"
	fi

	[ -z "${xen_vnc_resolution}" ] && xen_vnc_resolution="${default_vnc_width}x${default_vnc_height}"
	[ -z "${xen_vnc_tcp_bind}" ] && xen_vnc_tcp_bind="${default_vnc_tcp_bind}"
	[ -z "${xen_vnc_vgaconf}" ] && xen_vnc_vgaconf="${default_vnc_vgaconf}"

	if [ "${vnc_password}" = "0" ]; then
		unset vnc_password
	else
		[ -z "${vnc_password}" ] && vnc_password="${default_vnc_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	menu_list="${menu_list} '${item_let} vnc_enabled'		'[${vnc_enabled_mark}]'		'Enable VNC protocol instead of SPICE'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} xen_vnc_tcp_bind'		'[${xen_vnc_tcp_bind}]'		'Default: ${default_vnc_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} vnc_password'		'[${vnc_password}]'		'Default: see vnc.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

# xen form for xen spice options
get_construct_xen_spice_options_menu()
{
	local _input _res item_let=A

	local title="SPICE Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="spice_enabled"

	f_dialog_default_fetch defaultitem

	readconf spice.conf

	[ -z "${spice_default}" ] && spice_default="${default_spice_default}"

	if [ -z "${spice_enabled}" ]; then
		spice_enabled="${spice_default}"
	fi

	[ -z "${xen_spice_resolution}" ] && xen_spice_resolution="${default_spice_width}x${default_spice_height}"
	[ -z "${xen_spice_tcp_bind}" ] && xen_spice_tcp_bind="${default_spice_tcp_bind}"

	if [ "${spice_password}" = "0" ]; then
		unset spice_password
	else
		[ -z "${spice_password}" ] && spice_password="${default_spice_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	menu_list="${menu_list} '${item_let} spice_enabled'		'[${spice_enabled_mark}]'		'Enable SPICE protocol instead of VNC'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} xen_spice_tcp_bind'	'[${xen_spice_tcp_bind}]'	'Default: ${default_spice_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} spice_password'		'[${spice_password}]'		'Default: see spice.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "${menu_choice}"
	f_dialog_default_store "${menu_choice}"

	return ${retval}
}



# xen form for xen vnc options
get_construct_xen_vnc_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_vnc_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_vnc_tcp_bind)
				title=" vnc bind "
				prompt="default via vnc.conf: ${default_vnc_tcp_bind}\nUse 0.0.0.0 for all IPs"
				defaultitem="${xen_vnc_tcp_bind}"
				cbsd_inputbox_simple && xen_vnc_tcp_bind="${mtag}"
				;;
			xen_vnc_resolution)
				get_construct_xen_vnc_resulution_menu
				;;
			xen_vnc_vgaconf)
				get_construct_xen_vnc_vgaconf_menu
				;;
			vnc_password)
				get_construct_vnc_password
				;;
			vnc_enabled)
				# set/invert spice_enabled by old vnc_enabled values
				# since these are mutually exclusive options
				spice_enabled="${vnc_enabled}"
				invert_checkbox ${mychoice}
				if [ "${vnc_enabled}" = "1" ]; then
					spice_default="0"
				else
					spice_default="1"
				fi
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

# xen form for xen spice options
get_construct_xen_spice_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_spice_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_spice_tcp_bind)
				title=" SPICE bind "
				prompt="default via spice.conf: ${default_spice_tcp_bind}\nUse 0.0.0.0 for all IPs"
				defaultitem="${xen_spice_tcp_bind}"
				cbsd_inputbox_simple && xen_spice_tcp_bind="${mtag}"
				;;
			xen_spice_resolution)
				get_construct_xen_spice_resulution_menu
				;;
			spice_password)
				get_construct_spice_password
				;;
			spice_enabled)
				# set/invert vnc_enabled by old spice_enabled values
				# since these are mutually exclusive options
				vnc_enabled="${spice_enabled}"
				invert_checkbox ${mychoice}
				spice_default="${spice_enabled}"
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}


make_bhyve_part()

# virtual part for xen jconf
make_xen_part()
{
/bin/cat >> ${TMPFILE} << EOF
exec_start="${exec_start}"
exec_stop="${exec_stop}"
emulator="xen";
imgsize="${imgsize}";
vm_cpus="${vm_cpus}";
vm_ram="${vm_ram}";
vm_os_type="${vm_os_type}";
vm_efi="${vm_efi}";

iso_site="${iso_site}";
iso_img="${iso_img}";
register_iso_name="${register_iso_name}"
register_iso_as="${register_iso_as}"

virtio_type="${virtio_type}";
gw4="${gw4}";
vm_os_profile="${vm_os_profile}";
jprofile="${jprofile}";
swapsize="${swapsize}";
vm_iso_path="${register_iso_as}";
vm_guestfs="${vm_guestfs}";
vm_vnc_port="${vm_vnc_port}";

cd_vnc_wait="${cd_vnc_wait}";
xen_vnc_resolution="${xen_vnc_resolution}";
xen_vnc_tcp_bind="${xen_vnc_tcp_bind}";
vnc_password='${vnc_password}';

with_img_helpers="";
runasap="${runasap}";
nic_driver="${nic_driver}";

spice_default="${spice_default}";
xen_spice_resolution="${xen_spice_resolution}";
xen_spice_tcp_bind="${xen_spice_tcp_bind}";
spice_password='${spice_password}';

on_poweroff="${on_poweroff}";
on_reboot="${on_reboot}";
on_crash="${on_crash}";

xen_soundhw="${xen_soundhw}";
EOF
}

# xen form select for xen_soundhw
# /usr/local/lib/xen/bin/qemu-system-i386 -soundhw help
get_construct_xen_soundhw()
{
	local _input _res

	local title="${GET_IMGTYPE_MSG}"
	local defaultitem="${xen_soundhw}"

	local menu_list="
		'none'		'No sound'			'Disable sound'
		'sb16'		'Creative Sound Blaster 16'	'Creative Sound Blaster 16'
		'es1370'	'ENSONIQ AudioPCI ES1370'	'ENSONIQ AudioPCI ES1370'
		'ac97'		'Intel 82801AA AC97 Audio'	'Intel 82801AA AC97 Audio'
		'adlib'		'Yamaha YM3812 (OPL2)'		'Yamaha YM3812 (OPL2)'
		'gus'		'Gravis Ultrasound GF1'		'Gravis Ultrasound GF1'
		'cs4231a'	'CS4231A'			'CS4231A'
		'hda'		'Intel HD Audio'		'Intel HD Audio'
		'pcspk'		'PC speaker'			'PC speaker'
	" # END-QUOTE

	cbsd_menubox
	retval=$?

	case ${retval} in
		${DIALOG_OK})
			[ -n "${mtag}" ] && xen_soundhw="${mtag}"
			;;
		*)
			;;
	esac

	return ${retval}
}

# xen form for submenu for xen audio options
get_construct_xen_audio_options_menu()
{
	local _input _res item_let=A

	local title="Audio Options"
	local defaultitem=
	local menu_choice=

	f_dialog_default_fetch defaultitem

	local menu_list=""

	menu_list="${menu_list}	'${item_let} xen_soundhw'	'[${xen_soundhw}]'	'Default: ${default_xen_soundhw}'"
	menu_list="${menu_list}	'Save'				'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "${menu_choice}"
	f_dialog_default_store "${menu_choice}"

	return ${retval}
}

# xen form for submenu for xen audio options
get_construct_xen_audio_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_audio_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_soundhw)
				get_construct_xen_soundhw
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

###
fi
