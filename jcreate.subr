if [ ! "$_CBSD_JCREATE_SUBR" ]; then
_CBSD_JCREATE_SUBR=1
###

# export JARG
. ${distsharedir}/jail-arg

# postaction for bsdconf-related module action
# pkg, useradd, password etc
# $1 - set $jname
# $2 - jconf (for fromfile)
postcreate_module_action()
{
	local jname jconf

	[ -n "${1}" ] && jname="${1}"
	[ -n "${2}" ] && jconf="${2}"

	[ -n "${orig_pkg_bootstrap}" ] && pkg_bootstrap="${orig_pkg_bootstrap}"

	if [ -n "${user_pw_root_crypt}" ]; then
		passwd jname=${jname} login="root" epw="${user_pw_root_crypt}"
	elif [ -n "${user_pw_root}" ]; then
		passwd jname=${jname} login="root" pw="${user_pw_root}"
	fi

	if [ -n "${sysrc_enable}" ]; then
		for i in ${sysrc_enable}; do
			# use CBSD sysrc from bsdconf.d
			sysrc jname=${jname} ${i}_enable="YES"
		done
	fi

	if [ -n "${user_add}" ]; then
		if [ -n "${jconf}" ]; then
			${ECHO} "${N1_COLOR}Adding users: ${N2_COLOR}${user_add}${N0_COLOR}"
			# use CBSD adduser from bsdconf.d
			adduser jname=${jname} mode=add fromfile="${jconf}"
		fi
	fi

	[ -n "${odelpkglist}" ] && delpkglist="${odelpkglist}"
	[ -n "${delpkglist}" ] && delpkglist=1

	#[ ${applytpl} -eq 1 ] && ${miscdir}/config_pkgrepo -t ${etcdir}/pkg.conf -v ${ver} -a ${arch} ${data}
	# pkg area
	if [ "${pkg_bootstrap}" = "1" ]; then
		[ "${ver}" != "empty" ] && pkg mode=bootstrap jname=${jname} ||true
		if [ -n "${pkglist}" -a "${pkglist}" != "NO" -a "${ver}" != "empty" ]; then
			if [ ! -f "${pkglist}" ]; then
				# use CBSD pkg from pkg.d
				pkg mode=install jname=${jname} ${pkglist}
			else
				# use CBSD pkg from pkg.d
				pkg mode=install pkglist="${pkglist}" jname=${jname}
				[ ${delpkglist} -eq 1 ] && /bin/rm -f ${pkglist}
			fi
		fi
	fi
}


# users custom stop script
# -s - is source dir (stop.d start.d)
# -a auto-start if status off (create.d)
external_exec_script()
{
	local _res
	local _dir
	local _astart=0
	local _shutdown=0
	local _fexist=

	while getopts "as:" opt; do
		case "${opt}" in
			a) _astart="1" ;;
			s) _dir="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_dir}" ] && return 1

	[ ! -d "${jailsysdir}/${jname}/${_dir}" ] && return 0
	_fexist=$( /usr/bin/find ${jailsysdir}/${jname}/${_dir}/ -depth 1 -maxdepth 1 -type f -and -not -name placeholder -exec /usr/bin/basename {} \; )
	[ -z "${_fexist}"  ] && return 0
	[ -d "${data}/tmp/${_dir}" ] && /bin/rm -rf "${data}/tmp/${_dir}"
	/bin/cp -a "${jailsysdir}/${jname}/${_dir}" ${data}/tmp/${_dir}

	. ${jrcconf}

	if [ ${jid} -eq 0 -a ${_astart} -eq 1 ]; then
		# Jail should be running
		${ECHO} "${N1_COLOR}Jail has custom exec script [${_fexist}], run it for a while...${N0_COLOR}"
		_shutdown=1
		jstart ${jname}
	fi

	/usr/bin/find "${data}/tmp/${_dir}" \( -type l -or -type f \) -and \( -perm +111 \) -depth 1 -maxdepth 1 -exec /usr/bin/basename {} \; | while read _file; do
		${ECHO} "${N1_COLOR}Execute script: ${N2_COLOR}${_file}${N0_COLOR}"
		jexec jname="${jname}" /tmp/${_dir}/${_file}
	done

	if [ ${_shutdown} -eq 1 ]; then
		# Jail was offline, stop
		jstop ${jname}
	fi

	/bin/rm -rf "${data}/tmp/${_dir}"
}

# users custom stop for executing in master host
# $1 - is source dir name ( master_poststop.d master_prestop.d )
external_exec_master_script()
{
	local _res
	local _dir="${1}"

	[ -z "${_dir}" ] && return 1

	local _srcdir="${jailsysdir}/${jname}/${_dir}"

	[ ! -d "${_srcdir}" ] && return 0
	[ -z "$( /bin/ls ${_srcdir}/ )" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	/usr/bin/find "${_srcdir}" \( -type l -or -type f \) -and \( -perm +111 \) -depth 1 -maxdepth 1 -exec /usr/bin/basename {} \; | while read _file; do
		${ECHO} "${N1_COLOR}Execute master script: ${N2_COLOR}${_file}${N0_COLOR}"
		${ECHO} "${N1_COLOR} :: ${_srcdir}/${_file}${N0_COLOR}"
		${_srcdir}/${_file}
	done

	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_master_prestop()
{
	eval CMD=\${exec_master_prestop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec prestop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_prestop()
{
	eval CMD=\${exec_prestop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} exec exec_prestop: ${N2_COLOR}${CMD}${N0_COLOR}"
	/usr/sbin/chroot ${path} ${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}


exec_master_poststop()
{
	eval CMD=\${exec_master_poststop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec afterstop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_poststop()
{
	eval CMD=\${exec_poststop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} exec exec_poststop: ${N2_COLOR}${CMD}${N0_COLOR}"
	/usr/sbin/chroot ${path} ${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
	i=$((i + 1))
}

exec_master_poststart()
{
	eval CMD=\${exec_master_poststart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec afterstart: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_poststart()
{
	eval CMD=\${exec_poststart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	${ECHO} "${N1_COLOR}${jname} exec exec_poststart: ${N2_COLOR}${CMD}${N0_COLOR}"
	jexec jname=${jname} ${CMD}
}

exec_cbsdjail_first_boot()
{
	if [ -f ${path}/etc/rc.cbsdjail_first_boot ]; then
		jexec jname=${jname} /bin/sh /etc/rc.cbsdjail_first_boot
		/bin/rm -f ${path}/etc/rc.cbsdjail_first_boot
	fi
}

exec_master_prestart()
{
	eval CMD=\${exec_master_prestart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

	${ECHO} "${N1_COLOR}${jname} master exec prestart: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_prestart()
{
	eval CMD=\${exec_prestart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	${ECHO} "${N1_COLOR}${jname} exec exec_prestart: ${N2_COLOR}${CMD}${N0_COLOR}"
	jexec jname=${jname} ${CMD}
}

export_bhyve_data_for_external_hook()
{
	. ${distdir}/vnet.subr # get_vm_uplink_interface

	# export variables for external hooks
	export jname=${jname}
	[ -n "${ip4_addr}" ] && geniplist "${ip4_addr}"

	for _i in ${JARG} ${MYCOL} ipv4_first_public ipv4_first_private ipv4_first ipv6_first_public ipv6_first_private ipv6_first bhyve_vnc_tcp_ipconnect; do
		T=
		eval T="\$$_i"
		export ${_i}="${T}"
	done

	# Export additional data to hooks
	if [ -r "${jailsysdir}/${jname}/vnc_port" ]; then
		vm_vnc_port=$( /bin/cat ${jailsysdir}/${jname}/vnc_port )
		export vm_vnc_port="${vm_vnc_port}"
	fi

	nic_id=0

	local sqldelimer=" "

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT nic_hwaddr,nic_parent FROM bhyvenic" | while read nic_hwaddr nic_parent; do
		echo "export nic_hwaddr${nic_id}=\"${nic_hwaddr}\""
		get_vm_uplink_interface ${nic_parent}
		echo "export nic_parent${nic_id}=\"${interface}\""
	done )
}

export_jail_data_for_external_hook()
{
	# export variables for external hooks
	# todo: first_ipv4_addr + first_ipv6_addr
	export jname=${jname}

	[ -n "${ip4_addr}" ] && geniplist "${ip4_addr}"

	for _i in ${JARG} ipv4_first_public ipv4_first_private ipv4_first ipv6_first_public ipv6_first_private ipv6_first; do
		T=
		eval T="\$$_i"
		export ${_i}="${T}"
	done
}

###
fi
