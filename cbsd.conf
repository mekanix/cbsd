# clean general global variables
unset oarch over ostable arch target_arch ver stable

# defines
product="CBSD"
myversion="11.2.1a"

if [ -z "${workdir}" ]; then
	echo "no workdir"
	exit 1
fi

distdir="/usr/local/cbsd"
subr="${workdir}/nc.subr"
nodenamefile="${workdir}/nodename"
settingstui="${workdir}/settings-tui.subr"
dialog="${workdir}/dialog.subr"
tools="${workdir}/tools.subr"
mdtools="${workdir}/mdtools.subr"
zfstool="${workdir}/zfs.subr"
jfs="${workdir}/jfs.subr"
color="${distdir}/ansiicolor.subr"
nodes="${workdir}/nodes.subr"
jrcconf="${workdir}/rcconf.subr"
vimageconf="${workdir}/vnet.subr"
vimagetui="${workdir}/vnet-tui.subr"
inventory="${workdir}/nc.inventory"
nodedescr="${workdir}/node.desc"
initenv="${workdir}/initenv.subr"
system="${workdir}/system.subr"
buildconf="${workdir}/build.subr"
distccacheconf="${workdir}/distccache.subr"
base2pkgconf="${workdir}/base2pkg.subr"
mailconf="${workdir}/mailtools.subr"
strings="${workdir}/strings.subr"
libdir="${workdir}/lib"
miscdir="${workdir}/misc"
jobdir="${workdir}/job"
srcdir="${workdir}/src"
tmpdir="${workdir}/tmp"
ftmpdir="${workdir}/ftmp"
importdir="${workdir}/import"
exportdir="${workdir}/export"
basejaildir="${workdir}/basejail"
basejailpref="base"
jaildatadir="${workdir}/jails-data"
jailfstabdir="${workdir}/jails-fstab"
jailrcconfdir="${workdir}/jails-rcconf"
jailfstabpref="fstab."
jaildir="${workdir}/jails"
jaildatapref="data"
jailsysdir="${workdir}/jails-system"
bindir="${workdir}/bin"
etcdir="${workdir}/etc"
jailctldir="${workdir}/jailctl"
nodectl="${workdir}/nodectl"
rcddir="${workdir}/rc.d"
sbindir="${workdir}/sbin"
systemdir="${workdir}/system"
moduledir="${workdir}/modules"
toolsdir="${workdir}/tools"
upgradedir="${workdir}/upgrade"
vardir="${workdir}/var"
spooldir="${vardir}/spool"
taskdir="${spooldir}/task"
rundir="${vardir}/run"
maildir="${vardir}/mail"
logdir="${vardir}/log"
sharedir="${workdir}/share"
dbdir="${vardir}/db"
gelidir="${dbdir}/geli"
localcbsdconffile="cbsd.conf"
localcbsdconf="${workdir}/${localcbsdconffile}"
sudoexecdir="${workdir}/sudoexec"
systemsudoexecdir="${distdir}/sudoexec"
cbsduser="cbsd"
production="0"
rsshdir="${workdir}/.rssh"
sshdir="${workdir}/.ssh"
templateldir="${workdir}/template"
fwcount_st="99"
fwcount_end="2000"
fwexpose_st="2001"
fwexpose_end="2999"
greeting="node"
jailmapdb="${dbdir}/jmap.txt"
# external source for online doc
docversion="11.x"
cbsddocsrc="https://www.bsdstore.ru/en/${docversion}"

[ -f "${nodenamefile}" ] && nodename=$( /bin/cat ${nodenamefile} )

if [ -n "${CBSD_DEBUG}" ]; then
	export NOCOLOR=1
	NOCOLOR=1
	export debug=1
	set -o xtrace
fi

if [ "$1" = "--pause_after_err" ]; then
	export pause_after_err=1
fi

if [ -z "${ECHO}" ]; then
	if [ -n "${NOCOLOR}" ]; then
		ECHO="echo"
	else
		ECHO="echo -e"
		[ -f "${color}" ] && . $color
	fi
fi

[ -f "${inventory}" ] && . ${inventory}
# Load _CMD variable: Default and custom by platform name
[ -z "${platform}" ] && platform=$( uname -s )
# Overwrite $platform to HardenedBSD if we have /usr/sbin/hbsd-update:
[ -e "/usr/sbin/hbsd-update" ] && platform="HardenedBSD"
# Overwrite $platform to TrueOS if we have TrueOS-specific dirs
[ -d "/usr/local/etc/trueos" -a -d "/usr/local/share/trueos" ] && platform="TrueOS"

[ -f "${workdir}/cmd.subr" ] && . ${workdir}/cmd.subr
[ -f "${workdir}/${platform}.subr" ] && . ${workdir}/${platform}.subr

if [ -z "${freebsdhostversion}" ]; then
	export freebsdhostversion=$( ${miscdir}/elf_tables --ver /bin/sh 2>/dev/null )
	[ -z "${freebsdhostversion}" ] && export freebsdhostversion="0"
fi

umask 002
