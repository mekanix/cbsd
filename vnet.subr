if [ ! "$_CBSD_VNET_SUBR" ]; then
_CBSD_VNET_SUBR=1
###

# Network interface=related funcion, for vnet feature
#
# default MAC_PREFIX
MAC_PREFIX="02:00:c0"

init_vnet()
{
	if ! /sbin/kldstat -qm if_bridge; then
		${ECHO} "${N1_COLOR}Loading if_bridge.ko...${N0_COLOR}"
		/sbin/kldload if_bridge
	fi

	gw_enable
}

# $1 - nicname (eg: bridge)
# if nicname=epair we search as epairXa
# show first available nic by type
# example:
#  ttt=$( find_first_freenic bridge )
# return 1 when error
find_first_freenic()
{
	local _i _epair _A 
	local _num=1 # begin from 1, due to 0 often used for system usage ( e.g: virbr0 on Xen )

	[ -z $1 ] && return 1
	[ "$1" = "epair" ] && _epair="a"

	for _i in $( /sbin/ifconfig -l ); do
		case "${_i}" in
			${1}*${_epair})
				/sbin/ifconfig ${1}${_num}${_epair} >/dev/null 2>&1
				[ $? -eq 1 ] && echo "${1}${_num}" && return 0
				_num=$(( _num + 1 ))
				[ ${_num} -gt 1000 ] && return 1
			;;
		esac
	done
	echo "${1}${_num}"
}

# $1 - nicname (eg: bridge)
# show nicX if exist
# example:
#   for i in $( show_all_nic_by_name bridge ); do
#      echo ${i}
#   done
show_all_nic_by_name()
{
	local _i _mynic _A _epair
	local _niclist

	[ -z $1 ] && return 1
	[ "${1}" = "epair" ] && _epair="a" # we check only one of pair

	for _i in $( /sbin/ifconfig -l ); do
		case "${_i}" in
			${1}*${_epair})
				_niclist="${_niclist} ${_i}"
			;;
		esac
	done

	[ -n "${_niclist}" ] && echo "${_niclist}"
	return 0
}

gw_enable()
{
	/sbin/sysctl -n net.inet.ip.forwarding=1 > /dev/null 2>&1
	/sbin/sysctl -n net.inet6.ip6.forwarding=1 > /dev/null 2>&1
}

# cbsd store uplink interface in description area ;)
# this func extract and show this
# $1 - iface (eg: bridge0)
# $2 - (optional) for bridge: try to search not only by desc - search for $2 as addm member
# example:
#    ttt=$( get_device_uplink bridge0 )
# example2:
#    ttt=$( get_device_uplink bridge0 em0 )
get_device_uplink()
{
	local _desc1 _desc2
	local _is_bridge
	local _addm
	local _addm_list
	local _i

	[ -z "${1}" ] && return 1
	[ -n "${2}" ] && _addm="${2}"

	_desc1=$( /sbin/ifconfig ${1} 2>/dev/null | /usr/bin/awk '/description:/{print $2}' )

	# extra check for bridge for cases where bridge created not by CBSD but member of
	# right uplink
	# required $2 for member
	# Also, inforamtion from bridge addm pasring preferred to desc
	if [ -z "${_addm}" ]; then
		[ -n "${_desc1}" ] && printf "${_desc1}"
		return 0
	fi

	_is_bridge=$( substr --pos=0 --len=6 --str=${1} )

	if [ "${_is_bridge}" != "bridge" ]; then
		[ -n "${_desc1}" ] && printf "${_desc1}"
		return 0
	fi

	_addm_list=$( /sbin/ifconfig ${1} 2>/dev/null |/usr/bin/awk '/member: /{printf $2" "}' )

	for _i in ${_addm_list}; do
		if [ "${_addm}" = "${_i}" ]; then
			printf "${_addm}"
			return 0
		fi
	done

	[ -n "${_desc1}" ] && printf "${_desc1}"

	return 0
}

# function search for available bridges in system who have uplink to ${interface}
# when not - create one
# out bridge name when it exist
# $1 - type (bridge or epair) , $2 - uplink interface
# return 1 when error
#   example:
#    if !  ttt=$( get_my_device bridge nfe0 ); then
#	echo "Error: $ttt"
#    fi
get_my_device()
{
	local _i _uplink _firstfree _ret _test _dev _desc

	[ -z "${1}" ] && echo "set device" && return 1
	[ -z "${2}" ] && echo "No uplink" && return 1
	_dev=$1
	_desc=$2

	for _i in $( show_all_nic_by_name ${_dev} ); do
		_uplink=$( get_device_uplink ${_i} ${_desc} )
		[ "${_uplink}" = "${_desc}" ] && echo "${_i}" && return 0
	done

	# we need for new bridge with ${_dev} uplink
	_firstfree=$( find_first_freenic ${_dev} )
	[ -z "${_firstfree}" ] && echo "Cant find first available ${_dev}" && return 1

	if [ "${_dev}" = "bridge" ]; then
		cbsdlogger NOTICE ${CBSD_APP}: get_my_device: /sbin/ifconfig ${_firstfree} create addm ${_desc} up description ${_desc}
		_test=$( /sbin/ifconfig ${_firstfree} create addm ${_desc} up description ${_desc} 2>&1 )
		_ret=$?
		if [ ${_ret} -ne 0 ]; then
			cbsdlogger NOTICE ${CBSD_APP}: get_my_device: error, ret: ${_ret}: ${_test}
			echo "${_test}"
			return 1
		fi
	fi
	echo "${_firstfree}"
}

# create epair and switch epairXa to bridge $1
# out of created epair
get_my_epair()
{
	local _firstfree

	[ -z "${1}" ] && echo "No bridge" && return 1

	_firstfree=$( find_first_freenic epair )

	[ $? -eq 1 ] && echo "No free available epair" && return 1

	/sbin/ifconfig ${_firstfree} create >/dev/null 2>/dev/null
	/sbin/ifconfig ${1} addm ${_firstfree}a >/dev/null 2>/dev/null

	# MAC MGMT
	local maca=
	local macb=

	if [ -r ${jailsysdir}/${jname}/local.sqlite ]; then
		macb=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT nic_hwaddr FROM jailnic )
	else
		/usr/local/bin/cbsd ${miscdir}/updatesql ${jailsysdir}/${jname}/local.sqlite ${distdir}/share/local-jailnic.schema jailnic
	fi

	if [ -z "${macb}" -o "${macb}" = "0" ]; then
		macb=$( mac_gen 02:ff:f0 )
		cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "INSERT INTO jailnic ( name,nic_order,nic_slot,nic_parent,nic_hwaddr ) VALUES ( \"epairb\",\"0\",\"0\",\"auto\",\"${macb}\" )"
	fi

	# flush stdout
	/sbin/ifconfig ${_firstfree}a up > /dev/null 2>&1
	/sbin/ifconfig ${_firstfree}b ether ${macb} up > /dev/null 2>&1

	echo ${_firstfree}
}

# create tap and attach to bridge $1 if $1 is not "disable"
get_my_tap()
{
	local _firstfree _parent_mtu=0 _ret

	[ -z "${1}" ] && echo "No bridge" && return 1

	_firstfree=$( find_first_freenic tap )

	if [ $? -eq 1 ]; then
		cbsdlogger WARNING ${CBSD_APP}: get_my_tap: no free available tap
		echo "No free available tap"
		return 1
	fi

	cbsdlogger NOTICE ${CBSD_APP}: get_my_tap: found new free device: ${_firstfree}. Will be created
	/sbin/ifconfig ${_firstfree} create >/dev/null 2>/dev/null

	# Inherits parent MTU to stop "ifconfig: BRDGADD XXX: Invalid argument" when
	# parent MTU less then tap
	_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
	_ret=$?

	if [ ${_ret} -eq 0 -a -n "${_parent_mtu}" ]; then
		cbsdlogger NOTICE ${CBSD_APP}: get_my_tap: adjust parent_mtu for ${_firstfree}: ${_parent_mtu}
		/sbin/ifconfig ${_firstfree} mtu ${_parent_mtu}
	fi

	if [ "${1}" != "disable" ]; then
		/sbin/ifconfig ${1} addm ${_firstfree}
		/sbin/ifconfig ${_firstfree} up
	fi

	echo ${_firstfree}
}

# convert mac to ip
# mac2ip 5c:f9:dd:76:d5:c4
mac2ip() {
	local mac=$1

	[ -z "${mac}" ] && return 0

	ip_a=$( let 0x`echo $mac | /usr/bin/cut -d: -f 3` )
	ip_b=$( let 0x`echo $mac | /usr/bin/cut -d: -f 4` )
	ip_c=$( let 0x`echo $mac | /usr/bin/cut -d: -f 5` )
	ip_d=$( let 0x`echo $mac | /usr/bin/cut -d: -f 6` )
	echo "$ip_a.$ip_b.$ip_c.$ip_d"
}

# convert ip to mac
# ip2mac 221.118.213.196
ip2mac() {
	local ip=$1

	[ -z "${ip}" ] && return 0

	local IFS="."
	local macpart=4

	eval $( for i in ${ip}; do
		unset macval
		unset len
		macval=$( printf "%x" ${i} )
		# append zero if len=1
		len=$( strlen ${macval} )
		[ "${len}" = "1" ] && macval="0${macval}"
		echo "export mac_${macpart}=\"${macval}\""
		macpart=$(( macpart + 1 ))
	done )

	echo "${MAC_PREFIX}:${mac_5}:${mac_6}:${mac_7}"
}

# return $interface as parent interface and $mytap for vale
# $nic_parent or $1 must be set
get_vm_uplink_interface()
{
	local tmp_nic_parent
	local _get_by_route=0	# get upink by IPv4 route ?
	local _sw _pos _arg_len _pref _vale_arg

	if [ -n "${1}" ]; then
		tmp_nic_parent="${1}"
	else
		tmp_nic_parent="${nic_parent}"
	fi

	case ${tmp_nic_parent} in
		vale_*)
			strpos --str="${tmp_nic_parent}" --search="_"
			_pos=$?
			if [ ${_pos} -eq 0 ]; then
				# not vale_XXX form
			else
				_arg_len=$( strlen ${tmp_nic_parent} )
				_pref=$(( _arg_len - _pos ))
				_vale_arg=$( substr --pos=0 --len=${_pos} --str="${tmp_nic_parent}" )
				_sw=$( substr --pos=$(( ${_pos} +2 )) --len=${_pref} --str="${tmp_nic_parent}" )
			fi
			# valeid=$( cbsdsqlro local SELECT idx FROM vale WHERE name=\"${nic_parent}\"  )
			valeid=$( cbsdsqlro local SELECT idx FROM vale WHERE name=\"${_sw}\"  )
			[ -z "${valeid}" ] && log_err 1 "errmsg=\"compile_nic_args: can't determine vale nic for: ${nic_parent}\""
			mytap="vale${valeid}:${jname}"
#			net_emul="e1000"
			net_emul="virtio-net"
			cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface: vale id: ${valeid} -> ${mytap}
			;;
		*)
			case ${ip4_addr} in
				[Dd][Hh][Cc][Pp])
					_get_by_route=0
					;;
				*)
					iptype ${ip4_addr}
					case $? in
						1)
							_get_by_route=1
							;;
						*)
							_get_by_route=0
							;;
					esac
					;;
			esac

			case ${_get_by_route} in
				0)
					# when ip=0 and interface=auto we must use default interface for upstream
					if [ "${tmp_nic_parent}" = "0" -o "${tmp_nic_parent}" = "auto" ]; then
						cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface: get_by_route: ${_get_by_route}, tmp_nic_parent: ${tmp_nic_parent}, use default iface
						. ${distdir}/initenv.subr
						update_netinfo
							if [ "${node_ip6_active}" = "1" ]; then
							interface="${CBSD_UPLINK_IFACE6}"
						else
							interface="${CBSD_UPLINK_IFACE4}"
						fi
					else
						interface="${tmp_nic_parent}"
					fi
					cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface for ${jname}: ip4_addr: ${ip4_addr}, determine uplink method: by uplink, interface: ${interface}
					;;
				1)
					interface=$( /sbin/route -n -4 get ${IWM} 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )
					cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface for ${jname}: ip4_addr: ${IWM}, determine uplink method: by route, interface: ${interface}
					case "${interface}" in
						lo*)
							cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface for ${jname}: ip4_addr: ${IWM}, iface: ${interface} is loopback. force to 0.0.0.0 route
							interface=$( /sbin/route -n -4 get 0.0.0.0 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )
							cbsdlogger NOTICE ${CBSD_APP}: get_vm_uplink_interface for ${jname}: ip4_addr: 0.0.0.0, determine uplink method: by route, interface: ${interface}
					esac
					;;
			esac
			;;
	esac

	[ -z "${interface}" ] && return 1

	return 0
}

# detach and remove NIC from vnet-based jail
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
jail_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM jailnic WHERE id=\"${id}\"

	return 0
}

# return 0 if -n $nic exist on the host
# e.g:
# if is_nic_exist -n lo0; then
#	echo "EXIST"
#fi
is_nic_exist()
{
	local _nic _nic_list _i

	while getopts "n:" opt; do
		case "${opt}" in
			n) _nic="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_nic}" ] && return 1

	_nic_list=$( ${miscdir}/nics-list | /usr/bin/xargs )

	local IFS=" "

	for _i in ${_nic_list}; do
		[ "${_nic}" = "${_i}" ] && return 0
	done

	return 1
}

# function search for nic in system by iface description
# return 0 and print to stdout nic if found
# return 1 when not
#   example:
#    if ttt=$( get_nic_by_descr freebsd1-nic0 ); then
#	echo "Found: $ttt"
#    fi
get_nic_by_descr()
{
	local _iface _mytap _i _list=

	_iface=$( /sbin/ifconfig -l )
	_mytap=

	for _i in ${_iface}; do
		_desc=$( /sbin/ifconfig ${_i} 2>/dev/null | /usr/bin/awk '/description:/{print $2}' )
		[ -z "${_desc}" ] && continue
		if [ "${_desc}" = "${1}" ]; then
			if [ -n "${_list}" ]; then
				_list="${_list} ${_i}"
			else
				_list="${_i}"
			fi
		fi
	done

	if [ -n "${_list}" ]; then
		printf "${_list}"
		return 0
	else
		return 1
	fi
}

###
fi
