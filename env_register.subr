if [ ! "$_CBSD_ENV_REGISTER_SUBR" ]; then
_CBSD_ENV_REGISTER_SUBR=1
###

register_delete_full()
{
	local LIMITS="${jailsysdir}/${jname}/jail.limits"
	local MEDIASQL="${jailsysdir}/${jname}/media.sql"

	[ -z "${jname}" ] && return 0

	# export media data to ascii file
	media mode=dump jname=${jname} > ${MEDIASQL}
	cbsdsqlrw storage_media DELETE FROM media WHERE jname=\"${jname}\" 2>/dev/null

	jmkrctlconf jname=${jname} type=rctl mode=tofile file=${LIMITS}
	jmkrctlconf jname=${jname} type=extra mode=tofile file=${LIMITS}.extra

	cbsdsqlrw local "DELETE FROM jails WHERE jname='${jname}'"
	cbsdsqlrw local "DELETE FROM rctl WHERE jname='${jname}'" 2>/dev/null
	cbsdsqlrw local "DELETE FROM bhyve WHERE jname='${jname}'" 2>/dev/null
	cbsdsqlrw local "DELETE FROM xen WHERE jname='${jname}'" 2>/dev/null
	cbsdsqlrw local "DELETE FROM virtualbox WHERE jname='${jname}'" 2>/dev/null

	cbsdsqlrw local "DELETE FROM virtualboxdsk WHERE jname=\"${jname}\" 2>/dev/null
	cbsdsqlrw local "DELETE FROM virtualboxnic WHERE jname=\"${jname}\" 2>/dev/null
}

register_insert_full()
{
	local _val _i _n _sql _sqlparam _sqlvalue _jid
	local LIMITS="${jailsysdir}/${jname}/jail.limits"

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in ${JARG}; do
		[ "${_i}" = "nic_hwaddr" ] && continue
		eval _val=\$${_i}
		[ -z "${_val}" ] && _val="0"
		_sqlparam="${_sqlparam}, ${_i}"
		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	get_jid

	_sqlparam="${_sqlparam}, jid"
	_sqlvalue="${_sqlvalue}, ${myjid}"

	_sqlparam="${_sqlparam}, status"

	if [ -z "${status}" ]; then
		if [ ${myjid} -gt 0 ]; then
			status="1"
		else
			status="0"
		fi
	fi

	_sqlvalue="${_sqlvalue}, ${status}"

	cbsdsqlrw local "INSERT INTO jails ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	[ -f "${LIMITS}" ] && jmkrctlconf jname=${jname} type=rctl mode=tosql file=${LIMITS}
	[ -f "${LIMITS}.extra" ] && jmkrctlconf jname=${jname} type=extra mode=tosql file=${LIMITS}.extra

	if [ "${emulator}" = "bhyve" -o "${emulator}" = "xen" ]; then
		local MEDIASQL="${jailsysdir}/${jname}/media.sql"
		if [ -r "${MEDIASQL}" ]; then
			/usr/local/bin/sqlite3 ${dbdir}/storage_media.sqlite < ${MEDIASQL}
		fi
	fi
}

register_insert_bhyve()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${distsharedir}/bhyve.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	[ -n "${register_iso_as}" -a -z "${vm_iso_path}" ] && vm_iso_path="${register_iso_as}"

	# back compatible - old schema
	for _i in ${MYCOL}; do
		eval _val="\$${_i}"

		# workaround for CBSD < 11.1.0 with default VNC password 'cbsd'. Remove this on next release
		# todo: hidden, protected?
		case "${_i}" in
			vnc_password)
				;;
			*)
				[ -z "${_val}" ] && continue
				;;
		esac

		_sqlparam="${_sqlparam}, ${_i}"

		case "${_i}" in
			vm_ram)
				# if its not number, then convert
				if is_number ${_val}; then
					conv2bytes ${_val};
					_val="${convval}"
				fi
				;;
		esac

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsqlrw local "INSERT INTO bhyve ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvedsk set jname=\"${jname}\""
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvenic set jname=\"${jname}\""

	# settings already exist?
	_ret=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT created FROM settings LIMIT 1" )
	[ -n "${_ret}" ] && return 0

	# new schema:
	. ${distsharedir}/bhyve_settings.conf

	_sqlparam=
	_sqlvalue=

	# back compatible - old schema
	for _i in ${MYCOL}; do
		eval _val="\$${_i}"

		# workaround for CBSD < 11.1.0 with default VNC password 'cbsd'. Remove this on next release
		# todo: hidden, protected?
		case "${_i}" in
			vnc_password)
				;;
			*)
				[ -z "${_val}" ] && continue
				;;
		esac

		if [ -z "${_sqlparam}" ]; then
			_sqlparam="${_i}"
		else
			_sqlparam="${_sqlparam}, ${_i}"
		fi

		case "${_i}" in
			vm_ram)
				# if its not number, then convert
				if is_number ${_val}; then
					conv2bytes ${_val};
					_val="${convval}"
				fi
				;;
		esac

		if [ -z "${_sqlvalue}" ]; then
			_sqlvalue="${_val}"
		else
			_sqlvalue="${_sqlvalue}, '${_val}'"
		fi
	done

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "INSERT INTO settings ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	# update PID for domain ( 0 for offline and actual process ID for live migrated vm)
	bset jname=${jname} vm_pid=auto > /dev/null
}


register_insert_virtualbox()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${distsharedir}/virtualbox.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in $MYCOL; do
		eval _val=\$${_i}
		# [ -z "${_val}" ] && _val="0"
		[ -z "${_val}" ] && continue

		[ "${_val}" = "jname" ] && continue
		_sqlparam="${_sqlparam}, ${_i}"

		#convert ram to bytes
		if [ "${_i}" = "vm_ram" ]; then
			# if its not number, then convert
			if is_number ${_val}; then
				conv2bytes ${_val};
				_val="${convval}"
			fi
		fi

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsqlrw local "INSERT INTO virtualbox ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	# bhyvedsk
	for last_disk in $( /usr/bin/seq 1 16 ); do
		unset dsk_controller dsk_path dsk_slot dsk_type
		eval dsk_controller="\$dsk_controller$last_disk"
		[ -z "${dsk_controller}" ] && break
		eval dsk_path="\$dsk_path$last_disk"
		eval dsk_slot="\$dsk_slot$last_disk"
		eval dsk_type="\$dsk_type$last_disk"

		if [ -n "${virtio_type}" ]; then
			cbsdsqlrw local "INSERT INTO virtualboxdsk ( jname,dsk_controller,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_controller}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		else
			cbsdsqlrw local "INSERT INTO virtualboxdsk ( jname,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		fi
	done
	
	# bhyvenic
	for last_nic in $( /usr/bin/seq 1 16 ); do
		unset nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr

		eval nic_driver="\$nic_driver$last_nic"
		[ -z "${nic_driver}" ] && break

		eval nic_order="\$nic_order$last_nic"
		eval nic_slot="\$nic_slot$last_nic"
		eval nic_type="\$nic_type$last_nic"
		eval nic_parent="\$nic_parent$last_nic"
		eval nic_hwaddr="\$nic_hwaddr$last_nic"

		cbsdsqlrw local "INSERT INTO virtualboxnic ( jname,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr  ) VALUES ( \"${jname}\",\"${nic_order}\",\"${nic_driver}\",\"${nic_slot}\",\"${nic_type}\",\"${nic_parent}\",\"${nic_hwaddr}\" )"
	done
}


register_insert_xen()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${distsharedir}/xen.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	[ -n "${register_iso_as}" -a -z "${vm_iso_path}" ] && vm_iso_path="${register_iso_as}"

	# back compatible - old schema
	for _i in ${MYCOL}; do
		eval _val="\$${_i}"

		# workaround for CBSD < 11.1.0 with default VNC password 'cbsd'. Remove this on next release
		# todo: hidden, protected?
		case "${_i}" in
			vnc_password)
				;;
			*)
				[ -z "${_val}" ] && continue
				;;
		esac

		_sqlparam="${_sqlparam}, ${_i}"

		case "${_i}" in
			vm_ram)
				# if its not number, then convert
				if is_number ${_val}; then
					conv2bytes ${_val};
					_val="${convval}"
				fi
				;;
		esac

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsqlrw local "INSERT INTO xen ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvedsk set jname=\"${jname}\""
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvenic set jname=\"${jname}\""

	# settings already exist?
	_ret=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT created FROM settings LIMIT 1" )
	[ -n "${_ret}" ] && return 0

	# new schema:
	. ${distsharedir}/xen_settings.conf

	_sqlparam=
	_sqlvalue=

	# back compatible - old schema
	for _i in ${MYCOL}; do
		eval _val="\$${_i}"

		# workaround for CBSD < 11.1.0 with default VNC password 'cbsd'. Remove this on next release
		# todo: hidden, protected?
		case "${_i}" in
			vnc_password)
				;;
			*)
				[ -z "${_val}" ] && continue
				;;
		esac

		if [ -z "${_sqlparam}" ]; then
			_sqlparam="${_i}"
		else
			_sqlparam="${_sqlparam}, ${_i}"
		fi

		case "${_i}" in
			vm_ram)
				# if its not number, then convert
				if is_number ${_val}; then
					conv2bytes ${_val};
					_val="${convval}"
				fi
				;;
		esac

		if [ -z "${_sqlvalue}" ]; then
			_sqlvalue="${_val}"
		else
			_sqlvalue="${_sqlvalue}, '${_val}'"
		fi
	done

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "INSERT INTO settings ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

}

###
fi
