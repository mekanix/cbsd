if [ ! "$_CBSD_VIRTUAL_SUBR" ]; then
_CBSD_VIRTUAL_SUBR=1
###

check_iso_sha256sum()
{
	local _sha256sum_new _sha256sum
	local _file _sha256sum_passed

	while getopts "f:m:" opt; do
		case "$opt" in
			f) _file="${OPTARG}" ;;
			m) _sha256sum="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	if [ -n "${_sha256sum}" -a "${_sha256sum}" != "0" ]; then
		printf "${N1_COLOR}Checking CRC sum: ${N2_COLOR}${_sha256sum}${N1_COLOR}...${N0_COLOR}"
		[ ! -r ${_file} ] && return 1
		_sha256sum_new=$( /usr/bin/nice -n 20 /sbin/sha256 -q ${_file} )
		if [ "${_sha256sum}" = "${_sha256sum_new}" ]; then
			${ECHO} "${N2_COLOR}Passed${N0_COLOR}"
			_sha256sum_passed=1
		else
			${ECHO} "${N1_COLOR}Invalid CRC: ${N2_COLOR}${_sha256sum_new}${N0_COLOR}"
			${ECHO} "${N1_COLOR}See more details about CRC: ${N2_COLOR}https://www.bsdstore.ru/en/cbsd_fetch.html${N0_COLOR}"
			_sha256sum_passed=0
		fi
	else
		${ECHO} "${W1_COLOR}Check CRC sum skipped due to settings. ${N1_COLOR}See more: ${N2_COLOR}https://www.bsdstore.ru/en/cbsd_fetch.html${N0_COLOR}"
		_sha256sum_passed=1
	fi

	return ${_sha256sum_passed}
}


# generic/shared func for custom virtuals
# $sha256sum - optional - check for sha256sum
init_iso()
{
	local sha256sum_new
	local sha256sum_passed
	local _sorted_mirror_list _sorted_mirror_list2
	local _sorted_mirror_list_rate
	local _fetch_attempt=0
	local _mirror_num=0 _mirror_cur=0
	local _iso_img_type=
	local _ret _is_link

	readconf fetch.conf

	if [ -z "${iso_img}" ]; then
		${ECHO} "no cd: iso_img and register_iso_as is empty"
		return 1
	fi

	# test for media database
	local media_db

	if [ "${CBSD_ISO_SKIP_CHECKSUM}" = "yes" -o "${sha256sum}" = "0" ]; then
		sha256sum_passed=1
		sha256sum=0
	else
		sha256sum_passed=0
	fi

	case "${iso_img_type}" in
		cloud)
			local _qemu_img_cmd=$( which qemu-img )
			[ -z "${_qemu_img_cmd}" ] && err 1 "${N1_COLOR}For cloud-images you need install qemu-img tools first: ${N2_COLOR}pkg install -y qemu-utils${N0_COLOR}"
			_iso_img_type="cloud"
			# pkg install qemu-utils
			# fetch http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-uefi1.img
			# qemu-img convert -f qcow2 -O raw xenial-server-cloudimg-amd64-uefi1.img xenial-server-cloudimg-amd64-uefi1.raw
			;;
		*)
			_iso_img_type="iso"
			;;
	esac

	if [ -n "${vm_iso_path}" ]; then
		${ECHO} "${N1_COLOR}vm_iso_path: ${N2_COLOR}${vm_iso_path}${N0_COLOR}"

		media_db=$( cbsdsqlro storage_media SELECT path FROM media WHERE name=\"${vm_iso_path}\" AND type=\"${_iso_img_type}\" LIMIT 1 )

		if [ -n "${media_db}" -a -r "${media_db}" ]; then
			${ECHO} "${N1_COLOR}media found: ${N2_COLOR}${vm_iso_path}${N1_COLOR} --> ${N2_COLOR}${media_db}${N0_COLOR}"
			iso_img="${media_db}"
			return 0
		fi
	fi

	local _mydir="${srcdir}/iso"
	local _myfile="${_mydir}/${iso_img}"
	local i

	[ ! -d "${_mydir}" -o ! -h "${_mydir}" ] && /bin/mkdir -p ${_mydir}

	[ -z "${iso_img_dist}" ] && iso_img_dist="${iso_img}"

	# Unessesary when we boot not from cd
	[ "${vm_boot}" != "cd" ] && iso_img="${_myfile}" && return 0

	if [ -z "${register_iso_name}" ]; then
		_myfile="${_mydir}/${iso_img}"
		${ECHO} "${N1_COLOR}Warning: empty register_iso_name. Use iso_img: ${_myfile}"
	fi

	_myfile=$( media mode=get name="${register_iso_name}" path='' )
	[ -z "${_myfile}" ] && _myfile="${_mydir}/${register_iso_name}"

	if [ -r "${_myfile}" ]; then
		iso_img="${_myfile}"
		# convert CLOUD images into ZVOL when ZFS feature is on

		if [ "${_iso_img_type}" = "cloud" -a "${zfsfeat}" = "1" ]; then
			. ${zfstool}
			DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
			_ret=$( /usr/bin/basename ${_myfile} )
			if [ ! -r "/dev/zvol/${DATA}/${_ret}" ]; then
				# create ZVOL from file
				zfs_create_zvol_from_file -f ${_myfile} -n ${_ret} -p ${DATA}
				if [ -r "/dev/zvol/${DATA}/${_ret}" ]; then
					# recreate symlink
					/bin/rm -f ${_myfile}
					/bin/ln -s /dev/zvol/${DATA}/${_ret} ${_myfile}
				fi
			else
				# vol already exist ?
				# recreate symlink
				is_link=$( /usr/bin/readlink ${_myfile} )
				if [ "${is_link}" != "/dev/zvol/${DATA}/${_ret}" ]; then
					/bin/rm -f ${_myfile}
					/bin/ln -s /dev/zvol/${DATA}/${_ret} ${_myfile}
				fi
			fi

			return 0
		fi
	fi

	_mirror_num=$( echo "${iso_site} ${cbsd_iso_mirrors}" | /usr/bin/wc -w | /usr/bin/awk {'printf $1'} )

	if [ ! -f "${_myfile}" -a "${fetch}" = "1" ]; then
		[ -z "${iso_site}" -a -z "${cbsd_iso_mirrors}" ] && ${ECHO} "${N1_COLOR}No such iso: ${N2_COLOR}${_myfile}${N1_COLOR} and ${N2_COLOR}iso_site/cbsd_iso_mirrors${N1_COLOR} variable not found" && return 1
		${ECHO} "${N1_COLOR}No such media: ${N2_COLOR}${_myfile}${N1_COLOR} in ${N2_COLOR}${_mydir}${N0_COLOR}"
		ALWAYS_YES=1

		if [ "${iso_auto_fetch}" = "1" ]; then
			ointer="${inter}"
			inter=0
		fi

		if getyesno "Shall i download it from: ${iso_site}?"; then
			${ECHO} "${N1_COLOR}Download to: ${N2_COLOR}${_myfile}${N0_COLOR}"

			if [ -n "${iso_extract}" ]; then
				outfile="${_mydir}/${iso_img_dist}"
			else
				outfile="${_myfile}"
			fi

			local win_mirror=
			local win_rate=0
			local t_size=0
			local url=

			local max_url_len=0
			local cur_url_len=0
			local free_len=0

			if [ ${_mirror_num} -gt 1 ]; then
				${ECHO} "${N1_COLOR}Scanning for fastest mirror...${N0_COLOR}"
				_sorted_mirror_list=$( for i in ${iso_site} ${cbsd_iso_mirrors}; do echo ${i}; done | /usr/bin/sort -u )

				# determine longest url
				for i in ${iso_site} ${cbsd_iso_mirrors}; do
					cur_url_len=$( strlen ${i} )
					[ ${cur_url_len} -gt ${max_url_len} ] && max_url_len=${cur_url_len}
				done

				max_url_len=$(( max_url_len + 1 ))
				max_url_len_header=$(( max_url_len - 15 ))

				printf "%-12s ${UNDERLINE}${H1_COLOR}Mirror source:${N0_COLOR} %-${max_url_len_header}s ${UNDERLINE}${H1_COLOR}Bytes per 3sec:${N0_COLOR}\n"

				_sorted_mirror_list_rate=
				# for broken_crc_fetch_order="cbsd_mirror"
				_sorted_mirror_list2=$( for i in ${cbsd_iso_mirrors} ${iso_site}; do echo ${i}; done | /usr/bin/sort -u )

				for i in ${_sorted_mirror_list}; do
					_mirror_cur=$(( _mirror_cur + 1 ))
					url="${i}${iso_img_dist}"

					cur_url_len=$( strlen ${i} )
					free_len=$(( max_url_len - cur_url_len ))

					printf " ${H1_COLOR}* ${H2_COLOR}[ %-5s ] ${N2_COLOR}${i}${N0_COLOR}:%-${free_len}s" ${_mirror_cur}/${_mirror_num}
					t_size=$( /usr/bin/timeout -s HUP 3 ${bindir}/cfetch -s 1 -o /dev/null -u ${url} 2>/dev/null )
					if [ -z "${t_size}" ]; then
						${ECHO} "${W1_COLOR}failed${N0_COLOR}"
						t_size=0
					else
						if [ "${t_size}" = "0" ]; then
							${ECHO} "${N4_COLOR}${t_size}${N0_COLOR}"
						else
							${ECHO} "${H5_COLOR}${t_size}${N0_COLOR}"
						
						fi
						if ! is_number ${t_size}; then
							if [ ${t_size} -gt ${win_rate} ]; then
								win_rate=${t_size}
								win_mirror="${i}"
							fi
						else
							t_size=0
							${ECHO} "${W1_COLOR}failed, no size${N0_COLOR}"
						fi
					fi
					_sorted_mirror_list_rate="${_sorted_mirror_list_rate}${t_size} ${i}\n"
				done

				_sorted_mirror_list_rate=$( printf "${_sorted_mirror_list_rate}" |/usr/bin/sort -k1 -n -r )
				_sorted_mirror_list=$( printf "${_sorted_mirror_list_rate}" |/usr/bin/awk {'printf $2" "'} )
				# sorted list "<rate> <mirror>":
				#echo "${_sorted_mirror_list_rate}"

				[ -n "${win_mirror}" ] && ${ECHO} "${H3_COLOR} Winner: ${N2_COLOR}${win_mirror}${N0_COLOR}"
				iso_site="${_sorted_mirror_list}"
			else
				# single site without mirrors
				_sorted_mirror_list2=
			fi
			for i in ${iso_site}; do
				sha256sum_passed=0
				${ECHO} "${N1_COLOR}Processing: ${N2_COLOR}${i}${H2_COLOR}${iso_img_dist}${N0_COLOR}"
				[ -s "${_myfile}" ] && continue # skip all other mirror when file exist
				jswmode jname=${jname} mode=maintenance comment='Fetching_ISO'
				fetchme -o ${outfile} -u ${i}${iso_img_dist}
				jswmode jname=${jname} mode=master comment='Starting'
				check_iso_sha256sum -f ${outfile} -m ${sha256sum}
				sha256sum_passed=$?
				[ -r ${outfile} -a ${sha256sum_passed} -eq 1 ] && break
				[ -r ${outfile} ] && /bin/rm -f ${outfile}
				_fetch_attempt=$(( _fetch_attempt + 1 ))
				if [ "${broken_crc_fetch_order}" = "cbsd_mirror" -a ${_fetch_attempt} -eq 1 ]; then
					# reset mirror list
					for x in ${_sorted_mirror_list2}; do
						${ECHO} "${N1_COLOR}Processing from CBSD Mirrors: ${N2_COLOR}${x}${N0_COLOR}"
						fetchme -o ${outfile} -u ${x}${iso_img_dist}
						check_iso_sha256sum -f ${outfile} -m ${sha256sum}
						sha256sum_passed=$?
						[ -r ${outfile} -a ${sha256sum_passed} -eq 1 ] && break
					done
					break
				fi
			done

			if [ ${sha256sum_passed} -ne 1 ]; then
				${ECHO} "${N1_COLOR}SHA256 sum wrong. Please update profiles or use ${N2_COLOR}CBSD_ISO_SKIP_CHECKSUM=yes${N1_COLOR} variable"
				${ECHO} "via env(1) or ${emulator}-default-default.conf config file to disable sha256sum validating${N0_COLOR}"
			
			fi

		fi
		ALWAYS_YES=0

		# restore inter value
		if [ "{iso_auto_fetch}" = "1" ]; then
			inter="${ointer}"
		fi

	fi

	if [ -n "${iso_extract}" -a -f "${outfile}" ]; then
		${ECHO} "${N1_COLOR}Extracting...${N0_COLOR}"
		set -o xtrace
		cd ${_mydir}
		${iso_extract}
		#${outfile}
		set +o xtrace
		[ -f "${outfile}" ] && /bin/rm -f ${outfile}
		[ -f "${_mydir}/${iso_img}" ] && /bin/mv ${_mydir}/${iso_img} ${_myfile}
	fi

	if [ ! -s "${_myfile}" ]; then
		${ECHO} "${N1_COLOR}No such ISO image. Try to download it manually and put into ${N2_COLOR}${_myfile}${N0_COLOR}"
		err 1 "${N1_COLOR}Or register (via cbsd media mode=register) it with vm_iso_path name: ${N2_COLOR}${vm_iso_path}${N0_COLOR}"
	fi

	if [ -r "${_myfile}" ]; then
		${ECHO} "${N1_COLOR}Automatically register iso as: ${N2_COLOR}${register_iso_name}${N0_COLOR}"
		local reg_name
		if [ -n "${register_iso_as}" ]; then
			reg_name="${register_iso_as}"
		else
			reg_name="${register_iso_name}"
		fi
		media mode=register name="${reg_name}" path="${_myfile}" type="${_iso_img_type}" jname="${jname}"
	fi

	# Final check for ISO existance
	# if symlink - store realpath from symlink
	[ -h ${_myfile} ] && _myfile=$( /usr/bin/readlink ${_myfile} )

	if [ -r "${_myfile}" ]; then
		iso_img="${_myfile}"
	else
		iso_img=
	fi

	# convert CLOUD images into ZVOL when ZFS feature is on
	if [ "${_iso_img_type}" = "cloud" ]; then
		. ${zfstool}
		convert_source_image_to_zvol -s "${_myfile}"
	fi

	return 0
}

manage_boot_by_empty_hdd()
{
	local _err
	local dsk_size=0
	local tmp_zvol=

	[ "${vm_boot}" != "hdd" ] && return 0
	# check for empty disk
	local checkres

	if [ -z "${MDFILE}" ]; then
		 ${ECHO} "${H5_COLOR}Notice: ${N1_COLOR}no hard disk, boot from CD...${N0_COLOR}"
		vm_boot="cd";
		return 0
	fi

	check_for_empty_hdd path="${data}/${MDFILE}"
	_ret=$?

	[ ${_ret} -eq 2 ] && return 0		# unknown error

	if [ ${_ret} -eq 0 ]; then
		${ECHO} "${N1_COLOR}Looks like ${N2_COLOR}${data}/${MDFILE}${N1_COLOR} is empty.${N0_COLOR}"
		ALWAYS_YES=1
		if getyesno "May be you want to boot from CD? "; then
			${ECHO} "${N1_COLOR}Temporary boot device: ${N2_COLOR}cd${N0_COLOR}"
			cd_boot_once=1
			vm_boot="cd"
		else
			vm_boot="hdd"
		fi
		ALWAYS_YES=0
	else
		# Eject CD/ISO ?
		media_auto_eject=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT media_auto_eject FROM settings ORDER BY (created) DESC LIMIT 1;' 2>/dev/null )
		if [ "${media_auto_eject}" = "1" ]; then
			media mode=eject jname=${jname}
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET media_auto_eject='0'"
		fi
	fi
}


# print next free tcp port on specified IP
# do a tcp port scan through nc(1)
# we use mainly for searching free port for VNC/Spice or port for live migration
# -a (optional) address to scan (e.g: -a 127.0.0.1 which is default)
# -e (mandatory) end port range (e.g: -e 6000)
# -s (mandatory) start port range (e.g: -s 5900)
# -w (optional) nc(1) timeout (e.g: -w 2 which is default)
# return 0 and print found port to stdout when free port available
# return 1 and print '0' to stdout when no free port in current range
get_next_tcp_port()
{
	local _start_port _end_port _nc_timeout _address

	while getopts "a:e:s:w:" opt; do
		case "${opt}" in
			a) _address="${OPTARG}" ;;
			e) _end_port="${OPTARG}" ;;
			s) _start_port="${OPTARG}" ;;
			w) _nc_timeout="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	# some defaults
	[ -z "${_address}" ] && _address="127.0.0.1"
	[ -z "${_nc_timeout}" ] && _nc_timeout=2

	if [ -z "${_start_port}" -o -z "${_end_port}" ]; then
		${ECHO} "${W1_COLOR}Warning: ${N1_COLOR}${CBSD_APP}: get_next_tcp_port: empty _start_port or _end_port params${N0_COLOR}"
		cbsdlogger WARNING ${CBSD_APP}: get_next_tcp_port: empty _start_port or _end_port params
		return 1
	fi

	if [ ${_start_port} -gt ${_end_port} ]; then
		${ECHO} "${W1_COLOR}Warning: ${N1_COLOR}${CBSD_APP}: _start_port ${_start_port} greater then _end_port ${_end_port}${N0_COLOR}"
		cbsdlogger WARNING ${CBSD_APP}: _start_port ${_start_port} greater then _end_port ${_end_port}
		return 1
	fi

	for _tcp_port in $( /usr/bin/seq ${_start_port} ${_end_port} ); do
		/usr/bin/nc -w ${_nc_timeout} -z ${_address} ${_tcp_port} > /dev/null 2>&1 || break
	done

	if [ ${_tcp_port} -eq ${_end_port} ]; then
		cbsdlogger WARNING ${CBSD_APP}: no free port available from ${_start_port} to ${_end_port} range at ${_address}
		echo "0"
		return 1
	fi

	echo ${_tcp_port}
	return 0
}

# check 1 when DMAR detected
# check 0 if not
check_dmar()
{
	local _dmar_test=$( /usr/sbin/acpidump -t | /usr/bin/grep DMAR )
	[ -z "${_dmar_test}" ] && return 0

	return 1
}

# Init 'system' persist tap interface in bridge
# work around in order to exclude loosing networking upon stop/start first vm
# https://svnweb.freebsd.org/base/head/share/man/man4/bridge.4?r1=324659&r2=324658&pathrev=324659
# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=221122
# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=214359
init_systap()
{
	local _i _iface _desc _mytap _sys_uplink _ret _parent_mtu
	local count netwait_if_timeout output _is_bridge _test_ifaces

	_iface=$( /sbin/ifconfig -l )
	_mytap=

	for _i in ${_iface}; do
		_desc=$( /sbin/ifconfig ${_i} 2>/dev/null | /usr/bin/awk '/description:/{print $2}' )
		[ "${_desc}" = "CBSDSYSTEM0" ] && return 0
	done

	. ${distdir}/initenv.subr
	update_netinfo
	if [ "${node_ip6_active}" = "1" ]; then
		_sys_uplink="${CBSD_UPLINK_IFACE6}"
	else
		_sys_uplink="${CBSD_UPLINK_IFACE4}"
	fi

	# no uplink interface detected, skip system tap
	if [ -z "${_sys_uplink}" ]; then
		cbsdlogger NOTICE ${CBSD_APP}: no uplink interface detected. skip init system tap
		return 0
	fi
	_is_phys=$( ${toolsdir}/nic_info --nic=${_sys_uplink} --phys --quiet 2>/dev/null )

	# if interface not physical, skipp init systap
	if [ "${_is_phys}" != "1" ]; then
		cbsdlogger NOTICE ${CBSD_APP}: uplink interface ${_sys_uplink} not physical, skip init system tap
		return 0
	fi

	. ${vimageconf}

	if ! get_vm_uplink_interface ${_sys_uplink}; then
		${ECHO} "${N1_COLOR}bstart init_systap warning: error get_vm_uplink_interface ${_sys_uplink}${N0_COLOR}"
		return 1
	fi

	_test_ifaces=$( get_nic_by_descr ${interface} )
	cbsdlogger NOTICE ${CBSD_APP}: init_systap: interfaces found with ${interface} desc: ${_test_ifaces}.
	mybridge=
	for _i in ${_test_ifaces}; do
		_is_bridge=$( /sbin/ifconfig ${_i} | /usr/bin/awk '/groups:/{print $2}' | /usr/bin/grep -o bridge )
		if [ "${_is_bridge}" = "bridge" ]; then
			cbsdlogger NOTICE ${CBSD_APP}: init_systap: the ${_i} interface is in the bridge group. bridge found
			mybridge="${_i}"
			break
		fi
	done

	if [ -z "${mybridge}" ]; then
		if ! mybridge=$( get_my_device bridge ${interface} ); then
			${ECHO} "${N1_COLOR}bstart init_systap warning: errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
			return 1
		fi
	fi

	_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
	_ret=$?

	_mytap=$( get_my_tap ${mybridge} )
	_ret=$?
	if [ ${_ret} -eq 1 ]; then
		cbsdlogger NOTICE ${CBSD_APP}: bstart init_systap warning: errmsg="Error:get_my_tap_for_${mybridge}: ${mybridge}"
		${ECHO} "${N1_COLOR}bstart init_systap warning: errmsg=\"Error:get_my_tap_for_${mybridge}: ${mybridge}\""
		return 1
	fi

	/sbin/ifconfig ${_mytap} description CBSDSYSTEM0

	# netwait

	link=
	count=1
	# set timeout to 5 seconds
	netwait_if_timeout=5

	${ECHO} "${N1_COLOR}init_systap: waiting for link: ${N2_COLOR}${_sys_uplink}${N1_COLOR}"

	while [ ${count} -le ${netwait_if_timeout} ]; do
		if output=`/sbin/ifconfig ${_sys_uplink} 2>/dev/null`; then
			link=`expr "${output}" : '.*[[:blank:]]status: \(no carrier\)'`
			if [ -z "${link}" ]; then
				break
			fi
		fi
		sleep 1
		count=$((count+1))
	done
}

# export ${dsk_size},${dsk_bsize},${dsk_realsize} variable
# $dsk_size can in form: "100M/200G"
# $dsk_bsize - size in bytes
# require: dsk_path as "dsk1.vhd" or $1 as full path
# require . tools
populate_dsk_size()
{
	local dsk_fullpath
	local tmp_zvol _zvol_pref _is_zvol

	if [ -n "${1}" ]; then
		dsk_fullpath="${1}"
	else
		dsk_fullpath="${jaildatadir}/${jname}-${jaildatapref}/${dsk_path}"
	fi

	dsk_size=0
	dsk_bsize=0
	dsk_realsize=

	if [ -f "${dsk_fullpath}" ]; then
		dsk_realsize=$( /usr/bin/du -sh ${dsk_fullpath} | /usr/bin/awk '{printf $1}' 2>/dev/null )
		dsk_bsize=$( /usr/bin/stat -f "%z" ${dsk_fullpath} 2>/dev/null )
	elif [ -h "${dsk_fullpath}" ]; then
		tmp_zvol=$( /usr/bin/readlink ${dsk_fullpath} 2>/dev/null )
		_zvol_pref=$( substr --pos=0 --len=10 --str=${tmp_zvol} )
		# not started with /dev/zvol ?
		[ "${_zvol_pref}" != "/dev/zvol/" ] && return 0
		_is_zvol=$( echo ${tmp_zvol} |/usr/bin/sed s:/dev/zvol/::g )
		dsk_bsize=$( /sbin/zfs get -Hp -o value volsize ${_is_zvol} )
	else
		# no such file or symlink
		return 0
	fi

	if conv2human "${dsk_bsize}"; then
		dsk_size=${convval}
	fi

	if [ -z "${dsk_size}" ]; then
		dsk_size=0
		return 0
	fi

	[ -n "${dsk_realsize}" ] && dsk_size="${dsk_realsize}/${dsk_size}"
}


# print to stdout core count by topology
# $1 - ${_sockets}
# $2 - ${_cores}
# $3 ${_threads}
get_vm_cores_by_topology()
{
	local _sockets _cores _threads _vm_cpus
	_sockets="${1}"
	_cores="${2}"
	_threads="${3}"

	[ -z "${_sockets}" -o -z "${_cores}" -o -z "${_threads}" ] && return 1

	_vm_cpus=$(( _sockets * _cores * _threads ))
	printf "${_vm_cpus}"
	return 0
}

###
fi
