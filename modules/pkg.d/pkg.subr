init_path()
{
	export PATH=/usr/local/bin:/usr/local/sbin:${PATH}

	PKG_STATIC_PATH=$( ${PKG_PRE} which pkg-static 2>/dev/null )

	[ ! -x "${PKG_STATIC_PATH}" ] && PKG_STATIC_PATH=$( ${PKG_PRE} which pkg 2>/dev/null )

	[ ! -x "${PKG_STATIC_PATH}" ] && err 1 "${N1_COLOR}No such pkg or pkg-static here${N0_COLOR}"

	# PKG_CMD defined in ${platform}.subr
	PKG_PATH="${PKG_CMD}"

	if [ ! -f "${path}${PKG_STATIC_PATH}" ]; then
		PKG_STATIC_PATH="${PKG_PATH}"
		${ECHO} "${N1_COLOR}First running pkg. Bootstrapping...${N0_COLOR}"
		pkg_bootstrap
		[ ! -f "${path}${PKG_PATH}" ] && err 1 "You have no pkg binary in PATH"
	fi

	#prefered for static version if exist
	[ ! -f "${PKG_STATIC_PATH}" ] && PKG_STATIC_PATH="${PKG_PATH}"

	PKGCONF_SKEL="${_MYDIR}/pkg.conf"
}

pkg_info()
{
	local _res
	/usr/bin/timeout 16 ${PKG_PRE} env ASSUME_ALWAYS_YES=yes ${PKG_STATIC_PATH} ${PKGARGS} info ${*}
	_res=$?
	return ${_res}
}

pkg_query()
{
	local _res
	${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} query ${*}
	_res=$?
	return ${_res}
}


pkg_remove()
{
	local _res
	${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} remove -y ${*}
	_res=$?
	return ${_res}
}

pkg_install()
{
	local _res
	${PKG_PRE} env IGNORE_OSVERSION=yes ${PKG_STATIC_PATH} ${PKGARGS} install -g -U -y ${*}
	_res=$?
	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && /bin/rm -rf ${path}/var/cache/pkg/*
	return ${_res}
}


pkg_update()
{
	local _res
	env IGNORE_OSVERSION=yes /usr/bin/timeout 60 ${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} update -f ${*}
	_res=$?
	return ${_res}
}

pkg_clean()
{
	local _res
	${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} clean -ya
	_res=$?
	return ${_res}
}

pkg_upgrade()
{
	local _res
	#    ${PKG_STATIC_PATH} ${PKGARGS} update -f
	${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} upgrade -g -U -y ${*}
	_res=$?
	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && /bin/rm -rf ${path}/var/cache/pkg/*
	return ${_res}
}

# $1 - destination file
pkg_set_conf()
{
	[ -z "$1" ] && err 1 "pkg_set_conf: please set output file"
	[ -z "${pkgsite}" ] && err 1 "pkg_set_conf: please set pkgsite"
	/usr/bin/sed s%PKGSITE%${pkgsite}%g ${PKGCONF_SKEL} > ${1}
}

# First start of pkg
pkg_bootstrap()
{
	local _res _ret

	set_bsdenv_by_path -p ${path} -v ${ver}

	if TMPDIR=/dev/null ASSUME_ALWAYS_YES=yes \
		IGNORE_OSVERSION=yes \
		PACKAGESITE=file:///nonexistent \
		/usr/bin/timeout 30 ${PKG_PRE} ${PKG_STATIC_PATH} info -x 'pkg(-devel)?$' >/dev/null 2>&1; then
			unset_bsdenv
			return 0
	fi

	printf "${N1_COLOR}pkg: [${N2_COLOR}bootstrap...${N1_COLOR}${N0_COLOR}"

	_res=$( /usr/bin/timeout 30 ${PKG_PRE} env ASSUME_ALWAYS_YES=yes env IGNORE_OSVERSION=yes ${PKG_STATIC_PATH} ${PKGARGS} bootstrap -f 2>&1 )
	_ret=$?

	if [ ${_ret} -eq 0 ]; then
		printf "${N2_COLOR}Ok${N1_COLOR}]${N0_COLOR}"
		echo
	else
		printf "${N1_COLOR}Ok${N1_COLOR}]${N0_COLOR}"
		echo
		echo "${_res}"
		unset_bsdenv
		return ${_ret}
	fi

	pkg_update
	unset_bsdenv
	return ${_ret}
}

# $1 - listfile
install_from_list()
{
	local _res
	[ ! -f "${1}" ] && err 1 "${N1_COLOR}No such list: ${N2_COLOR}${1}${N0_COLOR}"
	PKGLIST=$( /bin/cat ${1} |/usr/bin/xargs )
	printf "install for ${PKGLIST}...${N1_COLOR}]${N0_COLOR}\n"
	${PKG_PRE} ${PKG_STATIC_PATH} install ${PKGLIST}
	_res=$?
	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && /bin/rm -rf ${path}/var/cache/pkg/*

	/usr/local/bin/cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
	/sbin/umount -f ${path}/dev
	unmountbase
	[ $delpkglist -eq 1 ] && /bin/rm -f ${pkglist}
	return ${_res}
}
