load_dsk_info()
{
	dsk_last_id=1
	local sqldelimer=" "

	unset dsklist

	for last_disk in $( /usr/bin/seq 1 16 ); do
		unset dsk_controller${last_disk}
	done

	eval $( cbsdsql ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,dsk_type,controller_id FROM bhyvedsk WHERE jname=\"${jname}\" | while read dsk_controller dsk_path dsk_slot dsk_type controller_id; do
		echo "export dsk_controller${dsk_last_id}=\"${dsk_controller}\""
		echo "export dsk_path${dsk_last_id}=\"${dsk_path}\""
		echo "export dsk_slot${dsk_last_id}=\"${dsk_slot}\""
		echo "export dsk_type${dsk_last_id}=\"${dsk_type}\""
		echo "export controller_id${dsk_last_id}=\"${controller_id}\""
		dsk_last_id=$(( dsk_last_id + 1 ))
	done ) || err 1 "${MAGENTA}Error while create disk map${NORMAL}"
}

# form for $new_dsk_controller
get_dsk_controller()
{
	local _input _retval
	local title=" Controller type for ${mtag} "
	hline=

	local menu_list="
		'virtio-blk'	'Virtio block storage'	''
		'ahci-hd'	'AHCI controller'	''
	" # END-QUOTE

	cbsd_menubox
	retval=$?

	new_dsk_controller=

	case $retval in
		${DIALOG_OK})
			new_dsk_controller="${mtag}"
			return 0
			;;
	esac

	return $retval
}

# form for $new_controller_id
get_controller_id()
{
	local _input _retval

	local title=" Select and attach to controller ${mtag} "
	hline=

	local menu_list="'0'	'no controller'	'Attach to BUS directrly'"
	[ -n "${new_controller_id}" ] && defaultitem="${new_controller_id}"

	. $BSDCFG_LIBE/$APP_DIR/include/bhyve-dskcontroller.subr
	load_ctr_info

	for last_ctr in $( /usr/bin/seq 1 16 ); do
		unset id name type count cache
		eval id="\$ctr_id$last_ctr"
		[ -z "${id}" ] && break
		eval ctr_name="\$ctr_name$last_ctr"
		eval ctr_type="\$ctr_type$last_ctr"
		eval ctr_count="\$ctr_count$last_ctr"
		eval ctr_cache="\$ctr_cache$last_ctr"

		menu_list="${menu_list} '${ctr_name}'	'${ctr_type}'	'count=${ctr_count},cache=${ctr_cache}'"
	done

	cbsd_menubox
	retval=$?
	new_controller_id=

	case ${retval} in
		${DIALOG_OK})
			new_controller_id="${mtag}"
			return 0
			;;
	esac

	return $retval
}

# form for $new_dsk_size
get_dsk_size()
{
	local _input _defsize="20g"

	f_dialog_title " image size "

	[ -n "${new_dsk_size}" ] && _defsize="${new_dsk_size}"

	f_dialog_input _input "Input size, eg: 20g" "${_defsize}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && new_dsk_size="${_input}"
}


# form for new dsk
# -c controller -d dskname (dsk1) -s 10g
add_dsk()
{
	local controller=
	local dsk=
	local size=
	local newdsk=
	local _res _msg

	while getopts "c:d:s:" opt; do
		case "$opt" in
			c) controller="${OPTARG}" ;;
			d) dsk="${OPTARG}" ;;
			s) size="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${controller}" ] && err 1 "${MAGENTA}Empty controller${NORMAL}"
	[ -z "${dsk}" ] && err 1 "${MAGENTA}Empty dsk${NORMAL}"
	[ -z "${size}" ] && err 1 "${MAGENTA}Empty size${NORMAL}"

	newdsk="${dsk}.vhd"

	_msg=$( bhyve_create_dsk -p ${data}/${newdsk} -s ${size} 2>&1 )
	_res=$?
	if [ ${_res} -ne 0 ]; then
		echo "bhyvedsk.subr error: Couldn't create the image file. ${_msg}"
		sleep 5
		return 1
	fi

	if [ -n "${controller}" ]; then
		cbsdsql ${jailsysdir}/${jname}/local.sqlite "INSERT INTO bhyvedsk ( jname,dsk_controller,dsk_path,dsk_slot ) VALUES ( \"${jname}\",\"${controller}\",\"${newdsk}\","0" )"
	else
		cbsdsql ${jailsysdir}/${jname}/local.sqlite "INSERT INTO bhyvedsk ( jname,dsk_path,dsk_slot ) VALUES ( \"${jname}\",\"${newdsk}\","0" )"
	fi

	return 0
}
