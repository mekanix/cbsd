#!/usr/local/bin/cbsd
#v11.1.2
MYARG=""
MYOPTARG="display header active human"
MYDESC="Operate with vm_packages database"
CBSDMODULE="sys"
ADDHELP="header=0 don't print header\n\
display= list by comma for column. Default: name,pkg_vm_cpus,pkg_vm_ram,pkg_vm_disk\n\
human= humanize output. Default: 1. 0 - conver convert 1g/20g to bytes\n"

. ${subr}

. ${cbsdinit}

. ${system}

[ -z "${display}" ] && display="name,pkg_vm_cpus,pkg_vm_ram,pkg_vm_disk"
[ -z "${human}" ] && human=1

#remove commas for loop action on header
mydisplay=$( echo ${display} | /usr/bin/tr ',' '  ' )

# upper for header
myheader=$( echo ${mydisplay} | /usr/bin/tr '[:lower:]' '[:upper:]' )

show_header()
{
	local _header="${BOLD}${myheader}${N0_COLOR}"
	[ ${header} -eq 1 ] && $ECHO ${_header}
}

# if $1 = "Unregister" then overwrite status to "Unregister"
populate_output_data()
{
	local _i _val

	_status=

	printf "${N0_COLOR}" # for column sort

	#populate values for in output string
	for _i in ${mydisplay}; do

		_val=""

		eval _val="\$$_i"

		if [ ${human} -eq 0 ]; then
			case "${_i}" in
				pkg_vm_ram|pkg_vm_disk)
					[ -z "${_val}" ] && continue
					if is_number ${_val}; then
						if conv2bytes ${_val}; then
							_val="${convval}"
						fi
					fi
					;;
			esac
		fi

		[ -z "${_val}" ] && _val="\-"
		printf "${_val} "
	done

	printf "\n"
}


# $1 - which file from. Eg: local
show_jaildata_from_sql()
{
	local _i

	#   set sqlfile for ". rcconf" including
	if [ -n "${1}" ]; then
		sqlfile="$1"
	else
		sqlfile="local"
	fi

	[ -n "${2}" ] && local jname="${2}"

	_sql="SELECT name,pkg_vm_cpus,pkg_vm_ram,pkg_vm_disk FROM vmpackages"
	cbsdsqlro ${sqlfile} ${_sql}| while read name pkg_vm_cpus pkg_vm_ram pkg_vm_disk; do
		populate_output_data
		${ECHO} ${_status}
	done
}


show_local()
{
	local _errcode _status

	show_header
	show_jaildata_from_sql local
}

show_vhid()
{
	show_local
}

#### MAIN
[ -z "${header}" ] && header=1
sqldelimer=" "
show_local | /usr/bin/column -t
