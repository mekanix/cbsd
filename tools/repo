#!/usr/local/bin/cbsd
#v11.1.7
MYARG="action"
# action=list,get,put
# source=src,obj,base,kernel,img
MYOPTARG="mode quiet arch target_arch ver sources name basename stable inter newjname usehelpers useconfig fromfile url"
MYDESC="Working with CBSD Repository"
ADDHELP="action can be: list, get, put
sources can be: src, obj, base, bhyve, kernel, img, helpers, modules\n
mode can be: check, upgrade\n\
stable=1 for RELENG_X\n\
ver=any for mode=list for show all version (no for cur. version only\n\
arch=any for mode=list for show all arch (no for cur. arch only\n\
inter=0 to prevent any questions and to accept answers by default\n\
newjname= for sources=img. Alternative jname for save\n\
fromfile= load arguments from ascii file\n\
url= specify URL sources, separated by comma for multiple values\n"

. ${subr}

url=
. ${cbsdinit}

. ${system}

[ -z "${cbsd_queue_name}" ] && cbsd_queue_name="/clonos/bases/"

origver="${ver}"
. ${buildconf}
# prefered for ver in arg
[ "${ver}" != "${origver}" -a -n "${origver}" ] && ver=${origver}

readconf buildworld.conf
. ${distdir}/universe.subr
. ${distdir}/fetch.subr

[ -f "${fromfile}" ] && . ${fromfile}

checkmd5()
{
	local _GOOD _OMD5 _RMD5 _i _FILE
	DIR=$1
	_GOOD=0

	for _i in $( /usr/bin/find ${DIR} -type f -depth 1 -name *.md5 -print); do
		_FILE=$( ${ECHO} ${_i} |/usr/bin/sed 's/\.md5//g' )
		_OMD5=$( /bin/cat ${_FILE}.md5 )
		_RMD5=$( /sbin/md5 -q ${_FILE} )
		[ "${_RMD5}" != "${_OMD5}" ] && _GOOD=$((_GOOD + 1))
	done

	return ${_GOOD}
}



checkrepo()
{
	local _i

	for _i in ${repo}; do
		[ -z $1 ] && printf "${N1_COLOR}Check for repository${N0_COLOR}: ${N2_COLOR}${_i}${N0_COLOR} ..."
		if fetchme -q 1 -u "${_i}/cbsd.index"; then
			/bin/cat "${TF}"
			exit 0
		else
			${ECHO} "${_i} Offline"
			exit 1
		fi
	done
}


getsrc()
{
	init_srcdir

	[ ! -f "${srcdir}/${DIR}/Makefile" -a $upgrade -ne 1 ] && err 1 "You already have ${ver}"

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO${N0_COLOR}:${N2_COLOR}${MYREPO}${N0_COLOR}"
		MIRROR="${MYREPO}/src_${ver}/mirror.html"
		fetchme -q 1 -u "${MIRROR}"
		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "${N1_COLOR}Found new mirror for ${ver}${N0_COLOR}:${N2_COLOR}${MYREPO}${N0_COLOR}"
		fi
		fetchme -o ${MYDIR}/src.txz -u ${MYREPO}/${DIR}/src.txz
		[ $? -eq 0 ] || ${ECHO} "${N1_COLOR}Not found: ${N2_COLOR}${MYREPO}/${DIR}/src.txz${N0_COLOR}" && icontinue
		fetchme -o ${MYDIR}/src.txz.md5 -u ${MYREPO}/${DIR}/src.txz.md5
		[ $? -eq 0 ] || ${ECHO} "${N1_COLOR}Not found: ${N2_COLOR}${MYREPO}/${DIR}/src.txz.md5${N0_COLOR}" && continue
	done

	[ -f "${MYDIR}/src.txz" -a -f "${MYDIR}/src.txz.md5" ] || err 1 "No sources found"

	if checkmd5 ${MYDIR}; then
		${ECHO} "${N1_COLOR}MD5sum correct.${N0_COLOR}"
	else
		err 1 "${N1_COLOR}MD5sum incorrect.${N0_COLOR}"
	fi

	ARCHIVE="${workdir}/tmp/src_${ver}.txz"
	[ -f "${ARCHIVE}" ] && /bin/rm -f ${ARCHIVE}

	${ECHO} "${N1_COLOR}Extracting...${N0_COLOR}"
	cd $workdir/tmp
	set -e
	/usr/bin/tar xfz ${MYDIR}/src.txz
	set +e
	/bin/rm -f ${MYDIR}/src.txz
	/bin/mkdir -p ${srcdir}/src_${ver}
	/bin/mv ${workdir}/tmp/src_${ver} ${srcdir}/
	${ECHO} "${N1_COLOR}Done...${N0_COLOR}"
	DT=$( /bin/date "+%Y%m%d" )
}

register_fetched_base()
{
	#idx platform name arch ver stable elf date
	baseelf=
	baseelf=$( ${miscdir}/elf_tables --ver ${BASE_DIR}/bin/sh 2>/dev/null )

	local source="${1}"
	[ -z "${source}" ] && source="unknown"

	[ -z "${baseelf}" ] && baseelf="0"
	[ -z "${TARGET_ARCH}" ] && TARGET_ARCH="${arch}"

	strpos --str="${ver}" --search="."

	pos=$?
	if [ ${pos} -eq 0 ]; then
		stable=1
	else
		stable=0
	fi

	register_base arch=${arch} ver=${ver} target_arch=${TARGET_ARCH} stable=${stable} platform="${platform}" source="${source}"
}


getbase()
{
	local _srcmd5_found _src_found _majorver _release _rel_postfix
	local win_mirror win_rate t_size
	local _mirror_num=0 _mirror_cur=0

	if [ -z "${basename}" ]; then
		BDIR="${basejailpref}_${arch}_${ver}"
	else
		BDIR="${basejailpref}_${basename}_${arch}_${ver}"
	fi

	if [ -n "${url}" ]; then
		OIFS="${IFS}"
		IFS=","
		for i in ${url}; do
			if [ -z "${i}" ]; then
				BSDBASE_DISTSITE="${i}"
			else
				BSDBASE_DISTSITE="${BSDBASE_DISTSITE} ${i}"
			fi
		done
		IFS="${OIFS}"
	else
		case "${platform}" in
			DragonFly)
				err 1 "${N1_COLOR}${platform} unsupported yet${N0_COLOR}"
				;;
			FreeBSD)
				case "${ver}" in
					13*)
						# HEAD placed at /pub/FreeBSD/snapshots/amd64/XX.0-CURRENT/
						_release="snapshots"
						_rel_postfix="CURRENT"
						URL_HIER="${arch}/${target_arch}/13.0"
						;;
					*)
						# RELEASES placed at /pub/FreeBSD/releases/${URL_HIER}-RELEASE/base.txz"
						_release="releases"
						_rel_postfix="RELEASE"
						URL_HIER="${arch}/${target_arch}/${ver}"
						;;
				esac
				BSDBASE_DISTSITE="https://download.freebsd.org/ftp/${_release}/${URL_HIER}-${_rel_postfix}/base.txz http://ftp.freebsd.org/pub/FreeBSD/${_release}/${URL_HIER}-${_rel_postfix}/base.txz https://pub.allbsd.org/pub/FreeBSD/${_release}/${URL_HIER}-${_rel_postfix}/base.txz"
				;;
			HardenedBSD)
				# Assume HBSD always in stable=1: at the moment (2018-01-17) doesn't have
				# /hardenedbsd-X.Y- url. So, adduct ver version to major version for repo hier
				_majorver=${ver%%.*}
				URL_HIER="${arch}/${target_arch}/hardenedbsd-${_majorver}-stable-LAST"
				BSDBASE_DISTSITE="https://pub.allbsd.org/pub/HardenedBSD/releases/${URL_HIER}/base.txz https://installer.hardenedbsd.org/pub/HardenedBSD/releases/${URL_HIER}/base.txz http://jenkins.hardenedbsd.org/builds/HardenedBSD-${_majorver}-STABLE-${target_arch}-LATEST/base.txz"
				;;
		esac
	fi

	if [ -x "${BASE_DIR}/bin/sh" ]; then
		[ ${upgrade} -eq 1 ] || err 1 "${N1_COLOR}You already have ${ver}. Use mode=upgrade for upgrade${N0_COLOR}"
		${CHFLAGS_CMD} -R noschg ${BASE_DIR}
	fi

	strpos --str="${ver}" --search="."

	pos=$?
	if [ ${pos} -eq 0 ]; then
		stable=1
	else
		stable=0
	fi

	init_target_arch

	trap "cleanup_bases" HUP INT ABRT BUS TERM EXIT
	register_base arch=${arch} ver=${ver} target_arch=${TARGET_ARCH} stable=${stable} platform="${platform}"

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		[ "${cbsd_queue_name}" != "none" ] && cbsd_queue_sys cbsd_queue_name=${cbsd_queue_name} cmd=repo elf="-" id=base${ver}-${arch}-${stable} platform=${platform} arch=${arch} targetarch=${targetarch} ver=${ver} stable="${stable}" date="-" status=1
	fi

	if [ -x "${BASE_DIR}/bin/sh" ]; then
		base_status_is_maintenance_soft
	else
		base_status_is_maintenance_hard
	fi

	win_mirror=
	win_rate=0
	t_size=0

	if [ "${fbsdrepo}" = "1" ]; then
		${ECHO} "${N1_COLOR}Scanning for fastest mirror...${N0_COLOR}"

		_mirror_num=$( echo "${BSDBASE_DISTSITE}" | /usr/bin/wc -w | /usr/bin/awk {'printf $1'} )

		local max_url_len=0
		local cur_url_len=0
		local free_len=0

		# determine longest url
		for i in ${BSDBASE_DISTSITE}; do
			cur_url_len=$( strlen ${i} )
			[ ${cur_url_len} -gt ${max_url_len} ] && max_url_len=${cur_url_len}
		done

		max_url_len=$(( max_url_len + 1 ))

		for i in ${BSDBASE_DISTSITE}; do
			_mirror_cur=$(( _mirror_cur + 1 ))
			cur_url_len=$( strlen ${i} )
			free_len=$(( max_url_len - cur_url_len ))
			printf " ${H1_COLOR}* ${H2_COLOR}[ %-5s ] ${N2_COLOR}${i}${N0_COLOR}:%-${free_len}s" ${_mirror_cur}/${_mirror_num}
			t_size=$( /usr/bin/timeout -s HUP 3 ${bindir}/cfetch -s 1 -o /dev/null -u ${i} 2>/dev/null )
			if [ -z "${t_size}" ]; then
				${ECHO} "${W1_COLOR}failed${N0_COLOR}"
			else
				${ECHO} "${H5_COLOR}${t_size}${N0_COLOR}"
				if ! is_number ${t_size}; then
					if [ ${t_size} -gt ${win_rate} ]; then
						win_rate=${t_size}
						win_mirror="${i}"
					fi
				else
					${ECHO} "${W1_COLOR}failed, no size${N0_COLOR}"
				fi
			fi
		done
		[ -n "${win_mirror}" ] && ${ECHO} "${H3_COLOR} Winner: ${N2_COLOR}${win_mirror}${N0_COLOR}"
		iso_site="${win_mirror} ${BSDBASE_DISTSITE}"
	fi

	if [ "${fbsdrepo}" = "1" -a -z "${basename}" ]; then
		## Official fbsd repo
		${ECHO} "${N1_COLOR}Looking for official ${platform} mirror:${N0_COLOR}"
		ARCHIVE="${MYDIR}/base.txz"
		for MIRROR in ${iso_site}; do
			fetchme -u ${MIRROR} -o ${ARCHIVE}
			if [ $? -eq 0 ]; then
				break
			else
				[ -r ${ARCHIVE} ] && /bin/rm -f ${ARCHIVE}
			fi
		done
		if [ -r ${ARCHIVE} ]; then
			printf "\n${N1_COLOR}Extracting base...${N0_COLOR}\n"
			[ ! -d "${BASE_DIR}" ] && mkdir -p ${BASE_DIR}
			cd ${BASE_DIR}
			set -e
			/usr/bin/tar xfz ${ARCHIVE}
			set +e
			/bin/rm -f ${ARCHIVE}
			# fetch lib32 only for amd64
			if [ "${arch}" = "amd64" -a -z "${url}" ]; then
				if [ "${platform}" = "FreeBSD" ]; then
					BSDBASE_DISTSITE="https://download.freebsd.org/ftp/${_release}/${URL_HIER}-${_rel_postfix}/lib32.txz http://ftp.freebsd.org/pub/FreeBSD/${_release}/${URL_HIER}-${_rel_postfix}/lib32.txz https://pub.allbsd.org/pub/FreeBSD/${_release}/${URL_HIER}-${_rel_postfix}/lib32.txz"

					#BSDBASE_DISTSITE="$MIRROR/pub/FreeBSD/releases/${URL_HIER}-RELEASE/lib32.txz"
					ARCHIVE="${MYDIR}/lib32.txz"
					for i in ${BSDBASE_DISTSITE}; do
						fetchme -u ${i} -o ${ARCHIVE}
						if [ $? -eq 0 ]; then
							break
						else
							[ -r ${ARCHIVE} ] && /bin/rm -f ${ARCHIVE}
						fi
					done
					if [ -r ${ARCHIVE} ]; then
						printf "\n${N1_COLOR}Extracting lib32...${N0_COLOR}\n"
						cd ${BASE_DIR}
						set -e
						/usr/bin/tar xfz ${ARCHIVE}
						set +e
						/bin/rm -f ${ARCHIVE}
					else
						printf "${N2_COLOR} Lib32 not found${N0_COLOR}\n"
					fi
				fi
			fi
			preparebase dst=${BASE_DIR}
			register_fetched_base ${MIRROR}
			# CBSD QUEUE
			if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
				baseelf=
				baseelf=$( ${miscdir}/elf_tables --ver ${BASE_DIR}/bin/sh 2>/dev/null )
				date=$( /bin/date +%s )
				[ "${cbsd_queue_name}" != "none" ] && cbsd_queue_sys cbsd_queue_name=${cbsd_queue_name} cmd=update id=base${ver}-${arch}-${stable} elf=${baseelf}  platform=${platform} ver=${ver} rev="${SCM_REV}" date="${date}" stable="${stable}" status=1
				[ "${cbsd_queue_name}" != "none" ] && cbsd_queue_sys cbsd_queue_name=${cbsd_queue_name} cmd=repo id=base${ver}-${arch}-${stable} status=2
			fi

			${ECHO} "${N1_COLOR}Done...${N0_COLOR}"
			return 0
		fi
		printf "${N2_COLOR} Not found${N0_COLOR}\n"
		### Official fbsd repo end ###
	fi

	# _srcmd5_found=0
	_src_found=0

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO: ${N2_COLOR}${MYREPO}${N0_COLOR}"
		MIRROR="${MYREPO}/releases/${URL_HIER}/mirror.html";
		fetchme -q1 -u ${MIRROR} -o ${TF}

		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "${N1_COLOR}Found new mirror for ${ver}: ${N2_COLOR}${MYREPO}${N0_COLOR}"
		fi

		if [ -z "${basename}" ]; then
			${ECHO} "${N1_COLOR}Looking for: ${N2_COLOR}${MYREPO}/releases/${URL_HIER}/base.txz${N0_COLOR}"
			fetchme -o ${MYDIR}/base_${arch}_${target_arch}_${ver}.txz -u ${MYREPO}/releases/${URL_HIER}/base.txz

			if [ $? -ne 0 ]; then
				${ECHO} "${N1_COLOR}Base not found: ${N2_COLOR}${MYREPO}/releases/${URL_HIER}/base.txz${N0_COLOR}"
				continue
			else
				_src_found=1
			fi
			_srcmd5_found=1
		else
			${ECHO} "${N1_COLOR}Looking for: ${N2_COLOR}${MYREPO}/releases/${URL_HIER}/base_${basename}.txz${N0_COLOR}"
			fetchme -o ${MYDIR}/base_${basename}_${arch}_${target_arch}_${ver}.txz -u ${MYREPO}/releases/${URL_HIER}/base_${basename}.txz

			if [ $? -ne 0 ]; then
				${ECHO} "${N1_COLOR}Base not found: ${N2_COLOR}${MYREPO}/releases/${URL_HIER}/base_${basename}.txz${N0_COLOR}"
				continue
			else
				_src_found=1
			fi

			_srcmd5_found=1
		fi

		[ ${_srcmd5_found} -eq 1 -a ${_src_found} -eq 1 ] && break
	done

	[ ${_src_found} -ne 1 ] && err 1 "${N1_COLOR}Not found data${N0_COLOR}"

	${ECHO} "${N1_COLOR}Extracting...${N0_COLOR}"
	[ ! -d "${BASE_DIR}" ] && mkdir -p ${BASE_DIR}
	cd ${BASE_DIR}

	if [ -z "${basename}" ]; then
		set -e
		tar xfz ${MYDIR}/base_${arch}_${target_arch}_${ver}.txz
		set +e
	else
		set -e
		tar xfz ${MYDIR}/base_${basename}_${arch}_${target_arch}_${ver}.txz
		set +e
	fi

	register_fetched_base ${MIRROR}
	cleanup_bases

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		baseelf=
		baseelf=$( ${miscdir}/elf_tables --ver ${BASE_DIR}/bin/sh 2>/dev/null )
		date=$( /bin/date +%s )
		[ "${cbsd_queue_name}" != "none" ] && cbsd_queue_sys cbsd_queue_name=${cbsd_queue_name} cmd=update id=base${ver}-${arch}-${stable} elf=${baseelf}  platform=${platform} ver=${ver} rev="${SCM_REV}" date="${date}" stable="${stable}" status=1
		[ "${cbsd_queue_name}" != "none" ] && cbsd_queue_sys cbsd_queue_name=${cbsd_queue_name} cmd=repo id=base${ver}-${arch}-${stable} status=2
	fi

	${ECHO} "${N1_COLOR}Done...${N0_COLOR}"

	return 0
}


getobj()
{
	if [ -z "${basename}" ]; then
		DST="${srcdir}/obj_${arch}_${ver}"
	else
		DST="${srcdir}/obj_${basename}_${arch}_${ver}"
	fi

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO:${N2_COLOR}${MYREPO}${N0_COLOR}"
		if [ -z "${basename}" ]; then
			MIRROR="${MYREPO}/obj_${arch}_${ver}/mirror.html";
		else
			MIRROR="${MYREPO}/obj_${basename}_${arch}_${ver}/mirror.html";
		fi

		if [ -d "${DST}" ]; then
			[ $upgrade -eq 1 ] || err 1 "You already have ${ver}"
			removeobj ver=${ver} arch=${arch}
		fi

		fetchme -q1 -u ${MIRROR} -o ${TF}

		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "Found new mirror for ${basename}: ${MYREPO}"
		fi

		if [ -z "${basename}" ]; then
			fetchme -o ${MYDIR}/obj_${arch}_${ver}.txz -u ${MYREPO}/${DIR}/obj_${arch}_${ver}.txz
			[ $? -eq 0 ] || continue
			fetchme -q1 -o ${MYDIR}/obj_${arch}_${ver}.txz.md5 -u ${MYREPO}/${DIR}/obj_${arch}_${ver}.txz.md5
			[ $? -eq 0 ] || continue
		else
			fetchme -o ${MYDIR}/obj_${basename}_${arch}_${ver}.txz -u ${MYREPO}/${DIR}/obj_${basename}_${arch}_${ver}.txz
			[ $? -eq 0 ] || continue
			fetchme -q1 -o ${MYDIR}/obj_${basename}_${arch}_${ver}.txz.md5 -u ${MYREPO}/${DIR}/obj_${basename}_${arch}_${ver}.md5
			[ $? -eq 0 ] || continue
		fi
	done

	if [ -z "${basename}" ]; then
		[ ! -f "${MYDIR}/obj_${arch}_${ver}.txz.md5" -a ! -f "${MYDIR}/obj_${arch}_${ver}.txz" ] && err 1 "No sources found"
	else
		[ ! -f "${MYDIR}/obj_${basename}_${arch}_${ver}.txz.md5" -a ! -f "${MYDIR}/obj_${basename}_${arch}_${ver}.txz" ] && err 1 "No sources found"
	fi

	if checkmd5 ${MYDIR}; then
		${ECHO} "MD5sum correct."
	else
		err 1 "MD5sum incorrect."
	fi

	/bin/rm -f ${MYDIR}/obj_${arch}_${ver}.txz.md5

	${ECHO} "Extracting..."
	cd $srcdir
	set -e
	tar xfz ${MYDIR}/obj_${arch}_${ver}.txz
	set +e
	rm -f ${MYDIR}/obj_${arch}_${ver}.txz
	${ECHO} "Done..."
}


getkernel()
{
	local name KERNNAME

	if [ -n "${name}" -a "${name}" != "GENERIC" ]; then
		KERNNAME="-${name}"
	else
		KERNNAME="-GENERIC"
	fi

	URL_HIER="${arch}/${target_arch}/${ver}"

	if [ -d "${KERNEL_DIR}" ]; then
		[ $upgrade -ne 1 ] && err 1 "${N1_COLOR}You already have kernel ${name} for ${ver}${N0_COLOR}"
		removekernel ver=${ver} arch=${arch} name=${name}
	fi

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO: ${N2_COLOR}${MYREPO}${N0_COLOR}"
		MIRROR="${MYREPO}/releases/${URL_HIER}/mirror.html"
		fetchme -q1 -u ${MIRROR} -o ${TF}

		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "${N1_COLOR}Found new mirror for ${ver}: ${N2_COLOR}${MYREPO}${N0_COLOR}"
		fi

		${ECHO} "${N1_COLOR}Looking for: ${N2_COLOR}${MYREPO}/releases/${URL_HIER}/kernel${KERNNAME}.txz${N0_COLOR}"
		fetchme -o ${MYDIR}/kernel_${name}_${arch}_${ver}.txz -u ${MYREPO}/releases/${URL_HIER}/kernel${KERNNAME}.txz
		[ $? -eq 0 ] || continue
		# fetchme -q1 -o ${MYDIR}/kernel_${name}_${arch}_${ver}.txz.md5 -u ${MYREPO}/${DIR}/kernel_${name}_${arch}_${ver}.txz.md5
		# [ $? -eq 0 ] || continue
	done

	[ ! -f "${MYDIR}/kernel_${name}_${arch}_${ver}.txz" ] && err 1 "${N1_COLOR}No such sources:${N2_COLOR}${MYDIR}/kernel_${name}_${arch}_${ver}.txz${N0_COLOR}"

	# if checkmd5 ${MYDIR}; then
	# ${ECHO} "${N1_COLOR}MD5 sum: ${N2_COLOR}correct${N0_COLOR}"
	# else
	# err 1 "${N1_COLOR}MD5 sum: ${N2_COLOR}incorrect${N0_COLOR}"
	# exit 1
	# fi

	# /bin/rm -f ${MYDIR}/kernel_${name}_${arch}_${ver}.txz.md5

	${ECHO} "${N1_COLOR}Extracting...${N0_COLOR}"
	[ ! -d "${KERNEL_DIR}" ] && mkdir -p ${KERNEL_DIR}
	cd $KERNEL_DIR
	set -e
	tar xfz ${MYDIR}/kernel_${name}_${arch}_${ver}.txz
	set +e
	rm -f ${MYDIR}/kernel_${name}_${arch}_${ver}.txz
	${ECHO} "${N1_COLOR}Done...${N0_COLOR}"
}


getimg()
{
	local URL_HIER DST

	[ -z "${newjname}" ] && newjname="${name}"

	DST="${importdir}/${newjname}.img"
	URL_HIER="${arch}/${target_arch}/${ver}/${name}"

	if [ -f "${DST}" ]; then
		getyesno "You already have ${DST}. Remove them?"
		if [ $? -eq 0 -o $? -eq 3 ]; then
			/bin/rm -f ${DST}
		else
			err 1 "${N1_COLOR}You already have: ${N2_COLOR}${DST}${N0_COLOR}"
		fi
	fi

	jstatus jname=${newjname} > /dev/null 2>&1
	[ $? -ne 0 ] && err 1 "${N1_COLOR}You already have ${N2_COLOR}${newjname}${N1_COLOR} jail. Remove it or use ${N2_COLOR}newjname=${N0_COLOR}"

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO:${N2_COLOR} ${MYREPO}"
		MIRROR="${MYREPO}/img/${URL_HIER}/mirror.html"
		fetchme -q1 -u ${MIRROR} -o ${TF}

		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "${N1_COLOR}Found new mirror for ${name} ${N0_COLOR}: ${MYREPO}"
		fi

		${ECHO} "${N1_COLOR}Fetching ${name} jail: ${N2_COLOR}${MYREPO}/${DIR}${N1_COLOR}${N0_COLOR}"
		fetchme -o ${DST} -u ${MYREPO}/img/${URL_HIER}/${name}.img

		[ $? -eq 0 ] || continue
	done

	[ ! -f "${DST}" ] && err 1 "No such remote file or network problem"
}

getbhyve()
{
	local URL_HIER DST

	[ -z "${name}" ] && err 1 "${N1_COLOR}Empty name=${N0_COLOR}"

	[ -z "${newjname}" ] && newjname="${name}"

	DST="${importdir}/${newjname}.img"

	if [ -f "${DST}" ]; then
		getyesno "You already have ${DST}. Remove them?"
		if [ $? -eq 0 -o $? -eq 3 ]; then
			/bin/rm -f ${DST}
		else
			err 1 "${N1_COLOR}You already have: ${N2_COLOR}${DST}${N0_COLOR}"
		fi
	fi

	jstatus jname=${newjname} > /dev/null 2>&1
	[ $? -ne 0 ] && err 1 "${N1_COLOR}You already have ${N2_COLOR}${newjname}${N1_COLOR} vm."

	for MYREPO in ${repo}; do
		${ECHO} "${N1_COLOR}REPO:${N2_COLOR} ${MYREPO}"
		MIRROR="${MYREPO}/bhyve/${name}/mirror.html"
		fetchme -q1 -u ${MIRROR} -o ${TF}

		if [ $? -eq 0 ]; then
			MYREPO=$( /bin/cat ${TF} )
			${ECHO} "${N1_COLOR}Found new mirror for ${name} ${N0_COLOR}: ${MYREPO}"
		fi

		${ECHO} "${N1_COLOR}Fetching ${name} jail: ${N2_COLOR}${MYREPO}/${DIR}${N1_COLOR}${N0_COLOR}"
		fetchme -o ${DST} -u ${MYREPO}/bhyve/${name}.img

		[ $? -eq 0 ] || continue
	done

	[ ! -f "${DST}" ] && err 1 "No such remote file or network problem"
}


gethelpers()
{
	DST="${sharedir}/helpers"

	[ ! -d "${DST}" ] && mkdir -p ${DST}

	MIRROR="https://boot.bsdstore.ru/helpers"

	if [ -z "${name}" ]; then
		fetchme -q1 -u ${MIRROR}/helpersls -o ${ftmpdir}/helpers.$$.list
		[ $? -ne 0 ] && err 1 "${N1_COLOR}Error fetching for: ${N2_COLOR}helper list${N0_COLOR}"
		for i in $( /bin/cat ${ftmpdir}/helpers.$$.list ); do
			${ECHO} "${N1_COLOR}Get helpers: ${N2_COLOR}${i}${N0_COLOR}"
			if [ "${mode}" = "upgrade" ]; then
				repo action=get sources=helpers name=${i} mode=upgrade
			else
				repo action=get sources=helpers name=${i}
			fi
		done
		/bin/rm -f ${ftmpdir}/helpers.$$.list
		exit 0
	fi

	[ ! -d "${tmpdir}/helpers" ] && mkdir -p ${tmpdir}/helpers
	fetchme -q1 -u ${MIRROR}/${name}.tgz -o ${tmpdir}/helpers/helpers_${name}.$$.tgz

	if [ $? -eq 0 ]; then
		if [ -d "${DST}/${name}" -a "${mode}" = "upgrade" ]; then
			rm -rf $DST/${name}
		elif [ -d "${DST}/${name}" ]; then
			rm -f ${tmpdir}/helpers/helpers_${name}.$$.tgz
			rmdir ${tmpdir}/helpers
			err 1 "${N1_COLOR}Helpers already exist: ${N2_COLOR}${name}${N1_COLOR}. Use mode=upgrade for upgrading.${N0_COLOR}"
		fi
		mkdir ${DST}/${name}
		set -e
		tar xfz ${tmpdir}/helpers/helpers_${name}.$$.tgz -C ${DST}/${name}
		set +e
		rm -f ${tmpdir}/helpers/helpers_${name}.$$.tgz
	fi

	rmdir ${tmpdir}/helpers
}

getmodules()
{
	DST="${moduledir}"

	[ ! -d "${DST}" ] && /bin/mkdir -p ${DST}

	MIRROR="https://boot.bsdstore.ru/modules"

	if [ -z "${name}" ]; then
		fetchme -q1 -u ${MIRROR}/modulesls -o ${ftmpdir}/modules.$$.list
		[ $? -ne 0 ] && err 1 "${N1_COLOR}Error fetching for: ${N2_COLOR}modules list${N0_COLOR}"
		for i in $( /bin/cat ${ftmpdir}/modules.$$.list ); do
			${ECHO} "${N1_COLOR}Get modules: ${N2_COLOR}${i}${N0_COLOR}"
			if [ "${mode}" = "upgrade" ]; then
				repo action=get sources=modules name=${i} mode=upgrade
			else
				repo action=get sources=modules name=${i}
			fi
		done
		/bin/rm -f ${ftmpdir}/modules.$$.list
		exit 0
	fi

	[ ! -d "${tmpdir}/modules" ] && /bin/mkdir -p ${tmpdir}/modules
	fetchme -q1 -u ${MIRROR}/${name}.tgz -o ${tmpdir}/modules/modules_${name}.$$.tgz

	if [ $? -eq 0 ]; then
		if [ -d "${DST}/${name}" -a "${mode}" = "upgrade" ]; then
			/bin/rm -rf $DST/${name}
		elif [ -d "${DST}/${name}" ]; then
			/bin/rm -f ${tmpdir}/modules/modules_${name}.$$.tgz
			/bin/rmdir ${tmpdir}/modules
			err 1 "${N1_COLOR}modules already exist: ${N2_COLOR}${name}${N1_COLOR}. Use mode=upgrade for upgrading.${N0_COLOR}"
		fi
		mkdir ${DST}/${name}
		set -e
		tar xfz ${tmpdir}/modules/modules_${name}.$$.tgz -C ${DST}/${name}
		set +e
		rm -f ${tmpdir}/modules/modules_${name}.$$.tgz
	fi

	/bin/rmdir ${tmpdir}/modules
}



#### MAIN ####
[ -z "${quiet}" ] && quiet=0
[ -z "${upgrade}" ] && upgrade=0
[ -z "${usehelpers}" ] && usehelpers="0"
[ -z "${useconfig}" ] && useconfig="1"

TF="${ftmpdir}/test.$$"
MYDIR="${workdir}/tmp/src.$$"
[ -z "${inter}" ] && inter=1

[ -z "${action}" ] && err 1 "Give me action"

case "${mode}" in
	"upgrade")
		upgrade=1
		;;
esac

init_target_arch
init_supported_arch

case "${action}" in
	"ping")
		if [ $quiet -eq 1 ]; then
			checkrepo quiet
		else
			checkrepo
		fi
		;;
	"list")
		for i in ${repo}; do
			if fetchme -q 1 -u "${i}/${sources}ls.v2"; then
				[ ${quiet} -ne 1 ] && ${ECHO} "${N1_COLOR}Available sources on ${N2_COLOR}$i:${N0_COLOR}"
				case "${sources}" in
					"bhyve")
						/bin/cat ${TF}
						;;
				*)
					if [ "${ver}" = "any" ]; then
						ver="[[:alnum:]]"
					else
						[ -z "${ver}" ] && ver=$( /sbin/sysctl -n kern.osrelease | /usr/bin/cut -d "-" -f1 )
					fi
					if [ "${arch}" = "any" ]; then
						arch="[[:alnum:]]"
					else
						[ -z "${arch}" ] && arch=$( /sbin/sysctl -n hw.machine_arch )
					fi
					${GREP_CMD} -E ${arch}_${ver} ${TF} | /usr/bin/cut -d "|" -f2-5
					;;
				esac
				/bin/rm -f ${TF}
			fi
		done
		;;
	"get")
		[ -z "${sources}" ] && err 1 "Give me sources"
		case "${sources}" in
			"src")
				init_basedir
				init_kerneldir
				DIR="src_${ver}"
				DST="${srcdir}/src_${ver}"
				LOCKFILE=${DST}.lock
				makelock ${LOCKFILE} "rm -f ${TF}; /bin/rm -rf ${MYDIR}" safe
				mkdir -p ${MYDIR}
				getsrc
				;;
			"base")
				# LOCKFILE=${SRC}.lock
				# makelock $LOCKFILE "rm -f ${TF}; /bin/rm -rf ${MYDIR}" safe
				init_basedir
				init_kerneldir

				# make base lock
				echo $$ > ${BASE_DIR_LOCKFILE}
				trap "rm -f ${TF} ${BASE_DIR_LOCKFILE}; /bin/rm -rf ${MYDIR}"
				/bin/mkdir -p ${MYDIR}
				getbase
				;;
			"obj")
				if [ -z "${basename}" ]; then
					DIR="obj_${arch}_${ver}";
				else
					DIR="obj_${basename}_${arch}_${ver}";
				fi
				init_basedir
				init_kerneldir
				SRC="${srcdir}/src_${ver}"
				LOCKFILE=${SRC}.lock
				makelock $LOCKFILE "rm -f ${TF}; /bin/rm -rf ${MYDIR}" safe
				mkdir -p ${MYDIR}
				getobj
				;;
			"kernel")
				# [ -z "${name}" ] && name="GENERIC"
				# LOCKFILE=${SRC}.lock
				# makelock $LOCKFILE "rm -f ${TF}; /bin/rm -rf ${MYDIR}" safe
				init_basedir
				init_kerneldir
				trap "rm -f ${TF}; /bin/rm -rf ${MYDIR}"
				mkdir -p ${MYDIR}
				getkernel
				;;
			"img")
				[ -z "${name}" ] && err 1 "Give me name"
				LOCKFILE="${jaildir}/${name}.lock"
				makelock ${LOCKFILE} "rm -f ${TF}; /bin/rm -rf ${MYDIR}"
				/bin/mkdir -p ${MYDIR}
				getimg
				if [ "${usehelpers}" = "1" ]; then
					${ECHO} "${N1_COLOR}Use img helpers: ${N2_COLOR}yes${N0_COLOR}"
					# && gethelpers ${name} ${name}
				else
					${ECHO} "${N1_COLOR}Use img helpers: ${N2_COLOR}no${N0_COLOR}"
				fi
				${ECHO} "${N1_COLOR}Done... Importing...${N0_COLOR}"
				if [ -n "${newjname}" ]; then
					name="${newjname}"
					jimport jname=${name} newjname="${name}"
				else
					jimport jname=${name}
				fi
				if [ -f "${importdir}/${name}.img" ]; then
					${ECHO} "${N1_COLOR}Import complete${N0_COLOR}"
					getyesno "Do you want to remove source image ${importdir}/${name}.img ?"
					[ $? -eq 0 -o $? -eq 3 ] && /bin/rm -f ${importdir}/${name}.img
				fi

				if [ "${usehelpers}" = "1" ]; then
					if [ -r ${jailsysdir}/${name}/bin/bootstrap.sh -a -f ${jailsysdir}/${name}/bin/forms.sqlite ]; then
						jname="${name}"
						. ${jrcconf}
						. ${distdir}/jcreate.subr
						export_jail_data_for_external_hook
						imghelper bootstrap=${jailsysdir}/${jname}/bin/bootstrap.sh formfile=${jailsysdir}/${jname}/bin/forms.sqlite jname=${jname}
					elif [ -x ${jailsysdir}/${name}/bin/bootstrap.sh ]; then
						jname="${name}"
						${ECHO} "${N1_COLOR}Exec img helpers: ${N2_COLOR}${jailsysdir}/${jname}/bin/bootstrap.sh${N0_COLOR}"
						. ${jrcconf}
						. ${distdir}/jcreate.subr
						export_jail_data_for_external_hook
						${jailsysdir}/${jname}/bin/bootstrap.sh
					fi
				fi
#				[ ${inter} -ne 0 -a "${useconfig}" = "1" ] && jsetup-tui jname=${name} repo ip4_addr interface astart host_hostname
#				[ ${inter} -ne 0 -a "${useconfig}" = "1" ] && jsetup-tui jname=${name} ip4_addr interface astart host_hostname

				;;
			"helpers")
				gethelpers
				;;
			modules)
				getmodules
				;;
			bhyve)
				getbhyve
				${ECHO} "${N1_COLOR}Done... Importing...${N0_COLOR}"
				if [ -n "${newjname}" ]; then
					name="${newjname}"
					bimport jname=${name} newjname="${name}"
				else
					bimport jname=${name}
				fi
				if [ -f "${importdir}/${name}.img" ]; then
					${ECHO} "${N1_COLOR}Import complete${N0_COLOR}"
					getyesno "Do you want to remove source image ${importdir}/${name}.img ?"
					[ $? -eq 0 -o $? -eq 3 ] && /bin/rm -f ${importdir}/${name}.img
				fi
				;;
			*)
				err 1 "${N1_COLOR}Unknown sources: ${N2_COLOR}${sources}${N0_COLOR}"
				;;
		esac ## END of source case
		;;
esac ## END of action case
