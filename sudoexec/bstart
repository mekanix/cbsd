#!/usr/local/bin/cbsd
#v12.0.4
MYARG=""
MYOPTARG="jname inter debug checkpoint lm lm_rnodename lm_dport debug_engine cfg_only"
MYDESC="Start bhyve domain"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n\
  checkpoint   - start from specified checkpoint name\n\
  lm - 0 or 1  - when 1: prepare for acceptance of this domain via live migration request\n\
  lm_rnodename - (optional) for live migration, remote/source CBSD nodename\n\
  lm_dport     - (optional) for live migration, port for migration data exchange. Can be '0' for auto port, by default.\n\
  debug_engine - overwrite debug_engine settings: use gdb or lldb as debugger when launch bhyve ( mostly for inherits debug with live migration )\n\
cfg_only=<file_path>  when set, find/create tap/vnc and generate bhyve.conf into <file_path> but without run\n"
CBSDMODULE="bhyve"
EXTHELP="wf_jstop_jstart.html"

# by default - no live-migrated domain
lm="0"
lm_dport=
lm_rnodename=
odebug_engine=

cfg_only=		# create a configuration and run immediately

. ${subr}
. ${tools}		# for select_jail_by_list

readconf buildworld.conf
readconf jail-freebsd-default.conf

[ -z "${1}" ] && select_jail_by_list -s "List of offline VMs" -a "Off" -e bls -r ${sqlreplica}

odebug_engine=		# overwrite debug_engine variable
debug_engine=		# reset debug_engine before init

. ${cbsdinit}

. ${system}
. ${distdir}/universe.subr
. ${distdir}/bhyve.subr
. ${distdir}/vnet.subr # get_vm_uplink_interface

[ -z "${jname}" -a -z "$*" ] && err 1 "${N1_COLOR}No bhyve specified${N0_COLOR}"

[ -n "${debug_engine}" ] && odebug_engine="${debug_engine}"	# store overwrite debug_engine

. ${distdir}/fetch.subr
. ${distdir}/jcreate.subr	# for external_exec_master_script
. ${distdir}/virtual.subr	# for init_systap

create_from_jail()
{
	local passt_args=

	[ -n "${pci_passthru_args}" ] && passt_args="-S"

	# from jail2iso mode
	case "${vm_efi}" in
		uefi_csm|uefi)
			bhyveload_cmd=""
		;;
		*)
			bhyveload_cmd="/usr/bin/lockf -s -t0 /tmp/bhyveload.${jname}.lock /usr/sbin/bhyveload ${passt_args} -m ${vm_ram} -d ${data}/${MDFILE} ${jname}"
		;;
	esac
}

start_bhyve()
{
	local bhyveload_cmd _err
	local passt_args=
	local _ebytes _dsk_ebytes _cloud_truncate
	local _cloud_source_is_zvol
	local _cloud_source_zvol _dsk_source_zvol

	local is_ppt=$( cbsdsqlro ${main_sqlite_local} SELECT ppt FROM bhyveppt WHERE jname=\"${jname}\" 2>/dev/null )
	[ -n "${is_ppt}" ] && passt_args="-S"

	# flags which means that the CD as boot device will use only once
	cd_boot_once=0

	# profile
	readconf vm-${vm_os_type}-${vm_os_profile}.conf
	if [ -z "${vm_profile}" ]; then
		${ECHO} "${N1_COLOR}No such profile: ${N2_COLOR}vm-${vm_os_type}-${vm_os_profile}.conf${N0_COLOR}"
		sleep 2
	fi
	# re-read jail params and apply personal after profile
	if [ "${lm}" = "0" ]; then
		. ${jrcconf}
	else
		. ${rjrcconf}
	fi

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		[ "${cbsd_bhyve_queue_name}" != "none" ] && cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=bstart status=1
	fi

	vm_boot=$( cbsdsqlro ${main_sqlite_local} SELECT vm_boot FROM settings 2>/dev/null )

	# live migration todo:
	# a) no cdrom (error?)
	# b) shared ISO dir too?

	# Cloud-init init. Cloud init only for empty disk
	if check_for_empty_hdd path=${data}/dsk1.vhd; then
		if [ -n "${vm_iso_path}" ]; then
			local prefix=
			local prefix6=$( substr --pos=0 --len=6 --str="${vm_iso_path}" )

			if [ "${prefix6}" = "cloud-" ]; then
				local _orig_vm_iso_path="${vm_iso_path}"
				vm_boot="cd"
				init_iso
				if [ $? -eq 1 ]; then
					err 1 "${N1_COLOR}No such cloud source: ${N2_COLOR}${vm_iso_path}/${iso_img}${N0_COLOR}"
				fi
				vm_boot="hdd"
				${ECHO} "${N1_COLOR}cloud init image initialization..${N0_COLOR}"
				local _myfile="${iso_img}"
				[ ! -r "${_myfile}" ] && err 1 "${N1_COLOR}Error: bstart: not readable: ${N2_COLOR}${_myfile}${N0_COLOR}"

				. ${zfstool}

				if is_getzvol ${_myfile}; then
					_ebytes=$( /sbin/zfs get -Hp -o value volsize ${is_zvol} )
					_cloud_source_is_zvol=1
					_cloud_source_zvol="${is_zvol}"
				else
					_cloud_source_is_zvol=0
					_cloud_source_zvol=
					_ebytes=$( /usr/bin/stat -f "%z" ${_myfile} 2>/dev/null )
				fi

				# store original disk size to restore them after replace by cloud image
				if is_getzvol ${data}/dsk1.vhd; then
					_dsk_ebytes=$( /sbin/zfs get -Hp -o value volsize ${is_zvol} )
					_dsk_source_zvol="${is_zvol}"
					_cloud_truncate=0
				else
					_dsk_ebytes=$( /usr/bin/stat -f "%z" ${data}/dsk1.vhd 2>/dev/null )
					_cloud_truncate=1
					_dsk_source_zvol=
				fi

				# print some warning about not optimal when zfsfeat=1 but for some 
				# reason cloning not available?

				# if source image is not ZVOl, use dd method for cloning
				[ ${_cloud_source_is_zvol} -eq 0 ] && _cloud_truncate=1

				if [ ${_cloud_truncate} -eq 1 ]; then
					${ECHO} "${N1_COLOR}Clone cloud image into first/system vm disk (${W1_COLOR}dd${N1_COLOR} method)${N0_COLOR}"
					# to generic clonedata (add dd method)?
					/bin/dd if=${_myfile} | ${miscdir}/cbsdtee -e ${_ebytes} > ${data}/dsk1.vhd
					echo
					# adjust original image size
					/usr/bin/truncate -s${_dsk_ebytes} ${data}/dsk1.vhd
				else
					${ECHO} "${N1_COLOR}Clone cloud image into first/system vm disk (zfs clone method)${N0_COLOR}"
					# to generic clonedata ?
						_cloud_snapshot_name="${_cloud_source_zvol}@boot-${jname}"
						echo "/sbin/zfs get -Ht snapshot userrefs ${_cloud_snapshot_name}"
						/sbin/zfs get -Ht snapshot userrefs ${_cloud_snapshot_name} > /dev/null 2>&1
						_ret=$?
						if [ ${_ret} -eq 1 ]; then
							# create cloud snapshot for $jname
							/sbin/zfs snapshot ${_cloud_source_zvol}@boot-${jname}
							# destory original zvol disk for vm
							/sbin/zfs destroy ${_dsk_source_zvol}
							#/sbin/zfs clone ${_cloud_source_zvol}@boot-${jname} ${_dsk_source_zvol}
							/sbin/zfs clone -o volsize=${_dsk_ebytes} ${_cloud_source_zvol}@boot-${jname} ${_dsk_source_zvol}
							# restore original size
							# /sbin/zfs set volsize=${_dsk_ebytes} ${_dsk_source_zvol}
							# bug here, need for atomic ops ^^ in clone action
							/sbin/zfs set cbsdsnap:jname=${jname} ${_cloud_source_zvol}@boot-${jname}
							/sbin/zfs set cbsdsnap:snapname=cloud ${_cloud_source_zvol}@boot-${jname}
						else
							err 1 "${N1_COLOR}snapshot already exist ${_cloud_snapshot_name}${N0_COLOR}"
						fi
				fi
				echo "Eject cloud source: media mode=detach name=${_orig_vm_iso_path} path=${_myfile} type=iso jname=${jname}"
				media mode=detach name=${_orig_vm_iso_path} path=${_myfile} type=iso jname=${jname}
			fi
		fi
	fi

	case "${vm_os_type}" in
		freebsd)
			if [ "${from_jail}" = "1" ]; then
				create_from_jail
			else
				# default mode
				manage_boot_by_empty_hdd
				if [ "${vm_boot}" = "cd" ]; then
					init_iso
					if [ $? -eq 1 ]; then
						printf "${N1_COLOR}Continue without ${iso_img}. Hope this is ok, sleep for 5 seconds ${N0_COLOR}"
						for i in $( /usr/bin/jot 5 ); do
							printf "."
							sleep 1
						done
						echo
					fi
				fi

				case "${vm_efi}" in
					uefi_csm|uefi)
						bhyveload_cmd=""
						;;
					*)
						if [ "${vm_boot}" = "cd" ]; then
							bhyveload_cmd="/usr/bin/lockf -s -t0 /tmp/bhyveload.${jname}.lock /usr/sbin/bhyveload ${passt_args} -d ${iso_img} -m ${vm_ram} ${jname}"
							bhyveload_cmd_once="/usr/bin/lockf -s -t0 /tmp/bhyveload.${jname}.lock /usr/sbin/bhyveload ${passt_args} -m ${vm_ram} -d ${data}/${MDFILE} ${jname}"
						else
							bhyveload_cmd="/usr/bin/lockf -s -t0 /tmp/bhyveload.${jname}.lock /usr/sbin/bhyveload ${passt_args} -m ${vm_ram} -d ${data}/${MDFILE} ${jname}"
						fi
						;;
				esac
			fi
			;;
		linux|other|windows)
			# profile
			readconf vm-${vm_os_type}-${vm_os_profile}.conf

			[ -z "${vm_profile}" ] && err 1 "${N1_COLOR}No such profile: ${N2_COLOR}vm-${vm_os_type}-${vm_os_profile}.conf${N0_COLOR}"
			# re-read jail params and apply personal after profile 
			[ "${lm}" = "0" ] && . ${jrcconf}
			manage_boot_by_empty_hdd

			if [ "${vm_boot}" = "cd" ]; then
				init_iso
				if [ $? -eq 1 ]; then
					printf "${N1_COLOR}Continue without ${iso_img}. Hope this is ok, sleep for 5 seconds ${N0_COLOR}"
					for i in $( /usr/bin/jot 5 ); do
						printf "."
						sleep 1
					done
					echo
				fi
			fi
			bhyveload_cmd=""
			;;

		openbsd|dflybsd|netbsd)
			# profile
			readconf vm-${vm_os_type}-${vm_os_profile}.conf
			[ -z "${vm_profile}" ] && err 1 "${N1_COLOR}No such profile: ${N2_COLOR}vm-${vm_os_type}-${vm_os_profile}.conf${N0_COLOR}"
			# re-read jail params and apply personal after profile

			if [ "${lm}" = "0" ]; then
				. ${jrcconf}
			else
				. ${rjrcconf}
			fi

			manage_boot_by_empty_hdd
			if [ "${vm_boot}" = "cd" ]; then
				init_iso
				if [ $? -eq 1 ]; then
					printf "${N1_COLOR}Continue without ${iso_img}. Hope this is ok, sleep for 5 seconds ${N0_COLOR}"
					for i in $( /usr/bin/jot 5 ); do
						printf "."
						sleep 1
					done
					echo
				fi
			fi

			if [ "${vm_boot}" = "hdd" ]; then
				if [ -z "${MDFILE}" ]; then
					${ECHO} "${H5_COLOR}Notice: ${N1_COLOR}no hard disk, boot from CD...${N0_COLOR}"
					vm_boot="cd"
				else
					_err=$( /usr/bin/file -s ${data}/${MDFILE} | /usr/bin/cut -d":" -f2 | /usr/bin/xargs )
					# live migration todo: skipp this >> ?
					if [ "${_err}" = "data" ]; then
						${ECHO} "${N1_COLOR}Looks like ${N2_COLOR}${data}/${MDFILE}${N1_COLOR} is empty.${N0_COLOR}"
						if getyesno "May be you want to boot from CD?"; then
							vm_boot="cd"
						fi
					fi
				fi
			fi

			bhyveload_cmd=""
			;;
		*)
			err 1 "${N1_COLOR}Unknown vm profile: ${N2_COLOR}${vm_os_type}${N0_COLOR}"
	esac

	# for vnet we can make another action
	. ${vimageconf}

	#unset zero-value
	[ "${bhyve_flags}" = "0" ] && unset bhyve_flags
	[ "${vm_os_profile}" = "0" ] && unset vm_os_profile

	# reset global bhyve_pci_id_busy_list (used by compile_ func via next_pci_id()
	# and remove buffer file with old $bhyve_pci_id_busy_list ( used by add_bhyve_pci_id_busy )
	bhyve_pci_id_busy_list=
	[ -f ${jailsysdir}/${jname}/bhyve_pciid ] && /bin/rm -f ${jailsysdir}/${jname}/bhyve_pciid

	# mark modified field to FALSE in pcibus table to find unmodified entries for pciid cleanup
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE pcibus SET modified=false

	# truncate pcibus_run table
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM pcibus_run

	# init bhyve_cpus
	if ! compile_bhyve_cpus_args; then
		${ECHO} "${N1_COLOR}Unable to compile bhyve_cpus_args for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		bhyve_cpus="${vm_cpus}"
	fi

	# init hostbridge_args
	if ! compile_hostbridge_args; then
		${ECHO} "${N1_COLOR}No such hostbridge for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset hostbridge_args
	fi

	# Must be after hoster and before cd/hdd
	if ! compile_uefi_boot_args; then
		unset uefi_boot_args
	fi

	# Must be after hoster bridge to take 2-4 slot id
	case "${vm_boot}" in
		hdd|net)
			# init dsk_args first
			if ! compile_dsk_args; then
				${ECHO} "${N1_COLOR}No such disk for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
				unset dsk_args
				unset dsk_bootable
			fi

			# init cd_args
			if ! compile_cd_args; then
				unset cd_args
			fi
			;;
		cd)
			# init cd_args first
			if ! compile_cd_args; then
				unset cd_args
			fi

			# init dsk_args
			if ! compile_dsk_args; then
				${ECHO} "${N1_COLOR}No such disk for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
				unset dsk_args
				unset dsk_bootable
			fi
			;;
		*)
			err 1 "${N1_COLOR}Unknown vm_boot method: ${N2_COLOR}${vm_boot}${N0_COLOR}"
			;;
	esac

	if ! compile_dsk_controller_args; then
		unset dsk_controller_args
	fi

	# init nic_args
	if ! compile_nic_args ; then
		${ECHO} "${N1_COLOR}No such nic for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset nic_args
	fi

	if ! compile_nvme_args; then
		unset compile_nvme_args
	fi

	# init pci_passthru_args
	if ! compile_pci_passthru_args; then
		${ECHO} "${N1_COLOR}No such pci_passthru for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset pci_passthru_args
	fi

	# init console_args
	if ! compile_console_args; then
		${ECHO} "${N1_COLOR}No such console for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset console_args
	fi

	# init virtiornd_args
	if ! compile_virtiornd_args; then
		${ECHO} "${N1_COLOR}No such rnd for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset lpc_args
	fi

	# init VirtFS compile_virtio_9p_args
	if ! compile_virtio_9p_args; then
		${ECHO} "${N1_COLOR}No such 9p for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset virtio_9p_args
	fi

	# init efi_args
	if ! compile_efi_args; then
		${ECHO} "${N1_COLOR}No such efi for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset efi_args
	fi

	# init lpc_args
	if ! compile_lpc_args; then
		${ECHO} "${N1_COLOR}No such lpc for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		unset lpc_args
	fi

	# init vnc_args
	if ! compile_vnc_args; then
		unset vnc_args
	fi

	if [ "${lm}" = "1" -a -n "${lm_rnodename}"  ]; then
		[ -z "${lm_dport}" ] && lm_dport="0"
		# prepare live_migration_args and {jailsysdir}/${jname}/live_migration.conf config for live migration
		printf "${N1_COLOR}Compile live migration settings...${N0_COLOR}"
		if ! compile_live_migration_args -a ${lm_rnodename} -b ${nodename} -p ${lm_dport}; then
			unset live_migration_args
			[ "${lm}" = "1" ] && err 1 "${N1_COLOR}failed${N0_COLOR}"
		else
			printf "${N2_COLOR}done${N0_COLOR}"
		fi
	fi

	# Poehali!
	passthr=""

	# purge old/orphaned devices from pcibus table (which not modified by compile_args)
	_res=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT idx FROM pcibus WHERE modified=false 2>/dev/null )
	if [ -n "${_res}" ]; then
		cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT pcislot_name,pcislot_desc FROM pcibus WHERE modified=false 2>/dev/null | while read _name _desc; do
			# debug: echo "Prune for: [${_name} ${_desc}]"
			cbsdlogger NOTICE ${CBSD_APP}: pcibus map: purge for old/orphaned devices for ${jname}: [${_name} ${_desc}]
		done
		cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM pcibus WHERE modified=false
	fi

	# extra validate we have no collision in PCI bus
	_res=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT pcislot_bus,COUNT(*) FROM pcibus_run GROUP BY pcislot_bus HAVING COUNT(*) > 1 LIMIT 1' 2>/dev/null )

	if [ -n "${_res}" ]; then
		sqllistdelimer=" "
		sqllist "${_res}" pcislot_bus pcislot_bus_count
		unset sqllistdelimer
		${ECHO} "${W1_COLOR}Error: ${N1_COLOR}PCI collision for bus: ${N2_COLOR}${pcislot_bus}${N1_COLOR}, count=${pcislot_bus_count}:${N0_COLOR}"
		cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT pcislot_name,pcislot_desc FROM pcibus_run WHERE pcislot_bus=${pcislot_bus}
		echo
		${ECHO} "${N1_COLOR}Please use bconfig to re-configure devices or use: ${N2_COLOR}cbsd bpcibus jname=${jname} mode=reset${N1_COLOR} to reset${N0_COLOR}"
		bcleanup jname="${jname}"
		exit 1
	fi

	# for init external hook variables
	geniplist ${ip4_addr}

	vm_logfile=$( /usr/bin/mktemp )

	# The parameters in local rc.conf file can overwrite the settings in the database
	[ -r ${jailsysdir}/${jname}/etc/rc.conf ] && . ${jailsysdir}/${jname}/etc/rc.conf

	[ -r "${jailsysdir}/${jname}/helpers/brctl.sqlite" ] && nice=$( cbsdsqlro ${jailsysdir}/${jname}/helpers/brctl.sqlite "SELECT cur FROM forms WHERE param=\"nice\"" )
	[ -z "${nice}" ] && nice="0"
	[ "${nice}" != "0" ] && ${ECHO} "${N1_COLOR}bhyve renice: ${N2_COLOR}${nice}${N0_COLOR}"

	# restore overwrite debug_engine
	[ -n "${odebug_engine}" ] && debug_engine="${odebug_engine}"

/bin/cat > ${jailsysdir}/${jname}/bhyve.conf <<EOF
vm_boot='${vm_boot}'
bhyveload_cmd='${bhyveload_cmd}'
tmuxcmd='${tmuxcmd}'
jname='${jname}'

bhyve_flags='${bhyve_flags}'
# with topology
vm_cpus='${bhyve_cpus}'
vm_ram='${vm_ram}'
vm_efi='${vm_efi}'
vm_console='${vm_console}'
hostbridge_args='${hostbridge_args}'
passthr='${passthr}'
lpc_args='${lpc_args}'
pci_passthru_args='${pci_passthru_args}'
virtiornd_args='${virtiornd_args}'
nic_args='${nic_args}'
uefi_boot_args='${uefi_boot_args}'
dsk_args='${dsk_args}'
dsk_bootable='${dsk_bootable}'
dsk_controller_args='${dsk_controller_args}'
cd_args='${cd_args}'
cd_args2='${cd_args2}'
nvme_args='${nvme_args}'
#
efi_args='${efi_args}'
vnc_args='${vnc_args}'
console_args='${console_args}'
mytap='${mytap}'
cd_boot_once='${cd_boot_once}'
bhyveload_cmd_once='${bhyveload_cmd_once}'
console_nmdm='${console_nmdm}'
vm_logfile='${vm_logfile}'
vm_vnc_port='${vm_vnc_port}'

bhyve_generate_acpi='${bhyve_generate_acpi}'
bhyve_wire_memory='${bhyve_wire_memory}'
bhyve_rts_keeps_utc='${bhyve_rts_keeps_utc}'
bhyve_force_msi_irq='${bhyve_force_msi_irq}'
bhyve_x2apic_mode='${bhyve_x2apic_mode}'
bhyve_mptable_gen='${bhyve_mptable_gen}'
bhyve_ignore_msr_acc='${bhyve_ignore_msr_acc}'

cd_vnc_wait="${cd_vnc_wait}"
bhyve_vnc_resolution="${bhyve_vnc_resolution}"
bhyve_vnc_tcp_bind="${bhyve_vnc_tcp_bind}"

vnc_password="${vnc_password}"
virtio_9p_args="${virtio_9p_args}"
bhyve_vnc_vgaconf="${bhyve_vnc_vgaconf}"

media_auto_eject="${media_auto_eject}"

nice='${nice}'
live_migration_args='${live_migration_args}'
debug_engine='${debug_engine}'

on_poweroff='${on_poweroff}'
on_reboot='${on_reboot}'
on_crash='${on_crash}'

xhci='${xhci}'

EOF

	# create a configuration only
	if [ -n "${cfg_only}" ]; then
		/bin/mv ${jailsysdir}/${jname}/bhyve.conf ${cfg_only}
		err 0 "${N1_COLOR}config created: ${N2_COLOR}${cfg_only}${N0_COLOR}"
	fi

	checkpoint_args=

	if [ -n "${checkpoint}" ]; then
		CHECKPOINT_DIR="${jailsysdir}/${jname}/checkpoints"
		CHECKPOINT="${CHECKPOINT_DIR}/${checkpoint}.ckp"
		if [ -r ${CHECKPOINT} ]; then
			${ECHO} "${N1_COLOR}Checkpoint found, starting from: ${N2_COLOR}${CHECKPOINT}${N0_COLOR}"
			checkpoint_args="-r ${CHECKPOINT}"
		else
			err 1 "${N1_COLOR}Checkpoint not found: ${N2_COLOR}${CHECKPOINT}${N0_COLOR}"
		fi
	fi

	# this section should be BEFORE cloud-init seed generator
	if [ "${lm}" = "0" ]; then
		export_bhyve_data_for_external_hook
		external_exec_master_script "master_prestart.d"
	fi

	# cloud-init enabled?
	# this section should be AFTER master_prestart
	# cloud_init and CLOUD_FILES was initialized earlier
	if [ ${cloud_init} -eq 1 ]; then
			/bin/rm -f ${jailsysdir}/${jname}/seed.iso
			#${GENISOIMAGE_CMD} -output ${jailsysdir}/${jname}/seed.iso -volid cidata -joliet -rock ${CLOUD_FILES}
			/usr/sbin/makefs -t cd9660 -o label="cidata" -o isolevel=2 -o rockridge -o publisher="CBSD" ${jailsysdir}/${jname}/seed.iso ${jailsysdir}/${jname}/cloud-init
			# see /usr/src/usr.sbin/makefs/cd9660/cd9660_strings.c + /usr/src/usr.sbin/makefs/cd9660.c (cd9660_valid_a_char)
			# why upper here, whereis spec?
			/usr/bin/sed -i '' s:CIDATA:cidata: ${jailsysdir}/${jname}/seed.iso
			sync
	fi

	case "${debug_engine}" in
		gdb|lldb)
			if [ "${lm}" = "1" ]; then
				# for live migration always run in tmux due to non-interactive commands from remote side
				env cbsd_workdir="${workdir}" ${tmuxcmd} -2 -u new -d "/bin/sh ${sharedir}/bhyverun.sh -c ${jailsysdir}/${jname}/bhyve.conf -g ${debug_engine} ${checkpoint_args}"
			else
				env cbsd_workdir="${workdir}" /bin/sh ${sharedir}/bhyverun.sh -c ${jailsysdir}/${jname}/bhyve.conf -g ${debug_engine} ${checkpoint_args}
			fi
			;;
		*)
			env cbsd_workdir="${workdir}" ${tmuxcmd} -2 -u new -d "/bin/sh ${sharedir}/bhyverun.sh -c ${jailsysdir}/${jname}/bhyve.conf -e 1 ${checkpoint_args}"
			;;
	esac

	if [ -n "${console_nmdm}" ]; then
		${tmuxcmd} select-window -t 0

		for i in ${console_nmdm}; do
			${tmuxcmd} new-window -t ${con} "cu -l ${i} -s 9600"
			con=$(( con + 1 ))
		done

		con=0
		for i in ${console_nmdm}; do
			if [ ${con} -eq 0 ]; then
				${tmuxcmd} split-window -v -p 96 -t 0 "cu -l ${i} -s 9600" # DEBUG string
			else
				${tmuxcmd} new-window -t 1 "cu -l ${i} -s 9600"
			fi
			con=$(( con + 1 ))
		done

		${tmuxcmd} select-window -t 0
	fi

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		[ "${cbsd_bhyve_queue_name}" != "none" ] && cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=bstart status=2 data_status=1
	fi

	search_cmd="bhyve: ${jname}"
	strlen_search_cmd=$( strlen "${search_cmd}" )

	[ -n "${dsk_bootable}" ] && ${ECHO} "${N1_COLOR}Boot device: ${N2_COLOR}${dsk_bootable}${N0_COLOR}"
	printf "${N1_COLOR}Waiting for PID"
	for i in $( /usr/bin/seq 10 ); do
		check_for_bhyve_process -j ${jname}
		[ -n "${vm_pid}" ] && break
		sleep 1
		printf "."
	done

	[ -z "${vm_pid}" ] && vm_pid="0"

	echo

	${ECHO} "${N1_COLOR}PID: ${N2_COLOR}${vm_pid}${N0_COLOR}"

	if [ "${vm_pid}" = "0" ]; then
		${ECHO} "${N1_COLOR}Please use for debug: ${N2_COLOR}sh ~cbsd/share/bhyverun.sh -c ${jailsysdir}/${jname}/bhyve.conf${N0_COLOR}"
	fi


	if [ "${lm}" = "0" ]; then
		cbsdsqlrw local "UPDATE jails SET jid=\"${vm_pid}\" WHERE jname=\"${jname}\""

		# update state_time
		cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET state_time="(strftime('%s','now'))"

		# update state_time, local SQLite for back compatible
		cbsdsqlrw local "UPDATE jails SET state_time=\"(strftime('%s','now'))\" WHERE jname=\"${jname}\""

		if [ "${vm_efi}" = "none" ]; then
			err 0 "${N1_COLOR}Use ${N2_COLOR}cbsd blogin ${jname}${N1_COLOR} for attach to console${N0_COLOR}"
		else
			err 0 ""
		fi
	fi

	[ "${lm}" = "0" ] && external_exec_master_script "master_poststart.d"
}


# MAIN for multiple jails
TRAP=""
readconf cbsd_queue.conf
[ -z "${cbsd_bhyve_queue_name}" ] && cbsd_bhyve_queue_name="/clonos/bhyvevms/"

emulator="bhyve"	# for jname_is_multiple
jname_is_multiple

if [ $# -gt 1 -a -z "${jname}" -o -n "${jail_list}" ]; then
	# multiple astart always non interactive
	export inter=0
	# recursive
	if [ -n "${jail_list}" ]; then
		JLIST="${jail_list}"
	else
		JLIST=$*
	fi

	for jname in ${JLIST}; do
		[ "${jname}" = "inter=0" ] && continue
		TRAP="${TRAP} /bin/rm -f ${ftmpdir}/bstart.${jname}.$$;"
		trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
		if [ -n "${cbsd_bhyve_queue_name}" ]; then
			/usr/sbin/daemon -p ${ftmpdir}/bstart.${jname}.$$ /usr/local/bin/cbsd bstart inter=${inter} jname=${jname} cbsd_bhyve_queue_name="${cbsd_bhyve_queue_name}"
		else
			/usr/sbin/daemon -p ${ftmpdir}/bstart.${jname}.$$ /usr/local/bin/cbsd bstart inter=${inter} jname=${jname}
		fi
		#lets save .pid file
		sleep 1
		[ -f "${ftmpdir}/bstart.${jname}.$$" ] && cbsd_pwait --pid=$( /bin/cat ${ftmpdir}/bstart.${jname}.$$ ) --timeout=${parallel}
		trap "" HUP INT ABRT BUS TERM EXIT
		# Artificial delay to create a sequence (for order compliance)
		# todo: determine VM complete starting
		sleep 12
	done

	wait_for_fpid -a start -t ${parallel}

	err 0 "${N1_COLOR}Multiple bstart: ${N2_COLOR}done${N0_COLOR}"
fi

# MAIN
. ${distsharedir}/bhyve.conf		# only for for MYCOL variables: used in exports below
st_time=$( /bin/date +%s )
[ -z "${jname}" ] && jname=$1

# cloud-init enabled?
# we need this section (besides section cloud-init section in start_bhyve() to allocate pci bus id via touching seed.iso
# since some helpers may work with runtime (e.g pcibus + cloudinit) config
if [ -d ${jailsysdir}/${jname}/cloud-init ]; then
	CLOUD_FILES=$( /usr/bin/find ${jailsysdir}/${jname}/cloud-init/ -type f | /usr/bin/xargs )
	# gen seed only if files exist
	if [ -n "${CLOUD_FILES}" ]; then
		cloud_init=1
		${ECHO} "${H5_COLOR}cloud-init: ${H3_COLOR}enabled${N0_COLOR}"
		/usr/bin/touch ${jailsysdir}/${jname}/seed.iso
	else
		cloud_init=0
		unset CLOUD_FILES
	fi
else
	cloud_init=0
fi

if [ "${lm}" = "0" ]; then
	. ${jrcconf}
	if [ $? -eq 1 ]; then
		# remote start
		[ ${sqlreplica} -eq 0 ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
		remotenode=$( bwhereis ${jname} )
		[ -z "${remotenode}" ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
		for i in ${remotenode}; do
			if [ "${i}" = "${nodename}" ]; then
				${ECHO} "${N1_COLOR}Remote bstart: found on nodename ${N2_COLOR}${nodename}${N1_COLOR}. Skipped${N0_COLOR}"
				continue
			fi
			${ECHO} "${N1_COLOR}Remote bstart: ${N2_COLOR}${jname} ${N1_COLOR}on${N2_COLOR} ${i}${N0_COLOR}"
			rexe node=${i} cbsd bstart jname=${jname}
			if [ $? -eq 0 ]; then
				# updating state and put task for retrinv inventory
				${ECHO} "${N1_COLOR}Updating inventory...${N0_COLOR}"
				task autoflush=2 mode=new retrinv node=${i} tryoffline=1 data=db > /dev/null 2>&1
			fi
		done
		exit 0
	fi
else
	# Request for live migration start
	. ${nodes}
	${ECHO} "${N1_COLOR}Request for live migration...${N0_COLOR}"

	. ${jrcconf}
	[ $? -eq 0 ] && err 1 "${N1_COLOR}This is local domain! Please unregister first: ${N2_COLOR}${jname}${N0_COLOR}"

	RHST=

	if [ -z "${lm_rnodename}" ]; then
		# detect remote hoster name by $jname in cluster
		RHST=$( bwhereis ${jname} | /usr/bin/head -n1 )
		[ -z "${RHST}" ] && err 1 "${N1_COLOR}No such domain in the current CBSD cluster: ${N2_COLOR}${jname}${N0_COLOR}"
		lm_rnodename="${RHST}"	# for rjrcconf
	else
		RHST="${lm_rnodename}"
	fi
	# extra check
	_tmp=$( cbsdsqlro nodes SELECT ip FROM nodelist WHERE nodename=\"${lm_rnodename}\" )
	[ -z "${_tmp}" ] && err 1 "${N1_COLOR}No such node in the current CBSD cluster: ${N2_COLOR}${lm_rnodename}${N0_COLOR}"

	# todo: check for node idle and online, rexe?
	# todo2: extra check for shared storage
	shared_dir="jails-data jails-rcconf jails-system"

	${ECHO} "   ${H5_COLOR}* ${N1_COLOR}check for shared storage: ${N0_COLOR}"

	for i in ${shared_dir}; do
		printf "      ${H5_COLOR}* ${N2_COLOR}${i}: ${N0_COLOR}"
		check_for_shared_dir -d ${i} -n ${lm_rnodename} || err 1 "${N1_COLOR}directory id do not match, dir not shared: ${N2_COLOR}${i}${N1_COLOR} ?${N0_COLOR}"
		printf "${H3_COLOR}ok${N0_COLOR}"
		echo
	done

	emulator="bhyve"
	. ${rjrcconf}
	[ $? -eq 1 ] && err 1 "${N1_COLOR}Request for live migration: no such VM in cluster: ${N2_COLOR}${jname}${N1_COLOR}. Perhaps you forget to: ${N2_COLOR}cbsd node mode=add${N1_COLOR} ?${N0_COLOR}"
fi

# jailed bhyve?
_jailed=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT jailed FROM settings LIMIT 1" 2>/dev/null )
[ -z "${_jailed}" ] && _jailed="0"
if [ "${_jailed}" != "0" ]; then
	case "${_jailed}" in
		1)
			_jname=$( freejname default_jailname=J${jname} )
			${ECHO} "${N1_COLOR}Jailed bhyve. Create temporary jail: ${N2_COLOR}${_jname}${N0_COLOR}"
			/usr/bin/sed -e "s:%%jname%%:${_jname}:g" \
			-e "s:%%workdir%%:${workdir}:g" \
			-e "s:%%domain%%#:my.domain:g" ${distdir}/share/jail.jconf > /tmp/jail.$$
			jcreate jconf=/tmp/jail.$$
			/bin/rm -f /tmp/jail.$$
			exec bjail jname=${_jname} bname=${jname}
			;;
		*)
			;;
	esac
fi

default_profile="bhyve-default-default.conf"
readconf ${default_profile}

init_bhyve

[ "${create_cbsdsystem_tap}" = "1" ] && init_systap

readconf vnc.conf
readconf bstart.conf

readconf ${default_profile}

if [ "${lm}" = "0" ]; then
	. ${jrcconf}
	[ $? -eq 1 ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
	[ ${jid} -ne 0 ] && err 1 "${N1_COLOR}Jail ${jname} already running, jid: ${N2_COLOR}${jid}${N0_COLOR}"
	main_sqlite_local="${jailsysdir}/${jname}/local.sqlite"
	[ ${status} -eq 2 ] && err 1 "${N1_COLOR}Jail in slave mode. Please ${N2_COLOR}cbsd jswmode mode=master${N1_COLOR} first${N0_COLOR}"
	[ "${emulator}" != "bhyve" ] && err 1 "${N1_COLOR}Not bhyve mode${N0_COLOR}"
else
	. ${rjrcconf}
	[ $? -eq 1 ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
	# change SQL local path to remote sqlite (exported by . ${rjrcconf})
	main_sqlite_local="${remote_local_sqlite}"
fi

# cleanup old artifacts before start new session
bcleanup jname="${jname}"

[ -z "${vm_ram}" -o -z "${vm_cpus}" -o -z "${vm_os_type}" ] && err 1 "${N1_COLOR}Parameter is mandatory: ${N2_COLOR}vm_ram, vm_cpus, vm_os_type${N0_COLOR}"
[ -z "${iso_auto_fetch}" ] && iso_auto_fetch=0
[ -z "${debug}" ] && debug=0

if [ ${vm_cpus} -gt ${ncpu} -a ${vm_cpus} -lt 16 ]; then
	${ECHO} "${N1_COLOR}Warning! Current node cpu: ${N2_COLOR}${ncpu}${N1_COLOR}, guest cpu: ${N2_COLOR}${vm_cpus}. ${N1_COLOR}Overcommitting vCPUs can hurt perfomance.${N0_COLOR}"
elif [ ${vm_cpus} -lt 1 -o ${vm_cpus} -gt 16 ]; then
	err 1 "${N1_COLOR}Valid number of guest CPUs within 1 - 16 range. Current vm_cpus: ${N2_COLOR}${vm_cpus}${N0_COLOR}"
fi

# hardcoded first disk path from SQL. Todo: mark bootable disk(s)
# todo: NVMe
# todo: Controller
MDFILE=$( cbsdsqlro ${main_sqlite_local} SELECT dsk_path FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" LIMIT 1 2>/dev/null )
if [ -z "${MDFILE}" ]; then
	${ECHO} "${H5_COLOR}Notice: ${N1_COLOR}no any storage device found for this VM${N0_COLOR}"
else
	if [ ! -f "${data}/${MDFILE}" -a ! -h "${data}/${MDFILE}" ]; then
		${ECHO} "${N1_COLOR}No such ${data}/${MDFILE} but mdsize flags is not null.${N0_COLOR}"

		# if zfsfeat=1, try scan for zvol
		[ "${zfsfeat}" != "1" ] && break

		readconf zfs.conf
		. ${zfstool}
		DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} 2>/dev/null )

		[ -z "${DATA}" ] && break

		for lunname in $( /usr/bin/seq 0 10 ); do
			if [ -r /dev/zvol/${DATA}/bcbsd-${jname}-dsk${lunname}.vhd ]; then
				/bin/ln -sf /dev/zvol/${DATA}/bcbsd-${jname}-dsk${lunname}.vhd ${data}/dsk${lunname}.vhd
				${ECHO} "${N1_COLOR}Found zvol and create symlink: ${data}/dsk${lunname}.vhd -> ${DATA}/bcbsd-${jname}-dsk${lunname}.vhd"
			fi
		done
	fi
fi

# export variables for external hooks
export jname=${jname}

for _i in ${JARG} ${MYCOL}; do
	T=
	eval T="\$$_i"
	export ${_i}="${T}"
done

# for local bhyve only
if [ "${lm}" = "0" ]; then
	# test for incorrect state
	if [ ${status} -eq 3 ]; then
		cbsdsqlrw local UPDATE jails SET maintenance=\"${comment}\" WHERE jname=\"${jname}\"
		comment="cbsdsqlro local SELECT maintenance FROM jails WHERE jname=\"${jname}\""
		if [ "${comment}" = "Stopping_VM" ]; then
			jswmode jname=${jname} mode=master comment='0'
		else
			${ECHO} "${N1_COLOR}Bhyve in maintenance: ${N2_COLOR}${comment}${N0_COLOR}"
			err 1 "${N1_COLOR}Please finish maintenance and switch mode via: ${N2_COLOR}jswmode jname=${jname} mode=master comment='0'${N0_COLOR}"
		fi
	fi
fi

start_bhyve

if [ "${lm}" = "0" ]; then
	end_time=$( /bin/date +%s )
	cbsdlogger NOTICE ${CBSD_APP}: bhyve domain ${jname} started in $(( end_time - st_time ))s
else
	end_time=$( /bin/date +%s )
	cbsdlogger NOTICE ${CBSD_APP}: bhyve domain ${jname} started for live migration for source node ${lm_rnodename} in $(( end_time - st_time ))s
fi

exit 0
