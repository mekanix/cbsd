#!/usr/local/bin/cbsd
#v11.1.2
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="jname inter"
MYDESC="Destroy jail"
CBSDMODULE="jail"
EXTHELP="wf_bremove.html"

set -e
. ${globalconf}
set +e

. ${subr}
. ${jfs}
. ${strings}
. ${tools}

if [ -z "${1}" ]; then
	select_jail_by_list -s "List of local VMs:" -e bls -r ${sqlreplica}
	if getyesno "Remove VM ${jname}. Are you sure? "; then
		echo
	else
		exit 0
	fi
fi

init $*

[ -n "${inter}" ] && shift

if [ -n "${jname}" ]; then

	emulator="bhyve" # for jname_is_multiple
	jname_is_multiple

	if [ -n "${jail_list}" ]; then
		JLIST="${jail_list}"
	else
		JLIST=${jname}
	fi
else
	JLIST=$*
fi

[ -z "${JLIST}" ] && err 1 "Give me jname"
[ -z "${cbsd_queue_name}" ] && cbsd_queue_name="/clonos/bhyvevms/"

for jname in ${JLIST}; do
	st_time=$( /bin/date +%s )

	DST="${jaildatadir}/${jname}-${jaildatapref}"
	JAILDIR="${jaildir}/${jname}"
	JAILFSTAB="${jailfstabdir}/${jailfstabpref}${jname}"
	JAILRCCONF="${jailsysdir}/${jname}/rc.conf_${jname}"

	unregister=0

	. ${jrcconf}
	if [ $? -eq 1 ]; then
		if [ ! -f "${JAILRCCONF}" ]; then
			# remote?
			if [ ${sqlreplica} -eq 0 ]; then
				${ECHO} "${MAGENTA}No such domain: ${GREEN}${jname}${NORMAL}"
				continue
			fi
			remotenode=$( bwhereis ${jname} )
			if [ -z "${remotenode}" ]; then
				${ECHO} "${MAGENTA}No such domain: ${GREEN}${jname}${NORMAL}"
				continue
			fi
			for i in ${remotenode}; do
				if [ "${i}" = "${nodename}" ]; then
					${ECHO} "${MAGENTA}Remote bremove: found on nodename ${GREEN}${nodename}${MAGENTA}. Skipped${NORMAL}"
					continue
			fi
			${ECHO} "${MAGENTA}Remote jremove: ${GREEN}${jname} ${MAGENTA}on${GREEN} ${i}${NORMAL}"
			rexe node=${i} cbsd bremove jname=${jname}
			if [ $? -eq 0 ]; then
				# updating state and put task for retrinv inventory
				${ECHO} "${MAGENTA}Updating inventory...${NORMAL}"
				task mode=new retrinv node=${i} tryoffline=1 data=db > /dev/null 2>&1
			fi
			done
			continue
		else
			. ${JAILRCCONF}
			unregister=1
		fi
	fi

	if [ "${protected}" = "1" ]; then
		${ECHO} "${MAGENTA}Protected/locked jail. Skip for remove: ${GREEN}${jname}${NORMAL}"
		continue
	fi

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		[ "${cbsd_queue_name}" != "none" ] && cbsd_queue cbsd_queue_name=${cbsd_queue_name} id=${jname} cmd=bremove status=1
	fi

	if [ $? -eq 1 ]; then
		if [ ! -f "${JAILRCCONF}" ]; then
			if [ $sqlreplica -eq 0 ]; then
				${ECHO} "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
				continue
			fi
			remotenode=$( jwhereis ${jname} )
			if [ -z "${remotenode}" ]; then
				${ECHO} "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
				continue
			fi
			for i in ${remotenode}; do
				if [ "${i}" = "${nodename}" ]; then
					${ECHO} "${MAGENTA}Remote bremove: found on nodename ${GREEN}${nodename}${MAGENTA}. Skipped${NORMAL}"
					continue
				fi
				${ECHO} "${MAGENTA}Remote bremove: ${GREEN}${jname} ${MAGENTA}on${GREEN} ${i}${NORMAL}"
				rexe node=${i} /usr/local/bin/cbsd bremove jname=${jname}
			done
			exit 0
		else
			. ${JAILRCCONF}
			unregister=1
		fi
	fi

	. ${workdir}/jcreate.subr
	export_bhyve_data_for_external_hook
	external_exec_master_script "remove.d"

	PARRENT_SNAPSHOTS=""
	DEPENDENT_VMS=""
	if [ ${unregister} -eq 0 ] ; then
		if [  ${jid} -ne 0 ]; then
			case "${emulator}" in
				"bhyve")
					bstop jname=${jname}
					;;
				"virtualbox")
					. ${workdir}/virtualbox.subr
					vstop jname=${jname}
					;;
				*)
					jstop jname=${jname}
					;;
			esac
		fi
		# auto-promote if we have children
		if [ ${zfsfeat} -eq 1 ]; then
			base_vm_disks=$( cbsdsql storage_media SELECT path FROM media WHERE jname=\"${jname}\" and type=\"hdd\" )
			for vm_item in $( cbsdsql storage_media SELECT jname,path FROM media WHERE jname!=\"${jname}\" and type=\"hdd\" ); do
				vm=$( echo ${vm_item} | /usr/bin/cut -f 1 -d '|' )
				disk_path=$( echo ${vm_item} | /usr/bin/cut -f 2 -d '|' )
				disk_zvol=$( readlink -f ${disk_path} | /usr/bin/sed 's;^/dev/zvol/;;' )
				parrent_snapshot=$( /sbin/zfs get -Ho value origin ${disk_zvol} )
				if [ "${parrent_snapshot}" = "-" ]; then
					continue
				fi
				original_disk=$( echo ${parrent_snapshot} | /usr/bin/sed "s;@cbsd-original-${vm}-dsk.*\.vhd;;g" )
				for _disk_path in ${base_vm_disks}; do
					original_disk_path=$( /usr/bin/readlink -f ${_disk_path} )
					if [ "/dev/zvol/${original_disk}" = "${original_disk_path}" ]; then
						DEPENDENT_VMS="${DEPENDENT_VMS}\n${vm}"
					fi
				done
			done
			if [ ! -z "${DEPENDENT_VMS}" ]; then
				dep_vms=$( echo ${DEPENDENT_VMS} | /usr/bin/sort | /usr/bin/uniq )
				err 1 "${MAGENTA}The following machines depend on ${jname}:${NORMAL} ${dep_vms}" >&2
			fi
			for disk_path in ${base_vm_disks}; do
				disk_zvol=$( /usr/bin/readlink -f ${disk_path} | /usr/bin/sed 's;^/dev/zvol/;;' )
				parrent_snapshot=$( /sbin/zfs get -Ho value origin ${disk_zvol} )
				if [ "${parrent_snapshot}" != "-" ]; then
					PARRENT_SNAPSHOTS="${PARRENT_SNAPSHOTS} ${parrent_snapshot}"
				fi
			done

			path_parrent=$( /sbin/zfs get -Ho value origin ${DST} )
			if [ "${path_parrent}" != "-" ]; then
				PARRENT_SNAPSHOTS="${PARRENT_SNAPSHOTS} ${path_parrent}"
			fi
		fi
		jcleanup jname=${jname}
		/sbin/umount ${path} 2>/dev/null
	fi

	[ -d "${DST}" ] && removedata ${DST} force
	[ ${zfsfeat} -eq 1 ] && jsnapshot mode=destroyall_original jname=${jname}
	[ ${unregister} -eq 0 ] && junregister jname=${jname} rcfile=${JAILRCCONF}
	[ -f "${JAILFSTAB}" ] && /bin/rm -f ${JAILFSTAB}
	[ -f "${JAILFSTAB}.local" ] && /bin/rm -f "${JAILFSTAB}.local"
	[ -f "${JAILRCCONF}" ] && /bin/rm -f ${JAILRCCONF}
	[ -f "${jailrcconfdir}/rc.conf_${jname}" ] && /bin/rm -f "${jailrcconfdir}/rc.conf_${jname}"
	[ -d "${jailsysdir}/${jname}" ] && /bin/rm -rf "${jailsysdir}/${jname}"
	[ -f "${logdir}/${jname}.log" ] && /bin/rm -f "${logdir}/${jname}.log"
	[ -d "${jaildir}/${jname}" ] && /bin/rmdir "${jaildir}/${jname}"
	for parrent_snapshot in ${PARRENT_SNAPSHOTS}; do
		/sbin/zfs destroy ${parrent_snapshot}
	done

	# detach ppt
	cbsdsql local "DELETE FROM bhyveppt WHERE jname=\"${jname}\""

	if [ "${emulator}" != "jail" ]; then
		# TODO: cbsd media unregister mode=removeall jname=jname
		cbsdsql storage_media "DELETE FROM media WHERE jname=\"${jname}\" AND type = \"hdd\""

		A=$( cbsdsql storage_media SELECT name,path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" )
		if [ -n "${A}" ]; then
			cd_name=
			cd_path=
			IFS="|"
			sqllist "${A}" cd_name cd_path
			IFS=" "
			media mode=unregister name="${cd_name}" path="${cd_path}" jname="${jname}" type="iso"
		fi
	fi

	if [ "${emulator}" = "virtualbox" ]; then
		. ${workdir}/virtualbox.subr
		${VBOX_MGMT_CMD} unregistervm ${jname}
		[ -d "/root/VirtualBox VMs/${jname}" ] && /bin/rm -rf "/root/VirtualBox VMs/${jname}"
	fi

	# CBSD QUEUE
	if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
		[ "${cbsd_queue_name}" != "none" ] && cbsd_queue cbsd_queue_name=${cbsd_queue_name} id=${jname} cmd=bremove status=2
	fi

	end_time=$( /bin/date +%s )
	cbsdlogger NOTICE ${CBSD_APP}: bhyve domain ${jname} removed in $(( end_time - st_time ))s

done

exit 0
