#!/usr/local/bin/cbsd
#v11.1.19
globalconf="${distdir}/cbsd.conf";
MYARG=""
MYOPTARG="jname inter cbsd_bhyve_queue_name noacpi hard_timeout"
MYDESC="Stop bhyve domain"
CBSDMODULE="bhyve"
EXTHELP="wf_jstop_jstart.html"
ADDHELP="cbsd_bhyve_queue_name - realtime queue, can be: none\n\
noacpi= 1 - force hard poweroff immediately or 0 - send ACPI signal first\n\
    can be overwriten by bstop.conf\n\
hard_timeout=N, how many seconds wait after ACPI signal before hard poweroff,\n\
    default is: 30. Can be overwriten by bstop.conf\n"

. ${subr}
. ${tools}		# for select_jail_by_list

[ -z "${1}" ] && select_jail_by_list -s "List of online VMs" -a "On" -e bls -r ${sqlreplica}

noacpi=0		# soft shutdown by default
hard_timeout=30		# default soft timeout: 30 seconds

readconf bstop.conf

. ${cbsdinit}
[ -z "${jname}" -a -z "$*" ] && err 1 "${N1_COLOR}No bhyve specified${N0_COLOR}"

. ${system}
. ${mdtools}
. ${distdir}/bhyve.subr

[ -n "${inter}" ] && shift
[ -n "${cbsd_bhyve_queue_name}" ] && shift									#TODO << substr

. ${distdir}/jcreate.subr	# external_exec_master_script

# MAIN
readconf cbsd_queue.conf
[ -z "${cbsd_bhyve_queue_name}" ] && cbsd_bhyve_queue_name="/clonos/bhyvevms/"

emulator="bhyve" # for jname_is_multiple
jname_is_multiple

if [ -n "${jail_list}" ]; then
	TMP_JLIST="${jail_list}"
else
	TMP_JLIST=$*
fi

JLIST=

# check for actual vm list in arg list
jail_num=0
for i in ${TMP_JLIST}; do
	exist=$( cbsdsqlro local SELECT jname FROM jails WHERE jname=\"${i}\" AND emulator=\"${emulator}\" LIMIT 1 )
	if [ -n "${exist}" ]; then
		JLIST="${exist} ${JLIST}"
		jail_num=$(( jail_num + 1 ))
	fi
done

# this is multiple list, split it by parallel bstop execution
if [ ${jail_num} -gt 1 ]; then
	st_time=$( /bin/date +%s )
	cbsdlogger NOTICE ${CBSD_APP}: executing for multiple stopping: ${JLIST}
	for jname in ${JLIST}; do
		[ "${jname}" = "cbsd_bhyve_queue_name=none" ] && continue						#TODO << substr
		/usr/sbin/daemon -p ${ftmpdir}/bstop.${jname}.$$ /usr/local/bin/cbsd bstop jname=${jname} noacpi=${noacpi} hard_timeout=${hard_timeout}
		#lets save .pid file
		sleep 1
		[ -f "${ftmpdir}/bstop.${jname}.$$" ] && cbsd_pwait --pid=$( /bin/cat ${ftmpdir}/bstop.${jname}.$$ ) --timeout=${parallel}
	done

	wait_for_fpid -a stop

	end_time=$( /bin/date +%s )
	cbsdlogger NOTICE ${CBSD_APP}: executing for multiple done in $(( end_time - st_time ))s: ${JLIST}
	err 0 "${N1_COLOR}Multiple stop: ${N2_COLOR}done${N0_COLOR}"
fi

st_time=$( /bin/date +%s )

[ -z "${jname}" ] && jname=$( echo ${JLIST} | /usr/bin/awk '{printf $1}' )
[ -z "${jname}" ] && jname="$1"
[ -z "${jname}" ] && err 1 "${N1_COLOR}Give me domain name${N0_COLOR}"

. ${distsharedir}/bhyve.conf		# only for for MYCOL variables: used in exports below

. ${jrcconf}
if [ $? -eq 1 ]; then
	[ ${sqlreplica} -eq 0 ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
	remotenode=$( bwhereis ${jname} )
	[ -z "${remotenode}" ] && err 1 "${N1_COLOR}No such domain: ${N2_COLOR}${jname}${N0_COLOR}"
	for i in ${remotenode}; do
		${ECHO} "${N1_COLOR}Remote bstop: ${N2_COLOR}${jname} ${N1_COLOR}on${N2_COLOR} ${i}${N0_COLOR}"
		rexe node=${i} cbsd bstop jname=${jname}
		if [ $? -eq 0 ]; then
			# update inventory
			${ECHO} "${N1_COLOR}Updating inventory...${N0_COLOR}"
			task autoflush=2 mode=new cbsd retrinv node=${i} tryoffline=1 data=db > /dev/null 2>&1
		fi
	done
	exit 0
fi

[ "${emulator}" != "bhyve" ] && err 1 "${N1_COLOR}Not in bhyve mode${N0_COLOR}"

# CBSD QUEUE
if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
	[ "${cbsd_bhyve_queue_name}" != "none" ] && [ "${cbsd_bhyve_queue_name}" != "none" ] && cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=bstop status=1 data_status=1
fi

check_for_bhyve_process -j ${jname}

# for external hook variables
geniplist ${ip4_addr}

export_bhyve_data_for_external_hook
external_exec_master_script "master_prestop.d"

TRAP=""
TRAP="${TRAP} jswmode jname=${jname} mode=master comment='0';"
trap "${TRAP}" HUP INT ABRT BUS TERM EXIT

jswmode jname=${jname} mode=maintenance comment='Stopping_VM'

if [ ${noacpi} -eq 0 ]; then
	if [ -n "${vm_pid}" ]; then
		# soft stop, send SIGTERM
		tleft=$(( hard_timeout - 1 ))
		kill -15 ${vm_pid} > /dev/null 2>&1
		for i in $( /usr/bin/seq 1 ${hard_timeout} ); do
			printf "${CLRLINE}"
			printf "${CURSORRST}"
			printf "${N1_COLOR}Send SIGTERM to ${N2_COLOR}${jname}${N1_COLOR}. Soft timeout is ${N2_COLOR}${hard_timeout}${N1_COLOR} sec. ${W1_COLOR}${tleft}${N1_COLOR} seconds left [${N0_COLOR}"
			for x in $( /usr/bin/seq 1 ${i} ); do
				printf "${N1_COLOR}."
			done
			cbsd_pwait --pid=${vm_pid} --timeout=1 > /dev/null 2>&1
			tleft=$(( tleft - 1 ))
		done
		printf "]${N0_COLOR}\n"
		/bin/ps -p ${vm_pid} > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			# still live
			cbsdlogger NOTICE ${CBSD_APP}: bhyve domain ${jname} does not want to die via ACPI, soft timeout ${hart_timeout} exceeded. Kill him
			kill -9 ${vm_pid} > /dev/null 2>&1 || true
		fi
	else
		${ECHO} "${N1_COLOR}Warning: unable to determine bhyve pid for: ${N2_COLOR}${jname}${N0_COLOR}"
	fi
else
	kill -9 ${vm_pid} > /dev/null 2>&1 || true
fi

[ -r ${jailsysdir}/${jname}/vnc_port ] && /bin/rm -f ${jailsysdir}/${jname}/vnc_port

_res=$( /usr/sbin/bhyvectl --destroy --vm="${jname}" 2>&1 )

# extra check for no any cbsd process related to this VM is active
epid=$( /bin/ps axopid,ucomm,command -ww | /usr/bin/grep "/tmp/bhyveload.${jname}.lock" | /usr/bin/grep -v grep | /usr/bin/awk '{printf $1" "}' )
[ -n "${epid}" ] && kill -9 ${epid} > /dev/null 2>&1
epid=$( /bin/ps axopid,ucomm,command -ww | /usr/bin/grep "${sharedir}/bhyverun.sh -c ${workdir}/jails-system/${jname}/bhyve.conf" | /usr/bin/grep -v grep | /usr/bin/awk '{printf $1" "}' )
[ -n "${epid}" ] && kill -9 ${epid} > /dev/null 2>&1

jswmode jname=${jname} mode=master comment='0'

# cleanup for ifaces
. ${vimageconf}

bcleanup jname=${jname}

# update state_time
cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET state_time="(strftime('%s','now'))"

# update state_time and pid in local DB
cbsdsqlrw local UPDATE jails SET jid=0,state_time="(strftime('%s','now'))" WHERE jname=\"${jname}\"

external_exec_master_script "master_poststop.d"

# CBSD QUEUE
if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
	[ "${cbsd_bhyve_queue_name}" != "none" ] && cbsd_queue cbsd_bhyve_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=bstop status=2 data_status=0
fi

# jailed?
_jailed=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT jailed FROM settings LIMIT 1" )
[ -z "${_jailed}" ] && _jailed="0"

if [ "${_jailed}" != "0" ]; then
	${ECHO} "${N1_COLOR}Stopping jailhost: ${N2_COLOR}${_jailed}${N0_COLOR}"
	jstop jname="${_jailed}"
	echo
fi

/usr/local/bin/tmux -Lcbsd-"${jname}" kill-server 2>/dev/null || true

end_time=$( /bin/date +%s )
cbsdlogger NOTICE ${CBSD_APP}: bhyve domain ${jname} stopped in $(( end_time - st_time ))s
exit 0
